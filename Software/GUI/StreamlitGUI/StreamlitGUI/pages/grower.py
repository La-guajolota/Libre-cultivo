import streamlit as st
import pandas as pd
import numpy as np
import cv2
from time import sleep

# Simulaci칩n del men칰 y redirecci칩n si no est치 logueado
# menu_with_redirect()

# Verificaci칩n de rol del usuario
if "role" in st.session_state and st.session_state.role not in ["Grower"]:
    st.warning("You do not have permission to view this page.")
    st.stop()

# Inicializaci칩n de estados de los actuadores si no est치n en session_state
if 'pump_states' not in st.session_state:
    st.session_state.pump_states = [False, False, False]  # Estado inicial de las bombas
if 'humidifier_states' not in st.session_state:
    st.session_state.humidifier_states = [False, False, False]  # Estado inicial de los humidificadores

# T칤tulo de la aplicaci칩n
st.title(":green[Real-time] sensors and :blue[fully-controlled] system :scientist: :material/analytics:")
st.markdown("**As a grower, you can monitor real-time sensor measurements and take action using actuators.**")

# Valores iniciales de los sensores
waterTemp = 25
waterTemp_delta = 2

# Disposici칩n en columnas para mostrar los valores de los sensores
col1_water, col2_amb, col3_actuators = st.columns(3)

# Columna para m칠tricas de la soluci칩n de agua
with col1_water:
    st.title("*Solution*", anchor=False)
    st.metric(label="Temperature", value=f"{waterTemp} 춿C", delta=f"{waterTemp_delta} 춿C")
    st.metric(label="pH", value=f"{waterTemp}", delta=f"{waterTemp_delta}")
    st.metric(label="EC", value=f"{waterTemp} mS/cm", delta=f"{waterTemp_delta} mS/cm")
    st.metric(label="TDS", value=f"{waterTemp} ppm", delta=f"{waterTemp_delta} ppm")

# Columna para m칠tricas del ecosistema
with col2_amb:
    st.title("*Ecosystem*", anchor=False)
    st.metric(label="Temperature", value=f"{waterTemp} 춿C", delta=f"{waterTemp_delta} 춿C")
    st.metric(label="Humidity", value=f"{waterTemp} %", delta=f"{waterTemp_delta}")
    st.metric(label="Pressure", value=f"{waterTemp} mbar", delta=f"{waterTemp_delta} mbar")
    st.metric(label="Electric Power", value=f"{1} W", delta=f"{2} W")

# Columna para actuadores y controles

with col3_actuators:
    st.title("*Actuators*", anchor=False)
    
    # Lista desplegable para seleccionar LED y ajustar la intensidad
    led_options = ["Grow LED 1", "Grow LED 2", "Grow LED 3"]
    selected_led = st.selectbox("Select Grow LED to control:", led_options)
    led_intensity = st.slider(f"Set intensity for {selected_led}:", min_value=0, max_value=100)
    #? Actualizar valores al sistema f칤sica
    print(f"{selected_led}: {led_intensity}")

    # Lista desplegable para seleccionar bombas dosificadoras y alternar su estado
    pump_options = ["Dosing Pump 丘뙖잺1", "Dosing Pump 丘뙖잺2", "Dosing Pump 丘뙖잺3"]
    selected_pump = st.selectbox("Select Dosing Pump to control:", pump_options)
    # 칈ndice de la bomba seleccionada
    pump_index = pump_options.index(selected_pump)
    # Texto del bot칩n seg칰n el estado de la bomba
    pump_button_label = f"{'Deactivate' if st.session_state.pump_states[pump_index] else 'Activate'} {selected_pump}"

    # Cambiar el estado de la bomba al presionar el bot칩n (toggle)
    if st.button(pump_button_label):
        st.session_state.pump_states[pump_index] = not st.session_state.pump_states[pump_index]  # Cambia el estado

    # Lista desplegable para seleccionar humidificadores y alternar su estado
    humidifier_options = ["Humidifier 游눧1", "Humidifier 游눧2", "Humidifier 游눧3"]
    selected_humidifier = st.selectbox("Select Humidifier to control:", humidifier_options)

    # 칈ndice del humidificador seleccionado
    humidifier_index = humidifier_options.index(selected_humidifier)

    # Texto del bot칩n seg칰n el estado del humidificador
    humidifier_button_label = f"{'Deactivate' if st.session_state.humidifier_states[humidifier_index] else 'Activate'} {selected_humidifier}"

    # Cambiar el estado del humidificador al presionar el bot칩n (toggle)
    if st.button(humidifier_button_label):
        st.session_state.humidifier_states[humidifier_index] = not st.session_state.humidifier_states[humidifier_index]  # Cambia el estado

# Selector de gr치ficos
parameters_list = ["Water temperature", "EC", "TDS", "pH", "Environment temperature", "Pressure", "Humidity", "Electric power"]
parameter_selected = st.selectbox("Select a parameter to view its graph:", parameters_list)

# Generaci칩n de datos aleatorios para el gr치fico
chart_data = pd.DataFrame(np.random.randn(100, 3), columns=["col1", "col2", "col3"])
chart_data["col1"] = pd.Series(range(len(chart_data)))  # Simulaci칩n de tiempo en los datos

# Mostrar el gr치fico basado en el par치metro seleccionado
st.line_chart(chart_data.set_index("col1"), use_container_width=True)

# Captura de video en tiempo real
st.title("Real-time Video Capture")

# Configuraci칩n de captura de video
camera = cv2.VideoCapture(0)  # Ajustar el 칤ndice de la c치mara seg칰n sea necesario

# Bot칩n para iniciar la captura de video
if st.button("Start Capture"):
    st.write("Capturing...")

    # Placeholder para mostrar el video
    placeholder = st.empty()

    # Bucle para capturar im치genes en tiempo real
    while True:
        ret, frame = camera.read()
        if not ret:
            st.write("Error capturing the image.")
            break

        # Convertir la imagen de BGR a RGB
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Mostrar la imagen en Streamlit y actualizar el placeholder
        placeholder.image(frame, channels="RGB")

    # Liberar la c치mara al finalizar la captura
    camera.release()
else:
    st.write("Press the button to start capturing.")
