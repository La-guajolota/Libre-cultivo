
STM32F4_DHT11_22_DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080066b0  080066b0  000076b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a68  08006a68  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a70  08006a70  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00007a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a74  08006a74  00007a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001d4  08006c4c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006c4c  000083f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c958  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7d  00000000  00000000  00014b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000169e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac5  00000000  00000000  000177b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c13  00000000  00000000  00018275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e70  00000000  00000000  0003ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2955  00000000  00000000  0004bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e64d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd0  00000000  00000000  0011e690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00123260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006698 	.word	0x08006698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006698 	.word	0x08006698

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fb8:	f107 0208 	add.w	r2, r7, #8
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	214e      	movs	r1, #78	@ 0x4e
 8000fc4:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <lcd_send_cmd+0x5c>)
 8000fc6:	f001 fa13 	bl	80023f0 <HAL_I2C_Master_Transmit>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f0 	.word	0x200001f0

08000fd8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f043 030d 	orr.w	r3, r3, #13
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0309 	orr.w	r3, r3, #9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	f043 030d 	orr.w	r3, r3, #13
 800100a:	b2db      	uxtb	r3, r3
 800100c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	f043 0309 	orr.w	r3, r3, #9
 8001014:	b2db      	uxtb	r3, r3
 8001016:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001018:	f107 0208 	add.w	r2, r7, #8
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2304      	movs	r3, #4
 8001022:	214e      	movs	r1, #78	@ 0x4e
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <lcd_send_data+0x5c>)
 8001026:	f001 f9e3 	bl	80023f0 <HAL_I2C_Master_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001f0 	.word	0x200001f0

08001038 <lcd_clear>:

void lcd_clear (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff9b 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 8001042:	200a      	movs	r0, #10
 8001044:	f000 fdc0 	bl	8001bc8 <HAL_Delay>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    switch (row)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <lcd_put_cur+0x18>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <lcd_put_cur+0x22>
 8001062:	e009      	b.n	8001078 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800106a:	603b      	str	r3, [r7, #0]
            break;
 800106c:	e004      	b.n	8001078 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001074:	603b      	str	r3, [r7, #0]
            break;
 8001076:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff7b 	bl	8000f78 <lcd_send_cmd>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_init>:


void lcd_init (void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f000 fd9a 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001094:	2030      	movs	r0, #48	@ 0x30
 8001096:	f7ff ff6f 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800109a:	2005      	movs	r0, #5
 800109c:	f000 fd94 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010a0:	2030      	movs	r0, #48	@ 0x30
 80010a2:	f7ff ff69 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 fd8e 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010ac:	2030      	movs	r0, #48	@ 0x30
 80010ae:	f7ff ff63 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f000 fd88 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010b8:	2020      	movs	r0, #32
 80010ba:	f7ff ff5d 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f000 fd82 	bl	8001bc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010c4:	2028      	movs	r0, #40	@ 0x28
 80010c6:	f7ff ff57 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fd7c 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010d0:	2008      	movs	r0, #8
 80010d2:	f7ff ff51 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fd76 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff4b 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 fd70 	bl	8001bc8 <HAL_Delay>
	HAL_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fd6d 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010ee:	2006      	movs	r0, #6
 80010f0:	f7ff ff42 	bl	8000f78 <lcd_send_cmd>
	HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 fd67 	bl	8001bc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010fa:	200c      	movs	r0, #12
 80010fc:	f7ff ff3c 	bl	8000f78 <lcd_send_cmd>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800110c:	e006      	b.n	800111c <lcd_send_string+0x18>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff5e 	bl	8000fd8 <lcd_send_data>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f4      	bne.n	800110e <lcd_send_string+0xa>
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <delay+0x30>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8001142:	bf00      	nop
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <delay+0x30>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3f9      	bcc.n	8001144 <delay+0x14>
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000244 	.word	0x20000244

08001164 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 0);
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff ff62 	bl	800104c <lcd_put_cur>

	sprintf (str, "TEMP:- %.2f ", Temp);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff f9fd 	bl	8000588 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	f107 000c 	add.w	r0, r7, #12
 8001196:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <Display_Temp+0x50>)
 8001198:	f003 f952 	bl	8004440 <siprintf>
	lcd_send_string(str);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffaf 	bl	8001104 <lcd_send_string>
	lcd_send_data('C');
 80011a6:	2043      	movs	r0, #67	@ 0x43
 80011a8:	f7ff ff16 	bl	8000fd8 <lcd_send_data>
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080066b0 	.word	0x080066b0

080011b8 <Display_Rh>:

void Display_Rh (float Rh)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
	lcd_put_cur(1, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ff38 	bl	800104c <lcd_put_cur>

	sprintf (str, "RH:- %.2f ", Rh);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff f9d3 	bl	8000588 <__aeabi_f2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	f107 000c 	add.w	r0, r7, #12
 80011ea:	4907      	ldr	r1, [pc, #28]	@ (8001208 <Display_Rh+0x50>)
 80011ec:	f003 f928 	bl	8004440 <siprintf>
	lcd_send_string(str);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff85 	bl	8001104 <lcd_send_string>
	lcd_send_data('%');
 80011fa:	2025      	movs	r0, #37	@ 0x25
 80011fc:	f7ff feec 	bl	8000fd8 <lcd_send_data>
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080066c0 	.word	0x080066c0

0800120c <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fdce 	bl	8001ddc <HAL_GPIO_Init>
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fdb0 	bl	8001ddc <HAL_GPIO_Init>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <DHT22_Start>:

#define DHT22_PORT GPIOA
#define DHT22_PIN GPIO_PIN_1

void DHT22_Start (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001288:	2102      	movs	r1, #2
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <DHT22_Start+0x3c>)
 800128c:	f7ff ffbe 	bl	800120c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <DHT22_Start+0x3c>)
 8001296:	f000 ff4d 	bl	8002134 <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 800129a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800129e:	f7ff ff47 	bl	8001130 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4806      	ldr	r0, [pc, #24]	@ (80012c0 <DHT22_Start+0x3c>)
 80012a8:	f000 ff44 	bl	8002134 <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff ff3f 	bl	8001130 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 80012b2:	2102      	movs	r1, #2
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DHT22_Start+0x3c>)
 80012b6:	f7ff ffc7 	bl	8001248 <Set_Pin_Input>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020000 	.word	0x40020000

080012c4 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 80012ca:	2102      	movs	r1, #2
 80012cc:	4815      	ldr	r0, [pc, #84]	@ (8001324 <DHT22_Check_Response+0x60>)
 80012ce:	f7ff ffbb 	bl	8001248 <Set_Pin_Input>
	uint8_t Response = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 80012d6:	2028      	movs	r0, #40	@ 0x28
 80012d8:	f7ff ff2a 	bl	8001130 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 80012dc:	2102      	movs	r1, #2
 80012de:	4811      	ldr	r0, [pc, #68]	@ (8001324 <DHT22_Check_Response+0x60>)
 80012e0:	f000 ff10 	bl	8002104 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10e      	bne.n	8001308 <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 80012ea:	2050      	movs	r0, #80	@ 0x50
 80012ec:	f7ff ff20 	bl	8001130 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 80012f0:	2102      	movs	r1, #2
 80012f2:	480c      	ldr	r0, [pc, #48]	@ (8001324 <DHT22_Check_Response+0x60>)
 80012f4:	f000 ff06 	bl	8002104 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <DHT22_Check_Response+0x40>
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e001      	b.n	8001308 <DHT22_Check_Response+0x44>
		else Response = -1;
 8001304:	23ff      	movs	r3, #255	@ 0xff
 8001306:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8001308:	bf00      	nop
 800130a:	2102      	movs	r1, #2
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <DHT22_Check_Response+0x60>)
 800130e:	f000 fef9 	bl	8002104 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f8      	bne.n	800130a <DHT22_Check_Response+0x46>
	return Response;
 8001318:	79fb      	ldrb	r3, [r7, #7]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020000 	.word	0x40020000

08001328 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800132e:	2300      	movs	r3, #0
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	e037      	b.n	80013a4 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8001334:	bf00      	nop
 8001336:	2102      	movs	r1, #2
 8001338:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <DHT22_Read+0x8c>)
 800133a:	f000 fee3 	bl	8002104 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f8      	beq.n	8001336 <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8001344:	2028      	movs	r0, #40	@ 0x28
 8001346:	f7ff fef3 	bl	8001130 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 800134a:	2102      	movs	r1, #2
 800134c:	4819      	ldr	r0, [pc, #100]	@ (80013b4 <DHT22_Read+0x8c>)
 800134e:	f000 fed9 	bl	8002104 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10e      	bne.n	8001376 <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2201      	movs	r2, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	4013      	ands	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	e00b      	b.n	800138e <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	f1c3 0307 	rsb	r3, r3, #7
 800137c:	2201      	movs	r2, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	b25a      	sxtb	r2, r3
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4313      	orrs	r3, r2
 800138a:	b25b      	sxtb	r3, r3
 800138c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 800138e:	bf00      	nop
 8001390:	2102      	movs	r1, #2
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <DHT22_Read+0x8c>)
 8001394:	f000 feb6 	bl	8002104 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f8      	bne.n	8001390 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	3301      	adds	r3, #1
 80013a2:	71bb      	strb	r3, [r7, #6]
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	d9c4      	bls.n	8001334 <DHT22_Read+0xc>
	}

	return i;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020000 	.word	0x40020000

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fb92 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f8a6 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f000 f974 	bl	80016b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013c8:	f000 f90e 	bl	80015e8 <MX_I2C1_Init>
  MX_TIM6_Init();
 80013cc:	f000 f93a 	bl	8001644 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80013d0:	4842      	ldr	r0, [pc, #264]	@ (80014dc <main+0x124>)
 80013d2:	f002 f98b 	bl	80036ec <HAL_TIM_Base_Start>

  lcd_init();
 80013d6:	f7ff fe58 	bl	800108a <lcd_init>
  lcd_send_string("INITIALISING>>>>");
 80013da:	4841      	ldr	r0, [pc, #260]	@ (80014e0 <main+0x128>)
 80013dc:	f7ff fe92 	bl	8001104 <lcd_send_string>
  HAL_Delay(2000);
 80013e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013e4:	f000 fbf0 	bl	8001bc8 <HAL_Delay>
  lcd_clear ();
 80013e8:	f7ff fe26 	bl	8001038 <lcd_clear>
   {
     /* USER CODE END WHILE */

     /* USER CODE BEGIN 3 */

	  DHT22_Start();
 80013ec:	f7ff ff4a 	bl	8001284 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 80013f0:	f7ff ff68 	bl	80012c4 <DHT22_Check_Response>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <main+0x12c>)
 80013fa:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read ();
 80013fc:	f7ff ff94 	bl	8001328 <DHT22_Read>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <main+0x130>)
 8001406:	701a      	strb	r2, [r3, #0]
      Rh_byte2 = DHT22_Read ();
 8001408:	f7ff ff8e 	bl	8001328 <DHT22_Read>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <main+0x134>)
 8001412:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read ();
 8001414:	f7ff ff88 	bl	8001328 <DHT22_Read>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <main+0x138>)
 800141e:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read ();
 8001420:	f7ff ff82 	bl	8001328 <DHT22_Read>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <main+0x13c>)
 800142a:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 800142c:	f7ff ff7c 	bl	8001328 <DHT22_Read>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <main+0x140>)
 8001436:	801a      	strh	r2, [r3, #0]

	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <main+0x138>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b2c      	ldr	r3, [pc, #176]	@ (80014f4 <main+0x13c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21b      	sxth	r3, r3
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <main+0x144>)
 800144e:	801a      	strh	r2, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <main+0x130>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <main+0x134>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <main+0x148>)
 8001466:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) (TEMP/10.0);
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <main+0x144>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f879 	bl	8000564 <__aeabi_i2d>
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <main+0x14c>)
 8001478:	f7ff fa08 	bl	800088c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fbb0 	bl	8000be8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <main+0x150>)
 800148c:	6013      	str	r3, [r2, #0]
	  Humidity = (float) (RH/10.0);
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <main+0x148>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f866 	bl	8000564 <__aeabi_i2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <main+0x14c>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb9d 	bl	8000be8 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a16      	ldr	r2, [pc, #88]	@ (800150c <main+0x154>)
 80014b2:	6013      	str	r3, [r2, #0]


 	  HAL_Delay(3000);
 80014b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014b8:	f000 fb86 	bl	8001bc8 <HAL_Delay>

 	  Display_Temp(Temperature);
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <main+0x150>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f7ff fe4d 	bl	8001164 <Display_Temp>
 	  Display_Rh(Humidity);
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <main+0x154>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	f7ff fe70 	bl	80011b8 <Display_Rh>
	  DHT22_Start();
 80014d8:	bf00      	nop
 80014da:	e787      	b.n	80013ec <main+0x34>
 80014dc:	20000244 	.word	0x20000244
 80014e0:	080066cc 	.word	0x080066cc
 80014e4:	200002a0 	.word	0x200002a0
 80014e8:	2000028c 	.word	0x2000028c
 80014ec:	2000028d 	.word	0x2000028d
 80014f0:	2000028e 	.word	0x2000028e
 80014f4:	2000028f 	.word	0x2000028f
 80014f8:	20000290 	.word	0x20000290
 80014fc:	20000294 	.word	0x20000294
 8001500:	20000292 	.word	0x20000292
 8001504:	40240000 	.word	0x40240000
 8001508:	20000298 	.word	0x20000298
 800150c:	2000029c 	.word	0x2000029c

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	@ 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2234      	movs	r2, #52	@ 0x34
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fff1 	bl	8004506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <SystemClock_Config+0xd0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <SystemClock_Config+0xd0>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	@ 0x40
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <SystemClock_Config+0xd0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <SystemClock_Config+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800155c:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <SystemClock_Config+0xd4>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <SystemClock_Config+0xd4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001582:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001588:	2332      	movs	r3, #50	@ 0x32
 800158a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fdb7 	bl	8003110 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a8:	f000 f8d2 	bl	8001750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fa6b 	bl	8002aa4 <HAL_RCC_ClockConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015d4:	f000 f8bc 	bl	8001750 <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	3750      	adds	r7, #80	@ 0x50
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_I2C1_Init+0x50>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <MX_I2C1_Init+0x54>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_I2C1_Init+0x50>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <MX_I2C1_Init+0x58>)
 80015f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_I2C1_Init+0x50>)
 8001606:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800160a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_I2C1_Init+0x50>)
 8001626:	f000 fd9f 	bl	8002168 <HAL_I2C_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001630:	f000 f88e 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001f0 	.word	0x200001f0
 800163c:	40005400 	.word	0x40005400
 8001640:	000186a0 	.word	0x000186a0

08001644 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_TIM6_Init+0x64>)
 8001654:	4a15      	ldr	r2, [pc, #84]	@ (80016ac <MX_TIM6_Init+0x68>)
 8001656:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_TIM6_Init+0x64>)
 800165a:	2231      	movs	r2, #49	@ 0x31
 800165c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_TIM6_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_TIM6_Init+0x64>)
 8001666:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800166a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_TIM6_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001672:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_TIM6_Init+0x64>)
 8001674:	f001 ffea 	bl	800364c <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800167e:	f000 f867 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <MX_TIM6_Init+0x64>)
 8001690:	f002 f940 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800169a:	f000 f859 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000244 	.word	0x20000244
 80016ac:	40001000 	.word	0x40001000

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <MX_GPIO_Init+0x98>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_GPIO_Init+0x98>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <MX_GPIO_Init+0x98>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_GPIO_Init+0x98>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2102      	movs	r1, #2
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <MX_GPIO_Init+0x9c>)
 8001720:	f000 fd08 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001724:	2302      	movs	r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4619      	mov	r1, r3
 800173a:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_GPIO_Init+0x9c>)
 800173c:	f000 fb4e 	bl	8001ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <Error_Handler+0x8>

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <HAL_MspInit+0x4c>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_I2C_MspInit+0x84>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12c      	bne.n	8001828 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	@ (8001838 <HAL_I2C_MspInit+0x8c>)
 8001808:	f000 fae8 	bl	8001ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 8001816:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_I2C_MspInit+0x88>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005400 	.word	0x40005400
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_TIM_Base_MspInit+0x3c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10d      	bne.n	800186a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40001000 	.word	0x40001000
 800187c:	40023800 	.word	0x40023800

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 f957 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}

080018de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_kill>:

int _kill(int pid, int sig)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f8:	f002 fe58 	bl	80045ac <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2216      	movs	r2, #22
 8001900:	601a      	str	r2, [r3, #0]
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_exit>:

void _exit (int status)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001916:	f04f 31ff 	mov.w	r1, #4294967295
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffe7 	bl	80018ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <_exit+0x12>

08001924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
  }

  return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
  }
  return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019be:	605a      	str	r2, [r3, #4]
  return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f002 fdbc 	bl	80045ac <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	200002a4 	.word	0x200002a4
 8001a68:	200003f8 	.word	0x200003f8

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a94:	f7ff ffea 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f002 fd7b 	bl	80045b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fc79 	bl	80013b8 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ad4:	08006a78 	.word	0x08006a78
  ldr r2, =_sbss
 8001ad8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001adc:	200003f8 	.word	0x200003f8

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f931 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fe20 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f93b 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f911 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	200002a8 	.word	0x200002a8

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200002a8 	.word	0x200002a8

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	@ (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	@ (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff47 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff5c 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffb0 	bl	8001d30 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e165      	b.n	80020c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8154 	bne.w	80020be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d005      	beq.n	8001e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d017      	beq.n	8001ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d123      	bne.n	8001f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80ae 	beq.w	80020be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b5d      	ldr	r3, [pc, #372]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f72:	4b5a      	ldr	r3, [pc, #360]	@ (80020dc <HAL_GPIO_Init+0x300>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7e:	4a58      	ldr	r2, [pc, #352]	@ (80020e0 <HAL_GPIO_Init+0x304>)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80020e4 <HAL_GPIO_Init+0x308>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x21a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4e      	ldr	r2, [pc, #312]	@ (80020e8 <HAL_GPIO_Init+0x30c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x216>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80020ec <HAL_GPIO_Init+0x310>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x212>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80020f0 <HAL_GPIO_Init+0x314>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80020f4 <HAL_GPIO_Init+0x318>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x20a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80020f8 <HAL_GPIO_Init+0x31c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x206>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a49      	ldr	r2, [pc, #292]	@ (80020fc <HAL_GPIO_Init+0x320>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x202>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00c      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e00a      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e008      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x21c>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002008:	4935      	ldr	r1, [pc, #212]	@ (80020e0 <HAL_GPIO_Init+0x304>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203a:	4a31      	ldr	r2, [pc, #196]	@ (8002100 <HAL_GPIO_Init+0x324>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002040:	4b2f      	ldr	r3, [pc, #188]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206a:	4b25      	ldr	r3, [pc, #148]	@ (8002100 <HAL_GPIO_Init+0x324>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208e:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b8:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_GPIO_Init+0x324>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	f67f ae96 	bls.w	8001df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3724      	adds	r7, #36	@ 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	40020800 	.word	0x40020800
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40021400 	.word	0x40021400
 80020fc:	40021800 	.word	0x40021800
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e12b      	b.n	80023d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fb0c 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021cc:	f000 fd5c 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a81      	ldr	r2, [pc, #516]	@ (80023dc <HAL_I2C_Init+0x274>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d807      	bhi.n	80021ec <HAL_I2C_Init+0x84>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a80      	ldr	r2, [pc, #512]	@ (80023e0 <HAL_I2C_Init+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf94      	ite	ls
 80021e4:	2301      	movls	r3, #1
 80021e6:	2300      	movhi	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e006      	b.n	80021fa <HAL_I2C_Init+0x92>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a7d      	ldr	r2, [pc, #500]	@ (80023e4 <HAL_I2C_Init+0x27c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0e7      	b.n	80023d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a78      	ldr	r2, [pc, #480]	@ (80023e8 <HAL_I2C_Init+0x280>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9b      	lsrs	r3, r3, #18
 800220c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a6a      	ldr	r2, [pc, #424]	@ (80023dc <HAL_I2C_Init+0x274>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d802      	bhi.n	800223c <HAL_I2C_Init+0xd4>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3301      	adds	r3, #1
 800223a:	e009      	b.n	8002250 <HAL_I2C_Init+0xe8>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a69      	ldr	r2, [pc, #420]	@ (80023ec <HAL_I2C_Init+0x284>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	430b      	orrs	r3, r1
 8002256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002262:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	495c      	ldr	r1, [pc, #368]	@ (80023dc <HAL_I2C_Init+0x274>)
 800226c:	428b      	cmp	r3, r1
 800226e:	d819      	bhi.n	80022a4 <HAL_I2C_Init+0x13c>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e59      	subs	r1, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fbb1 f3f3 	udiv	r3, r1, r3
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002284:	400b      	ands	r3, r1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_I2C_Init+0x138>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e59      	subs	r1, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fbb1 f3f3 	udiv	r3, r1, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229e:	e051      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022a0:	2304      	movs	r3, #4
 80022a2:	e04f      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <HAL_I2C_Init+0x168>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e012      	b.n	80022f6 <HAL_I2C_Init+0x18e>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	0099      	lsls	r1, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x196>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e022      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10e      	bne.n	8002324 <HAL_I2C_Init+0x1bc>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e58      	subs	r0, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	440b      	add	r3, r1
 8002314:	fbb0 f3f3 	udiv	r3, r0, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Init+0x1dc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6809      	ldr	r1, [r1, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002372:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6911      	ldr	r1, [r2, #16]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	000186a0 	.word	0x000186a0
 80023e0:	001e847f 	.word	0x001e847f
 80023e4:	003d08ff 	.word	0x003d08ff
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	461a      	mov	r2, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	4613      	mov	r3, r2
 8002402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fbd4 	bl	8001bb0 <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	f040 80e0 	bne.w	80025d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4970      	ldr	r1, [pc, #448]	@ (80025e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f964 	bl	80026f0 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	e0d3      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_I2C_Master_Transmit+0x50>
 800243c:	2302      	movs	r3, #2
 800243e:	e0cc      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d007      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	@ 0x21
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a50      	ldr	r2, [pc, #320]	@ (80025e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f89c 	bl	80025ec <I2C_MasterRequestWrite>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d4:	e066      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa22 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d107      	bne.n	80024fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x188>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d017      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6a39      	ldr	r1, [r7, #32]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa19 	bl	80029b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e01a      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d194      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	00100002 	.word	0x00100002
 80025e8:	ffff0000 	.word	0xffff0000

080025ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	460b      	mov	r3, r1
 80025fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d006      	beq.n	8002616 <I2C_MasterRequestWrite+0x2a>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d003      	beq.n	8002616 <I2C_MasterRequestWrite+0x2a>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002614:	d108      	bne.n	8002628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e00b      	b.n	8002640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	2b12      	cmp	r3, #18
 800262e:	d107      	bne.n	8002640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f84f 	bl	80026f0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002666:	d103      	bne.n	8002670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e035      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800267c:	d108      	bne.n	8002690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	e01b      	b.n	80026c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	11db      	asrs	r3, r3, #7
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 0306 	and.w	r3, r3, #6
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f063 030f 	orn	r3, r3, #15
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	490e      	ldr	r1, [pc, #56]	@ (80026e8 <I2C_MasterRequestWrite+0xfc>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f898 	bl	80027e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e010      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4907      	ldr	r1, [pc, #28]	@ (80026ec <I2C_MasterRequestWrite+0x100>)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f888 	bl	80027e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	00010008 	.word	0x00010008
 80026ec:	00010002 	.word	0x00010002

080026f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002700:	e048      	b.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d044      	beq.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270a:	f7ff fa51 	bl	8001bb0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d139      	bne.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10d      	bne.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x56>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	e00c      	b.n	8002760 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	429a      	cmp	r2, r3
 8002764:	d116      	bne.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e023      	b.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	e00c      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d093      	beq.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f2:	e071      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002802:	d123      	bne.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800281c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0204 	orr.w	r2, r3, #4
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e067      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d041      	beq.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7ff f9ac 	bl	8001bb0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d136      	bne.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d10c      	bne.n	800288e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf14      	ite	ne
 8002886:	2301      	movne	r3, #1
 8002888:	2300      	moveq	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	e00b      	b.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	43da      	mvns	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4013      	ands	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e021      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10c      	bne.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e00b      	b.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af6d 	bne.w	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002930:	e034      	b.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f886 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e034      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d028      	beq.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f931 	bl	8001bb0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11d      	bne.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b80      	cmp	r3, #128	@ 0x80
 800296c:	d016      	beq.n	800299c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a6:	2b80      	cmp	r3, #128	@ 0x80
 80029a8:	d1c3      	bne.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c0:	e034      	b.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f83e 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e034      	b.n	8002a3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d028      	beq.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	f7ff f8e9 	bl	8001bb0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11d      	bne.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d016      	beq.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d1c3      	bne.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d11b      	bne.n	8002a94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0cc      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b68      	ldr	r3, [pc, #416]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d90c      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b63      	ldr	r3, [pc, #396]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b8      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af8:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a58      	ldr	r2, [pc, #352]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b10:	4b53      	ldr	r3, [pc, #332]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a52      	ldr	r2, [pc, #328]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b50      	ldr	r3, [pc, #320]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	494d      	ldr	r1, [pc, #308]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d044      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d119      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e07f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b3f      	ldr	r3, [pc, #252]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e067      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4934      	ldr	r1, [pc, #208]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7ff f80c 	bl	8001bb0 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7ff f808 	bl	8001bb0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e04f      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d20c      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b22      	ldr	r3, [pc, #136]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e032      	b.n	8002c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4916      	ldr	r1, [pc, #88]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	490e      	ldr	r1, [pc, #56]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c2a:	f000 f841 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490a      	ldr	r1, [pc, #40]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c42:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ff6c 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023c00 	.word	0x40023c00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	080066e0 	.word	0x080066e0
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000004 	.word	0x20000004

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c8c:	f7ff fff0 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0a9b      	lsrs	r3, r3, #10
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080066f0 	.word	0x080066f0

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	b0ae      	sub	sp, #184	@ 0xb8
 8002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4bcb      	ldr	r3, [pc, #812]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	f200 8206 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	080030f1 	.word	0x080030f1
 8002cf4:	080030f1 	.word	0x080030f1
 8002cf8:	080030f1 	.word	0x080030f1
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	080030f1 	.word	0x080030f1
 8002d04:	080030f1 	.word	0x080030f1
 8002d08:	080030f1 	.word	0x080030f1
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	080030f1 	.word	0x080030f1
 8002d14:	080030f1 	.word	0x080030f1
 8002d18:	080030f1 	.word	0x080030f1
 8002d1c:	08002f21 	.word	0x08002f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4bb9      	ldr	r3, [pc, #740]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002d26:	e1e7      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4bb8      	ldr	r3, [pc, #736]	@ (800300c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d2e:	e1e3      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4bb4      	ldr	r3, [pc, #720]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d071      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d48:	4bae      	ldr	r3, [pc, #696]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	0159      	lsls	r1, r3, #5
 8002d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d80:	0150      	lsls	r0, r2, #5
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4621      	mov	r1, r4
 8002d88:	1a51      	subs	r1, r2, r1
 8002d8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002da0:	4649      	mov	r1, r9
 8002da2:	018b      	lsls	r3, r1, #6
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002daa:	4641      	mov	r1, r8
 8002dac:	018a      	lsls	r2, r1, #6
 8002dae:	4641      	mov	r1, r8
 8002db0:	1a51      	subs	r1, r2, r1
 8002db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002db4:	4649      	mov	r1, r9
 8002db6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002dc8:	4649      	mov	r1, r9
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	4641      	mov	r1, r8
 8002dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	00ca      	lsls	r2, r1, #3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4622      	mov	r2, r4
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de2:	462b      	mov	r3, r5
 8002de4:	460a      	mov	r2, r1
 8002de6:	eb42 0303 	adc.w	r3, r2, r3
 8002dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002df8:	4629      	mov	r1, r5
 8002dfa:	024b      	lsls	r3, r1, #9
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e02:	4621      	mov	r1, r4
 8002e04:	024a      	lsls	r2, r1, #9
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e1c:	f7fd ff34 	bl	8000c88 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e2a:	e067      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e46:	2300      	movs	r3, #0
 8002e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4621      	mov	r1, r4
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e80:	4649      	mov	r1, r9
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	018a      	lsls	r2, r1, #6
 8002e8e:	4641      	mov	r1, r8
 8002e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e94:	4649      	mov	r1, r9
 8002e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eae:	4692      	mov	sl, r2
 8002eb0:	469b      	mov	fp, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	462b      	mov	r3, r5
 8002ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	028b      	lsls	r3, r1, #10
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed8:	4621      	mov	r1, r4
 8002eda:	028a      	lsls	r2, r1, #10
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ee8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002eee:	f7fd fecb 	bl	8000c88 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002efc:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f1e:	e0eb      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d06b      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	2200      	movs	r2, #0
 8002f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0159      	lsls	r1, r3, #5
 8002f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f66:	0150      	lsls	r0, r2, #5
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	1a51      	subs	r1, r2, r1
 8002f70:	61b9      	str	r1, [r7, #24]
 8002f72:	4629      	mov	r1, r5
 8002f74:	eb63 0301 	sbc.w	r3, r3, r1
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f86:	4659      	mov	r1, fp
 8002f88:	018b      	lsls	r3, r1, #6
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f90:	4651      	mov	r1, sl
 8002f92:	018a      	lsls	r2, r1, #6
 8002f94:	4651      	mov	r1, sl
 8002f96:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9a:	4659      	mov	r1, fp
 8002f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	4623      	mov	r3, r4
 8002fba:	eb18 0303 	adds.w	r3, r8, r3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	024b      	lsls	r3, r1, #9
 8002fd8:	4621      	mov	r1, r4
 8002fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fde:	4621      	mov	r1, r4
 8002fe0:	024a      	lsls	r2, r1, #9
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fea:	2200      	movs	r2, #0
 8002fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff4:	f7fd fe48 	bl	8000c88 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003002:	e065      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x420>
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400
 800300c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003010:	4b3d      	ldr	r3, [pc, #244]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	2200      	movs	r2, #0
 8003018:	4618      	mov	r0, r3
 800301a:	4611      	mov	r1, r2
 800301c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003020:	653b      	str	r3, [r7, #80]	@ 0x50
 8003022:	2300      	movs	r3, #0
 8003024:	657b      	str	r3, [r7, #84]	@ 0x54
 8003026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	f04f 0000 	mov.w	r0, #0
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	0159      	lsls	r1, r3, #5
 8003038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800303c:	0150      	lsls	r0, r2, #5
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4641      	mov	r1, r8
 8003044:	1a51      	subs	r1, r2, r1
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	4649      	mov	r1, r9
 800304a:	eb63 0301 	sbc.w	r3, r3, r1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800305c:	4659      	mov	r1, fp
 800305e:	018b      	lsls	r3, r1, #6
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003066:	4651      	mov	r1, sl
 8003068:	018a      	lsls	r2, r1, #6
 800306a:	4651      	mov	r1, sl
 800306c:	1a54      	subs	r4, r2, r1
 800306e:	4659      	mov	r1, fp
 8003070:	eb63 0501 	sbc.w	r5, r3, r1
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	464b      	mov	r3, r9
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a2:	4629      	mov	r1, r5
 80030a4:	028b      	lsls	r3, r1, #10
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ac:	4621      	mov	r1, r4
 80030ae:	028a      	lsls	r2, r1, #10
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030b8:	2200      	movs	r2, #0
 80030ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030c2:	f7fd fde1 	bl	8000c88 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4613      	mov	r3, r2
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0f1b      	lsrs	r3, r3, #28
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80030de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ee:	e003      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_GetSysClockFreq+0x45c>)
 80030f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	37b8      	adds	r7, #184	@ 0xb8
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400

08003110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e28d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8083 	beq.w	8003236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003130:	4b94      	ldr	r3, [pc, #592]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d019      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800313c:	4b91      	ldr	r3, [pc, #580]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003144:	2b08      	cmp	r3, #8
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003148:	4b8e      	ldr	r3, [pc, #568]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b8b      	ldr	r3, [pc, #556]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b84      	ldr	r3, [pc, #528]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x124>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e25a      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x90>
 8003192:	4b7c      	ldr	r3, [pc, #496]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb4>
 80031aa:	4b76      	ldr	r3, [pc, #472]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fce4 	bl	8001bb0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fce0 	bl	8001bb0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21f      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xdc>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fcd0 	bl	8001bb0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fccc 	bl	8001bb0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20b      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x104>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06f      	beq.n	8003322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003242:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324e:	4b4d      	ldr	r3, [pc, #308]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800325a:	4b4a      	ldr	r3, [pc, #296]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1d3      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x278>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fc79 	bl	8001bb0 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fc75 	bl	8001bb0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1b4      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x278>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fc58 	bl	8001bb0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe fc54 	bl	8001bb0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e193      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fc38 	bl	8001bb0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe fc34 	bl	8001bb0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e173      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x234>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fc21 	bl	8001bb0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe fc1d 	bl	8001bb0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e15c      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b8a      	ldr	r3, [pc, #552]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b83      	ldr	r3, [pc, #524]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7f      	ldr	r3, [pc, #508]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a7e      	ldr	r2, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b7c      	ldr	r3, [pc, #496]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b76      	ldr	r3, [pc, #472]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fbdd 	bl	8001bb0 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe fbd9 	bl	8001bb0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e118      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6c      	ldr	r3, [pc, #432]	@ (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x31e>
 8003420:	4b66      	ldr	r3, [pc, #408]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	4a65      	ldr	r2, [pc, #404]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	@ 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x340>
 8003436:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a60      	ldr	r2, [pc, #384]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	4b5e      	ldr	r3, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a5d      	ldr	r2, [pc, #372]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 8003450:	4b5a      	ldr	r3, [pc, #360]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a59      	ldr	r2, [pc, #356]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
 800345c:	4b57      	ldr	r3, [pc, #348]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a56      	ldr	r2, [pc, #344]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fb9e 	bl	8001bb0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fb9a 	bl	8001bb0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0d7      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b4b      	ldr	r3, [pc, #300]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x368>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe fb88 	bl	8001bb0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fb84 	bl	8001bb0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0c1      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b40      	ldr	r3, [pc, #256]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	4a3a      	ldr	r2, [pc, #232]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ad 	beq.w	800363c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d060      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d145      	bne.n	8003582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fb58 	bl	8001bb0 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fb54 	bl	8001bb0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e093      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b29      	ldr	r3, [pc, #164]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	491b      	ldr	r1, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fb29 	bl	8001bb0 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fb25 	bl	8001bb0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e064      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x452>
 8003580:	e05c      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fb12 	bl	8001bb0 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fb0e 	bl	8001bb0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
 80035ae:	e045      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <HAL_RCC_OscConfig+0x538>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d030      	beq.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d129      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d122      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d119      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d10f      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f8e2 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 f896 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e046      	b.n	8003792 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_TIM_Base_Start+0xb4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371e:	d01d      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1f      	ldr	r2, [pc, #124]	@ (80037a4 <HAL_TIM_Base_Start+0xb8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1e      	ldr	r2, [pc, #120]	@ (80037a8 <HAL_TIM_Base_Start+0xbc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_TIM_Base_Start+0xc0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_TIM_Base_Start+0xc4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_TIM_Base_Start+0xc8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIM_Base_Start+0x70>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a18      	ldr	r2, [pc, #96]	@ (80037b8 <HAL_TIM_Base_Start+0xcc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d010      	beq.n	8003790 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e007      	b.n	8003790 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40010400 	.word	0x40010400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40001800 	.word	0x40001800

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a46      	ldr	r2, [pc, #280]	@ (80038e8 <TIM_Base_SetConfig+0x12c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037da:	d00f      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a43      	ldr	r2, [pc, #268]	@ (80038ec <TIM_Base_SetConfig+0x130>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a42      	ldr	r2, [pc, #264]	@ (80038f0 <TIM_Base_SetConfig+0x134>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a41      	ldr	r2, [pc, #260]	@ (80038f4 <TIM_Base_SetConfig+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a40      	ldr	r2, [pc, #256]	@ (80038f8 <TIM_Base_SetConfig+0x13c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a35      	ldr	r2, [pc, #212]	@ (80038e8 <TIM_Base_SetConfig+0x12c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d027      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a32      	ldr	r2, [pc, #200]	@ (80038ec <TIM_Base_SetConfig+0x130>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d023      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <TIM_Base_SetConfig+0x134>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a30      	ldr	r2, [pc, #192]	@ (80038f4 <TIM_Base_SetConfig+0x138>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2f      	ldr	r2, [pc, #188]	@ (80038f8 <TIM_Base_SetConfig+0x13c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d017      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2e      	ldr	r2, [pc, #184]	@ (80038fc <TIM_Base_SetConfig+0x140>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <TIM_Base_SetConfig+0x144>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <TIM_Base_SetConfig+0x148>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <TIM_Base_SetConfig+0x14c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2a      	ldr	r2, [pc, #168]	@ (800390c <TIM_Base_SetConfig+0x150>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a29      	ldr	r2, [pc, #164]	@ (8003910 <TIM_Base_SetConfig+0x154>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <TIM_Base_SetConfig+0x12c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a12      	ldr	r2, [pc, #72]	@ (80038f8 <TIM_Base_SetConfig+0x13c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d105      	bne.n	80038da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]
  }
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	40001800 	.word	0x40001800
 800390c:	40001c00 	.word	0x40001c00
 8003910:	40002000 	.word	0x40002000

08003914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e05a      	b.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a21      	ldr	r2, [pc, #132]	@ (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d022      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003978:	d01d      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1b      	ldr	r2, [pc, #108]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1a      	ldr	r2, [pc, #104]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a15      	ldr	r2, [pc, #84]	@ (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10c      	bne.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40010400 	.word	0x40010400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40001800 	.word	0x40001800

08003a0c <__cvt>:
 8003a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	ec57 6b10 	vmov	r6, r7, d0
 8003a14:	2f00      	cmp	r7, #0
 8003a16:	460c      	mov	r4, r1
 8003a18:	4619      	mov	r1, r3
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	bfbb      	ittet	lt
 8003a1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003a22:	461f      	movlt	r7, r3
 8003a24:	2300      	movge	r3, #0
 8003a26:	232d      	movlt	r3, #45	@ 0x2d
 8003a28:	700b      	strb	r3, [r1, #0]
 8003a2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003a30:	4691      	mov	r9, r2
 8003a32:	f023 0820 	bic.w	r8, r3, #32
 8003a36:	bfbc      	itt	lt
 8003a38:	4632      	movlt	r2, r6
 8003a3a:	4616      	movlt	r6, r2
 8003a3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a40:	d005      	beq.n	8003a4e <__cvt+0x42>
 8003a42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a46:	d100      	bne.n	8003a4a <__cvt+0x3e>
 8003a48:	3401      	adds	r4, #1
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	e000      	b.n	8003a50 <__cvt+0x44>
 8003a4e:	2103      	movs	r1, #3
 8003a50:	ab03      	add	r3, sp, #12
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	ab02      	add	r3, sp, #8
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	ec47 6b10 	vmov	d0, r6, r7
 8003a5c:	4653      	mov	r3, sl
 8003a5e:	4622      	mov	r2, r4
 8003a60:	f000 fe5a 	bl	8004718 <_dtoa_r>
 8003a64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a68:	4605      	mov	r5, r0
 8003a6a:	d119      	bne.n	8003aa0 <__cvt+0x94>
 8003a6c:	f019 0f01 	tst.w	r9, #1
 8003a70:	d00e      	beq.n	8003a90 <__cvt+0x84>
 8003a72:	eb00 0904 	add.w	r9, r0, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	f7fd f843 	bl	8000b08 <__aeabi_dcmpeq>
 8003a82:	b108      	cbz	r0, 8003a88 <__cvt+0x7c>
 8003a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a88:	2230      	movs	r2, #48	@ 0x30
 8003a8a:	9b03      	ldr	r3, [sp, #12]
 8003a8c:	454b      	cmp	r3, r9
 8003a8e:	d31e      	bcc.n	8003ace <__cvt+0xc2>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a94:	1b5b      	subs	r3, r3, r5
 8003a96:	4628      	mov	r0, r5
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	b004      	add	sp, #16
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003aa4:	eb00 0904 	add.w	r9, r0, r4
 8003aa8:	d1e5      	bne.n	8003a76 <__cvt+0x6a>
 8003aaa:	7803      	ldrb	r3, [r0, #0]
 8003aac:	2b30      	cmp	r3, #48	@ 0x30
 8003aae:	d10a      	bne.n	8003ac6 <__cvt+0xba>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	4639      	mov	r1, r7
 8003ab8:	f7fd f826 	bl	8000b08 <__aeabi_dcmpeq>
 8003abc:	b918      	cbnz	r0, 8003ac6 <__cvt+0xba>
 8003abe:	f1c4 0401 	rsb	r4, r4, #1
 8003ac2:	f8ca 4000 	str.w	r4, [sl]
 8003ac6:	f8da 3000 	ldr.w	r3, [sl]
 8003aca:	4499      	add	r9, r3
 8003acc:	e7d3      	b.n	8003a76 <__cvt+0x6a>
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e7d9      	b.n	8003a8a <__cvt+0x7e>

08003ad6 <__exponent>:
 8003ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	bfba      	itte	lt
 8003adc:	4249      	neglt	r1, r1
 8003ade:	232d      	movlt	r3, #45	@ 0x2d
 8003ae0:	232b      	movge	r3, #43	@ 0x2b
 8003ae2:	2909      	cmp	r1, #9
 8003ae4:	7002      	strb	r2, [r0, #0]
 8003ae6:	7043      	strb	r3, [r0, #1]
 8003ae8:	dd29      	ble.n	8003b3e <__exponent+0x68>
 8003aea:	f10d 0307 	add.w	r3, sp, #7
 8003aee:	461d      	mov	r5, r3
 8003af0:	270a      	movs	r7, #10
 8003af2:	461a      	mov	r2, r3
 8003af4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003af8:	fb07 1416 	mls	r4, r7, r6, r1
 8003afc:	3430      	adds	r4, #48	@ 0x30
 8003afe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b02:	460c      	mov	r4, r1
 8003b04:	2c63      	cmp	r4, #99	@ 0x63
 8003b06:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	dcf1      	bgt.n	8003af2 <__exponent+0x1c>
 8003b0e:	3130      	adds	r1, #48	@ 0x30
 8003b10:	1e94      	subs	r4, r2, #2
 8003b12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b16:	1c41      	adds	r1, r0, #1
 8003b18:	4623      	mov	r3, r4
 8003b1a:	42ab      	cmp	r3, r5
 8003b1c:	d30a      	bcc.n	8003b34 <__exponent+0x5e>
 8003b1e:	f10d 0309 	add.w	r3, sp, #9
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	42ac      	cmp	r4, r5
 8003b26:	bf88      	it	hi
 8003b28:	2300      	movhi	r3, #0
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	1a18      	subs	r0, r3, r0
 8003b30:	b003      	add	sp, #12
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b3c:	e7ed      	b.n	8003b1a <__exponent+0x44>
 8003b3e:	2330      	movs	r3, #48	@ 0x30
 8003b40:	3130      	adds	r1, #48	@ 0x30
 8003b42:	7083      	strb	r3, [r0, #2]
 8003b44:	70c1      	strb	r1, [r0, #3]
 8003b46:	1d03      	adds	r3, r0, #4
 8003b48:	e7f1      	b.n	8003b2e <__exponent+0x58>
	...

08003b4c <_printf_float>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	b08d      	sub	sp, #52	@ 0x34
 8003b52:	460c      	mov	r4, r1
 8003b54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003b58:	4616      	mov	r6, r2
 8003b5a:	461f      	mov	r7, r3
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	f000 fcdb 	bl	8004518 <_localeconv_r>
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	9304      	str	r3, [sp, #16]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fba2 	bl	80002b0 <strlen>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b70:	f8d8 3000 	ldr.w	r3, [r8]
 8003b74:	9005      	str	r0, [sp, #20]
 8003b76:	3307      	adds	r3, #7
 8003b78:	f023 0307 	bic.w	r3, r3, #7
 8003b7c:	f103 0208 	add.w	r2, r3, #8
 8003b80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b84:	f8d4 b000 	ldr.w	fp, [r4]
 8003b88:	f8c8 2000 	str.w	r2, [r8]
 8003b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b94:	9307      	str	r3, [sp, #28]
 8003b96:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ba2:	4b9c      	ldr	r3, [pc, #624]	@ (8003e14 <_printf_float+0x2c8>)
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	f7fc ffe0 	bl	8000b6c <__aeabi_dcmpun>
 8003bac:	bb70      	cbnz	r0, 8003c0c <_printf_float+0xc0>
 8003bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bb2:	4b98      	ldr	r3, [pc, #608]	@ (8003e14 <_printf_float+0x2c8>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	f7fc ffba 	bl	8000b30 <__aeabi_dcmple>
 8003bbc:	bb30      	cbnz	r0, 8003c0c <_printf_float+0xc0>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	f7fc ffa9 	bl	8000b1c <__aeabi_dcmplt>
 8003bca:	b110      	cbz	r0, 8003bd2 <_printf_float+0x86>
 8003bcc:	232d      	movs	r3, #45	@ 0x2d
 8003bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bd2:	4a91      	ldr	r2, [pc, #580]	@ (8003e18 <_printf_float+0x2cc>)
 8003bd4:	4b91      	ldr	r3, [pc, #580]	@ (8003e1c <_printf_float+0x2d0>)
 8003bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003bda:	bf94      	ite	ls
 8003bdc:	4690      	movls	r8, r2
 8003bde:	4698      	movhi	r8, r3
 8003be0:	2303      	movs	r3, #3
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	f02b 0304 	bic.w	r3, fp, #4
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	f04f 0900 	mov.w	r9, #0
 8003bee:	9700      	str	r7, [sp, #0]
 8003bf0:	4633      	mov	r3, r6
 8003bf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 f9d2 	bl	8003fa0 <_printf_common>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	f040 808d 	bne.w	8003d1c <_printf_float+0x1d0>
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295
 8003c06:	b00d      	add	sp, #52	@ 0x34
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	4640      	mov	r0, r8
 8003c12:	4649      	mov	r1, r9
 8003c14:	f7fc ffaa 	bl	8000b6c <__aeabi_dcmpun>
 8003c18:	b140      	cbz	r0, 8003c2c <_printf_float+0xe0>
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bfbc      	itt	lt
 8003c20:	232d      	movlt	r3, #45	@ 0x2d
 8003c22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c26:	4a7e      	ldr	r2, [pc, #504]	@ (8003e20 <_printf_float+0x2d4>)
 8003c28:	4b7e      	ldr	r3, [pc, #504]	@ (8003e24 <_printf_float+0x2d8>)
 8003c2a:	e7d4      	b.n	8003bd6 <_printf_float+0x8a>
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003c32:	9206      	str	r2, [sp, #24]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	d13b      	bne.n	8003cb0 <_printf_float+0x164>
 8003c38:	2306      	movs	r3, #6
 8003c3a:	6063      	str	r3, [r4, #4]
 8003c3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003c40:	2300      	movs	r3, #0
 8003c42:	6022      	str	r2, [r4, #0]
 8003c44:	9303      	str	r3, [sp, #12]
 8003c46:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003c4c:	ab09      	add	r3, sp, #36	@ 0x24
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	6861      	ldr	r1, [r4, #4]
 8003c52:	ec49 8b10 	vmov	d0, r8, r9
 8003c56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7ff fed6 	bl	8003a0c <__cvt>
 8003c60:	9b06      	ldr	r3, [sp, #24]
 8003c62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003c64:	2b47      	cmp	r3, #71	@ 0x47
 8003c66:	4680      	mov	r8, r0
 8003c68:	d129      	bne.n	8003cbe <_printf_float+0x172>
 8003c6a:	1cc8      	adds	r0, r1, #3
 8003c6c:	db02      	blt.n	8003c74 <_printf_float+0x128>
 8003c6e:	6863      	ldr	r3, [r4, #4]
 8003c70:	4299      	cmp	r1, r3
 8003c72:	dd41      	ble.n	8003cf8 <_printf_float+0x1ac>
 8003c74:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c78:	fa5f fa8a 	uxtb.w	sl, sl
 8003c7c:	3901      	subs	r1, #1
 8003c7e:	4652      	mov	r2, sl
 8003c80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c84:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c86:	f7ff ff26 	bl	8003ad6 <__exponent>
 8003c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c8c:	1813      	adds	r3, r2, r0
 8003c8e:	2a01      	cmp	r2, #1
 8003c90:	4681      	mov	r9, r0
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	dc02      	bgt.n	8003c9c <_printf_float+0x150>
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	07d2      	lsls	r2, r2, #31
 8003c9a:	d501      	bpl.n	8003ca0 <_printf_float+0x154>
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	6123      	str	r3, [r4, #16]
 8003ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0a2      	beq.n	8003bee <_printf_float+0xa2>
 8003ca8:	232d      	movs	r3, #45	@ 0x2d
 8003caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cae:	e79e      	b.n	8003bee <_printf_float+0xa2>
 8003cb0:	9a06      	ldr	r2, [sp, #24]
 8003cb2:	2a47      	cmp	r2, #71	@ 0x47
 8003cb4:	d1c2      	bne.n	8003c3c <_printf_float+0xf0>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1c0      	bne.n	8003c3c <_printf_float+0xf0>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e7bd      	b.n	8003c3a <_printf_float+0xee>
 8003cbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cc2:	d9db      	bls.n	8003c7c <_printf_float+0x130>
 8003cc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003cc8:	d118      	bne.n	8003cfc <_printf_float+0x1b0>
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	dd0b      	ble.n	8003ce8 <_printf_float+0x19c>
 8003cd0:	6121      	str	r1, [r4, #16]
 8003cd2:	b913      	cbnz	r3, 8003cda <_printf_float+0x18e>
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	07d0      	lsls	r0, r2, #31
 8003cd8:	d502      	bpl.n	8003ce0 <_printf_float+0x194>
 8003cda:	3301      	adds	r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003ce2:	f04f 0900 	mov.w	r9, #0
 8003ce6:	e7db      	b.n	8003ca0 <_printf_float+0x154>
 8003ce8:	b913      	cbnz	r3, 8003cf0 <_printf_float+0x1a4>
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	07d2      	lsls	r2, r2, #31
 8003cee:	d501      	bpl.n	8003cf4 <_printf_float+0x1a8>
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	e7f4      	b.n	8003cde <_printf_float+0x192>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e7f2      	b.n	8003cde <_printf_float+0x192>
 8003cf8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	db05      	blt.n	8003d0e <_printf_float+0x1c2>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	6121      	str	r1, [r4, #16]
 8003d06:	07d8      	lsls	r0, r3, #31
 8003d08:	d5ea      	bpl.n	8003ce0 <_printf_float+0x194>
 8003d0a:	1c4b      	adds	r3, r1, #1
 8003d0c:	e7e7      	b.n	8003cde <_printf_float+0x192>
 8003d0e:	2900      	cmp	r1, #0
 8003d10:	bfd4      	ite	le
 8003d12:	f1c1 0202 	rsble	r2, r1, #2
 8003d16:	2201      	movgt	r2, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	e7e0      	b.n	8003cde <_printf_float+0x192>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	055a      	lsls	r2, r3, #21
 8003d20:	d407      	bmi.n	8003d32 <_printf_float+0x1e6>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	4642      	mov	r2, r8
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d12b      	bne.n	8003d88 <_printf_float+0x23c>
 8003d30:	e767      	b.n	8003c02 <_printf_float+0xb6>
 8003d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d36:	f240 80dd 	bls.w	8003ef4 <_printf_float+0x3a8>
 8003d3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2300      	movs	r3, #0
 8003d42:	f7fc fee1 	bl	8000b08 <__aeabi_dcmpeq>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d033      	beq.n	8003db2 <_printf_float+0x266>
 8003d4a:	4a37      	ldr	r2, [pc, #220]	@ (8003e28 <_printf_float+0x2dc>)
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4628      	mov	r0, r5
 8003d52:	47b8      	blx	r7
 8003d54:	3001      	adds	r0, #1
 8003d56:	f43f af54 	beq.w	8003c02 <_printf_float+0xb6>
 8003d5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003d5e:	4543      	cmp	r3, r8
 8003d60:	db02      	blt.n	8003d68 <_printf_float+0x21c>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	07d8      	lsls	r0, r3, #31
 8003d66:	d50f      	bpl.n	8003d88 <_printf_float+0x23c>
 8003d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4628      	mov	r0, r5
 8003d70:	47b8      	blx	r7
 8003d72:	3001      	adds	r0, #1
 8003d74:	f43f af45 	beq.w	8003c02 <_printf_float+0xb6>
 8003d78:	f04f 0900 	mov.w	r9, #0
 8003d7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d80:	f104 0a1a 	add.w	sl, r4, #26
 8003d84:	45c8      	cmp	r8, r9
 8003d86:	dc09      	bgt.n	8003d9c <_printf_float+0x250>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	f100 8103 	bmi.w	8003f96 <_printf_float+0x44a>
 8003d90:	68e0      	ldr	r0, [r4, #12]
 8003d92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d94:	4298      	cmp	r0, r3
 8003d96:	bfb8      	it	lt
 8003d98:	4618      	movlt	r0, r3
 8003d9a:	e734      	b.n	8003c06 <_printf_float+0xba>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	4652      	mov	r2, sl
 8003da0:	4631      	mov	r1, r6
 8003da2:	4628      	mov	r0, r5
 8003da4:	47b8      	blx	r7
 8003da6:	3001      	adds	r0, #1
 8003da8:	f43f af2b 	beq.w	8003c02 <_printf_float+0xb6>
 8003dac:	f109 0901 	add.w	r9, r9, #1
 8003db0:	e7e8      	b.n	8003d84 <_printf_float+0x238>
 8003db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	dc39      	bgt.n	8003e2c <_printf_float+0x2e0>
 8003db8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e28 <_printf_float+0x2dc>)
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	47b8      	blx	r7
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	f43f af1d 	beq.w	8003c02 <_printf_float+0xb6>
 8003dc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003dcc:	ea59 0303 	orrs.w	r3, r9, r3
 8003dd0:	d102      	bne.n	8003dd8 <_printf_float+0x28c>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	07d9      	lsls	r1, r3, #31
 8003dd6:	d5d7      	bpl.n	8003d88 <_printf_float+0x23c>
 8003dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ddc:	4631      	mov	r1, r6
 8003dde:	4628      	mov	r0, r5
 8003de0:	47b8      	blx	r7
 8003de2:	3001      	adds	r0, #1
 8003de4:	f43f af0d 	beq.w	8003c02 <_printf_float+0xb6>
 8003de8:	f04f 0a00 	mov.w	sl, #0
 8003dec:	f104 0b1a 	add.w	fp, r4, #26
 8003df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df2:	425b      	negs	r3, r3
 8003df4:	4553      	cmp	r3, sl
 8003df6:	dc01      	bgt.n	8003dfc <_printf_float+0x2b0>
 8003df8:	464b      	mov	r3, r9
 8003dfa:	e793      	b.n	8003d24 <_printf_float+0x1d8>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	465a      	mov	r2, fp
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f aefb 	beq.w	8003c02 <_printf_float+0xb6>
 8003e0c:	f10a 0a01 	add.w	sl, sl, #1
 8003e10:	e7ee      	b.n	8003df0 <_printf_float+0x2a4>
 8003e12:	bf00      	nop
 8003e14:	7fefffff 	.word	0x7fefffff
 8003e18:	080066f8 	.word	0x080066f8
 8003e1c:	080066fc 	.word	0x080066fc
 8003e20:	08006700 	.word	0x08006700
 8003e24:	08006704 	.word	0x08006704
 8003e28:	08006708 	.word	0x08006708
 8003e2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e32:	4553      	cmp	r3, sl
 8003e34:	bfa8      	it	ge
 8003e36:	4653      	movge	r3, sl
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	dc36      	bgt.n	8003eac <_printf_float+0x360>
 8003e3e:	f04f 0b00 	mov.w	fp, #0
 8003e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e46:	f104 021a 	add.w	r2, r4, #26
 8003e4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e4c:	9306      	str	r3, [sp, #24]
 8003e4e:	eba3 0309 	sub.w	r3, r3, r9
 8003e52:	455b      	cmp	r3, fp
 8003e54:	dc31      	bgt.n	8003eba <_printf_float+0x36e>
 8003e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e58:	459a      	cmp	sl, r3
 8003e5a:	dc3a      	bgt.n	8003ed2 <_printf_float+0x386>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	07da      	lsls	r2, r3, #31
 8003e60:	d437      	bmi.n	8003ed2 <_printf_float+0x386>
 8003e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e64:	ebaa 0903 	sub.w	r9, sl, r3
 8003e68:	9b06      	ldr	r3, [sp, #24]
 8003e6a:	ebaa 0303 	sub.w	r3, sl, r3
 8003e6e:	4599      	cmp	r9, r3
 8003e70:	bfa8      	it	ge
 8003e72:	4699      	movge	r9, r3
 8003e74:	f1b9 0f00 	cmp.w	r9, #0
 8003e78:	dc33      	bgt.n	8003ee2 <_printf_float+0x396>
 8003e7a:	f04f 0800 	mov.w	r8, #0
 8003e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e82:	f104 0b1a 	add.w	fp, r4, #26
 8003e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e88:	ebaa 0303 	sub.w	r3, sl, r3
 8003e8c:	eba3 0309 	sub.w	r3, r3, r9
 8003e90:	4543      	cmp	r3, r8
 8003e92:	f77f af79 	ble.w	8003d88 <_printf_float+0x23c>
 8003e96:	2301      	movs	r3, #1
 8003e98:	465a      	mov	r2, fp
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f aeae 	beq.w	8003c02 <_printf_float+0xb6>
 8003ea6:	f108 0801 	add.w	r8, r8, #1
 8003eaa:	e7ec      	b.n	8003e86 <_printf_float+0x33a>
 8003eac:	4642      	mov	r2, r8
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d1c2      	bne.n	8003e3e <_printf_float+0x2f2>
 8003eb8:	e6a3      	b.n	8003c02 <_printf_float+0xb6>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	9206      	str	r2, [sp, #24]
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f ae9c 	beq.w	8003c02 <_printf_float+0xb6>
 8003eca:	9a06      	ldr	r2, [sp, #24]
 8003ecc:	f10b 0b01 	add.w	fp, fp, #1
 8003ed0:	e7bb      	b.n	8003e4a <_printf_float+0x2fe>
 8003ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	d1c0      	bne.n	8003e62 <_printf_float+0x316>
 8003ee0:	e68f      	b.n	8003c02 <_printf_float+0xb6>
 8003ee2:	9a06      	ldr	r2, [sp, #24]
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	4442      	add	r2, r8
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b8      	blx	r7
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d1c3      	bne.n	8003e7a <_printf_float+0x32e>
 8003ef2:	e686      	b.n	8003c02 <_printf_float+0xb6>
 8003ef4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ef8:	f1ba 0f01 	cmp.w	sl, #1
 8003efc:	dc01      	bgt.n	8003f02 <_printf_float+0x3b6>
 8003efe:	07db      	lsls	r3, r3, #31
 8003f00:	d536      	bpl.n	8003f70 <_printf_float+0x424>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4642      	mov	r2, r8
 8003f06:	4631      	mov	r1, r6
 8003f08:	4628      	mov	r0, r5
 8003f0a:	47b8      	blx	r7
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	f43f ae78 	beq.w	8003c02 <_printf_float+0xb6>
 8003f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f16:	4631      	mov	r1, r6
 8003f18:	4628      	mov	r0, r5
 8003f1a:	47b8      	blx	r7
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	f43f ae70 	beq.w	8003c02 <_printf_float+0xb6>
 8003f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f26:	2200      	movs	r2, #0
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f2e:	f7fc fdeb 	bl	8000b08 <__aeabi_dcmpeq>
 8003f32:	b9c0      	cbnz	r0, 8003f66 <_printf_float+0x41a>
 8003f34:	4653      	mov	r3, sl
 8003f36:	f108 0201 	add.w	r2, r8, #1
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	47b8      	blx	r7
 8003f40:	3001      	adds	r0, #1
 8003f42:	d10c      	bne.n	8003f5e <_printf_float+0x412>
 8003f44:	e65d      	b.n	8003c02 <_printf_float+0xb6>
 8003f46:	2301      	movs	r3, #1
 8003f48:	465a      	mov	r2, fp
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b8      	blx	r7
 8003f50:	3001      	adds	r0, #1
 8003f52:	f43f ae56 	beq.w	8003c02 <_printf_float+0xb6>
 8003f56:	f108 0801 	add.w	r8, r8, #1
 8003f5a:	45d0      	cmp	r8, sl
 8003f5c:	dbf3      	blt.n	8003f46 <_printf_float+0x3fa>
 8003f5e:	464b      	mov	r3, r9
 8003f60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f64:	e6df      	b.n	8003d26 <_printf_float+0x1da>
 8003f66:	f04f 0800 	mov.w	r8, #0
 8003f6a:	f104 0b1a 	add.w	fp, r4, #26
 8003f6e:	e7f4      	b.n	8003f5a <_printf_float+0x40e>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4642      	mov	r2, r8
 8003f74:	e7e1      	b.n	8003f3a <_printf_float+0x3ee>
 8003f76:	2301      	movs	r3, #1
 8003f78:	464a      	mov	r2, r9
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f ae3e 	beq.w	8003c02 <_printf_float+0xb6>
 8003f86:	f108 0801 	add.w	r8, r8, #1
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f8e:	1a5b      	subs	r3, r3, r1
 8003f90:	4543      	cmp	r3, r8
 8003f92:	dcf0      	bgt.n	8003f76 <_printf_float+0x42a>
 8003f94:	e6fc      	b.n	8003d90 <_printf_float+0x244>
 8003f96:	f04f 0800 	mov.w	r8, #0
 8003f9a:	f104 0919 	add.w	r9, r4, #25
 8003f9e:	e7f4      	b.n	8003f8a <_printf_float+0x43e>

08003fa0 <_printf_common>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	4698      	mov	r8, r3
 8003fa8:	688a      	ldr	r2, [r1, #8]
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	bfb8      	it	lt
 8003fb4:	4613      	movlt	r3, r2
 8003fb6:	6033      	str	r3, [r6, #0]
 8003fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	b10a      	cbz	r2, 8003fc6 <_printf_common+0x26>
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	6833      	ldrmi	r3, [r6, #0]
 8003fce:	3302      	addmi	r3, #2
 8003fd0:	6033      	strmi	r3, [r6, #0]
 8003fd2:	6825      	ldr	r5, [r4, #0]
 8003fd4:	f015 0506 	ands.w	r5, r5, #6
 8003fd8:	d106      	bne.n	8003fe8 <_printf_common+0x48>
 8003fda:	f104 0a19 	add.w	sl, r4, #25
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dc26      	bgt.n	8004036 <_printf_common+0x96>
 8003fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fec:	6822      	ldr	r2, [r4, #0]
 8003fee:	3b00      	subs	r3, #0
 8003ff0:	bf18      	it	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	0692      	lsls	r2, r2, #26
 8003ff6:	d42b      	bmi.n	8004050 <_printf_common+0xb0>
 8003ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	4638      	mov	r0, r7
 8004000:	47c8      	blx	r9
 8004002:	3001      	adds	r0, #1
 8004004:	d01e      	beq.n	8004044 <_printf_common+0xa4>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf02      	ittt	eq
 8004012:	68e5      	ldreq	r5, [r4, #12]
 8004014:	6833      	ldreq	r3, [r6, #0]
 8004016:	1aed      	subeq	r5, r5, r3
 8004018:	68a3      	ldr	r3, [r4, #8]
 800401a:	bf0c      	ite	eq
 800401c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004020:	2500      	movne	r5, #0
 8004022:	4293      	cmp	r3, r2
 8004024:	bfc4      	itt	gt
 8004026:	1a9b      	subgt	r3, r3, r2
 8004028:	18ed      	addgt	r5, r5, r3
 800402a:	2600      	movs	r6, #0
 800402c:	341a      	adds	r4, #26
 800402e:	42b5      	cmp	r5, r6
 8004030:	d11a      	bne.n	8004068 <_printf_common+0xc8>
 8004032:	2000      	movs	r0, #0
 8004034:	e008      	b.n	8004048 <_printf_common+0xa8>
 8004036:	2301      	movs	r3, #1
 8004038:	4652      	mov	r2, sl
 800403a:	4641      	mov	r1, r8
 800403c:	4638      	mov	r0, r7
 800403e:	47c8      	blx	r9
 8004040:	3001      	adds	r0, #1
 8004042:	d103      	bne.n	800404c <_printf_common+0xac>
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404c:	3501      	adds	r5, #1
 800404e:	e7c6      	b.n	8003fde <_printf_common+0x3e>
 8004050:	18e1      	adds	r1, r4, r3
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	2030      	movs	r0, #48	@ 0x30
 8004056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800405a:	4422      	add	r2, r4
 800405c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004064:	3302      	adds	r3, #2
 8004066:	e7c7      	b.n	8003ff8 <_printf_common+0x58>
 8004068:	2301      	movs	r3, #1
 800406a:	4622      	mov	r2, r4
 800406c:	4641      	mov	r1, r8
 800406e:	4638      	mov	r0, r7
 8004070:	47c8      	blx	r9
 8004072:	3001      	adds	r0, #1
 8004074:	d0e6      	beq.n	8004044 <_printf_common+0xa4>
 8004076:	3601      	adds	r6, #1
 8004078:	e7d9      	b.n	800402e <_printf_common+0x8e>
	...

0800407c <_printf_i>:
 800407c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	7e0f      	ldrb	r7, [r1, #24]
 8004082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004084:	2f78      	cmp	r7, #120	@ 0x78
 8004086:	4691      	mov	r9, r2
 8004088:	4680      	mov	r8, r0
 800408a:	460c      	mov	r4, r1
 800408c:	469a      	mov	sl, r3
 800408e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004092:	d807      	bhi.n	80040a4 <_printf_i+0x28>
 8004094:	2f62      	cmp	r7, #98	@ 0x62
 8004096:	d80a      	bhi.n	80040ae <_printf_i+0x32>
 8004098:	2f00      	cmp	r7, #0
 800409a:	f000 80d2 	beq.w	8004242 <_printf_i+0x1c6>
 800409e:	2f58      	cmp	r7, #88	@ 0x58
 80040a0:	f000 80b9 	beq.w	8004216 <_printf_i+0x19a>
 80040a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040ac:	e03a      	b.n	8004124 <_printf_i+0xa8>
 80040ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040b2:	2b15      	cmp	r3, #21
 80040b4:	d8f6      	bhi.n	80040a4 <_printf_i+0x28>
 80040b6:	a101      	add	r1, pc, #4	@ (adr r1, 80040bc <_printf_i+0x40>)
 80040b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040bc:	08004115 	.word	0x08004115
 80040c0:	08004129 	.word	0x08004129
 80040c4:	080040a5 	.word	0x080040a5
 80040c8:	080040a5 	.word	0x080040a5
 80040cc:	080040a5 	.word	0x080040a5
 80040d0:	080040a5 	.word	0x080040a5
 80040d4:	08004129 	.word	0x08004129
 80040d8:	080040a5 	.word	0x080040a5
 80040dc:	080040a5 	.word	0x080040a5
 80040e0:	080040a5 	.word	0x080040a5
 80040e4:	080040a5 	.word	0x080040a5
 80040e8:	08004229 	.word	0x08004229
 80040ec:	08004153 	.word	0x08004153
 80040f0:	080041e3 	.word	0x080041e3
 80040f4:	080040a5 	.word	0x080040a5
 80040f8:	080040a5 	.word	0x080040a5
 80040fc:	0800424b 	.word	0x0800424b
 8004100:	080040a5 	.word	0x080040a5
 8004104:	08004153 	.word	0x08004153
 8004108:	080040a5 	.word	0x080040a5
 800410c:	080040a5 	.word	0x080040a5
 8004110:	080041eb 	.word	0x080041eb
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6032      	str	r2, [r6, #0]
 800411c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004124:	2301      	movs	r3, #1
 8004126:	e09d      	b.n	8004264 <_printf_i+0x1e8>
 8004128:	6833      	ldr	r3, [r6, #0]
 800412a:	6820      	ldr	r0, [r4, #0]
 800412c:	1d19      	adds	r1, r3, #4
 800412e:	6031      	str	r1, [r6, #0]
 8004130:	0606      	lsls	r6, r0, #24
 8004132:	d501      	bpl.n	8004138 <_printf_i+0xbc>
 8004134:	681d      	ldr	r5, [r3, #0]
 8004136:	e003      	b.n	8004140 <_printf_i+0xc4>
 8004138:	0645      	lsls	r5, r0, #25
 800413a:	d5fb      	bpl.n	8004134 <_printf_i+0xb8>
 800413c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004140:	2d00      	cmp	r5, #0
 8004142:	da03      	bge.n	800414c <_printf_i+0xd0>
 8004144:	232d      	movs	r3, #45	@ 0x2d
 8004146:	426d      	negs	r5, r5
 8004148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800414c:	4859      	ldr	r0, [pc, #356]	@ (80042b4 <_printf_i+0x238>)
 800414e:	230a      	movs	r3, #10
 8004150:	e011      	b.n	8004176 <_printf_i+0xfa>
 8004152:	6821      	ldr	r1, [r4, #0]
 8004154:	6833      	ldr	r3, [r6, #0]
 8004156:	0608      	lsls	r0, r1, #24
 8004158:	f853 5b04 	ldr.w	r5, [r3], #4
 800415c:	d402      	bmi.n	8004164 <_printf_i+0xe8>
 800415e:	0649      	lsls	r1, r1, #25
 8004160:	bf48      	it	mi
 8004162:	b2ad      	uxthmi	r5, r5
 8004164:	2f6f      	cmp	r7, #111	@ 0x6f
 8004166:	4853      	ldr	r0, [pc, #332]	@ (80042b4 <_printf_i+0x238>)
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	bf14      	ite	ne
 800416c:	230a      	movne	r3, #10
 800416e:	2308      	moveq	r3, #8
 8004170:	2100      	movs	r1, #0
 8004172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004176:	6866      	ldr	r6, [r4, #4]
 8004178:	60a6      	str	r6, [r4, #8]
 800417a:	2e00      	cmp	r6, #0
 800417c:	bfa2      	ittt	ge
 800417e:	6821      	ldrge	r1, [r4, #0]
 8004180:	f021 0104 	bicge.w	r1, r1, #4
 8004184:	6021      	strge	r1, [r4, #0]
 8004186:	b90d      	cbnz	r5, 800418c <_printf_i+0x110>
 8004188:	2e00      	cmp	r6, #0
 800418a:	d04b      	beq.n	8004224 <_printf_i+0x1a8>
 800418c:	4616      	mov	r6, r2
 800418e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004192:	fb03 5711 	mls	r7, r3, r1, r5
 8004196:	5dc7      	ldrb	r7, [r0, r7]
 8004198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800419c:	462f      	mov	r7, r5
 800419e:	42bb      	cmp	r3, r7
 80041a0:	460d      	mov	r5, r1
 80041a2:	d9f4      	bls.n	800418e <_printf_i+0x112>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10b      	bne.n	80041c0 <_printf_i+0x144>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	07df      	lsls	r7, r3, #31
 80041ac:	d508      	bpl.n	80041c0 <_printf_i+0x144>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	6861      	ldr	r1, [r4, #4]
 80041b2:	4299      	cmp	r1, r3
 80041b4:	bfde      	ittt	le
 80041b6:	2330      	movle	r3, #48	@ 0x30
 80041b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041c0:	1b92      	subs	r2, r2, r6
 80041c2:	6122      	str	r2, [r4, #16]
 80041c4:	f8cd a000 	str.w	sl, [sp]
 80041c8:	464b      	mov	r3, r9
 80041ca:	aa03      	add	r2, sp, #12
 80041cc:	4621      	mov	r1, r4
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7ff fee6 	bl	8003fa0 <_printf_common>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d14a      	bne.n	800426e <_printf_i+0x1f2>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	b004      	add	sp, #16
 80041de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	4833      	ldr	r0, [pc, #204]	@ (80042b8 <_printf_i+0x23c>)
 80041ec:	2778      	movs	r7, #120	@ 0x78
 80041ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	6831      	ldr	r1, [r6, #0]
 80041f6:	061f      	lsls	r7, r3, #24
 80041f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80041fc:	d402      	bmi.n	8004204 <_printf_i+0x188>
 80041fe:	065f      	lsls	r7, r3, #25
 8004200:	bf48      	it	mi
 8004202:	b2ad      	uxthmi	r5, r5
 8004204:	6031      	str	r1, [r6, #0]
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	bf44      	itt	mi
 800420a:	f043 0320 	orrmi.w	r3, r3, #32
 800420e:	6023      	strmi	r3, [r4, #0]
 8004210:	b11d      	cbz	r5, 800421a <_printf_i+0x19e>
 8004212:	2310      	movs	r3, #16
 8004214:	e7ac      	b.n	8004170 <_printf_i+0xf4>
 8004216:	4827      	ldr	r0, [pc, #156]	@ (80042b4 <_printf_i+0x238>)
 8004218:	e7e9      	b.n	80041ee <_printf_i+0x172>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f023 0320 	bic.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	e7f6      	b.n	8004212 <_printf_i+0x196>
 8004224:	4616      	mov	r6, r2
 8004226:	e7bd      	b.n	80041a4 <_printf_i+0x128>
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	6825      	ldr	r5, [r4, #0]
 800422c:	6961      	ldr	r1, [r4, #20]
 800422e:	1d18      	adds	r0, r3, #4
 8004230:	6030      	str	r0, [r6, #0]
 8004232:	062e      	lsls	r6, r5, #24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	d501      	bpl.n	800423c <_printf_i+0x1c0>
 8004238:	6019      	str	r1, [r3, #0]
 800423a:	e002      	b.n	8004242 <_printf_i+0x1c6>
 800423c:	0668      	lsls	r0, r5, #25
 800423e:	d5fb      	bpl.n	8004238 <_printf_i+0x1bc>
 8004240:	8019      	strh	r1, [r3, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	4616      	mov	r6, r2
 8004248:	e7bc      	b.n	80041c4 <_printf_i+0x148>
 800424a:	6833      	ldr	r3, [r6, #0]
 800424c:	1d1a      	adds	r2, r3, #4
 800424e:	6032      	str	r2, [r6, #0]
 8004250:	681e      	ldr	r6, [r3, #0]
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	2100      	movs	r1, #0
 8004256:	4630      	mov	r0, r6
 8004258:	f7fb ffda 	bl	8000210 <memchr>
 800425c:	b108      	cbz	r0, 8004262 <_printf_i+0x1e6>
 800425e:	1b80      	subs	r0, r0, r6
 8004260:	6060      	str	r0, [r4, #4]
 8004262:	6863      	ldr	r3, [r4, #4]
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	2300      	movs	r3, #0
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800426c:	e7aa      	b.n	80041c4 <_printf_i+0x148>
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	4632      	mov	r2, r6
 8004272:	4649      	mov	r1, r9
 8004274:	4640      	mov	r0, r8
 8004276:	47d0      	blx	sl
 8004278:	3001      	adds	r0, #1
 800427a:	d0ad      	beq.n	80041d8 <_printf_i+0x15c>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	079b      	lsls	r3, r3, #30
 8004280:	d413      	bmi.n	80042aa <_printf_i+0x22e>
 8004282:	68e0      	ldr	r0, [r4, #12]
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	4298      	cmp	r0, r3
 8004288:	bfb8      	it	lt
 800428a:	4618      	movlt	r0, r3
 800428c:	e7a6      	b.n	80041dc <_printf_i+0x160>
 800428e:	2301      	movs	r3, #1
 8004290:	4632      	mov	r2, r6
 8004292:	4649      	mov	r1, r9
 8004294:	4640      	mov	r0, r8
 8004296:	47d0      	blx	sl
 8004298:	3001      	adds	r0, #1
 800429a:	d09d      	beq.n	80041d8 <_printf_i+0x15c>
 800429c:	3501      	adds	r5, #1
 800429e:	68e3      	ldr	r3, [r4, #12]
 80042a0:	9903      	ldr	r1, [sp, #12]
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	42ab      	cmp	r3, r5
 80042a6:	dcf2      	bgt.n	800428e <_printf_i+0x212>
 80042a8:	e7eb      	b.n	8004282 <_printf_i+0x206>
 80042aa:	2500      	movs	r5, #0
 80042ac:	f104 0619 	add.w	r6, r4, #25
 80042b0:	e7f5      	b.n	800429e <_printf_i+0x222>
 80042b2:	bf00      	nop
 80042b4:	0800670a 	.word	0x0800670a
 80042b8:	0800671b 	.word	0x0800671b

080042bc <std>:
 80042bc:	2300      	movs	r3, #0
 80042be:	b510      	push	{r4, lr}
 80042c0:	4604      	mov	r4, r0
 80042c2:	e9c0 3300 	strd	r3, r3, [r0]
 80042c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ca:	6083      	str	r3, [r0, #8]
 80042cc:	8181      	strh	r1, [r0, #12]
 80042ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d0:	81c2      	strh	r2, [r0, #14]
 80042d2:	6183      	str	r3, [r0, #24]
 80042d4:	4619      	mov	r1, r3
 80042d6:	2208      	movs	r2, #8
 80042d8:	305c      	adds	r0, #92	@ 0x5c
 80042da:	f000 f914 	bl	8004506 <memset>
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x58>)
 80042e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x5c>)
 80042e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x60>)
 80042e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x64>)
 80042ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x68>)
 80042f0:	6224      	str	r4, [r4, #32]
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d006      	beq.n	8004304 <std+0x48>
 80042f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042fa:	4294      	cmp	r4, r2
 80042fc:	d002      	beq.n	8004304 <std+0x48>
 80042fe:	33d0      	adds	r3, #208	@ 0xd0
 8004300:	429c      	cmp	r4, r3
 8004302:	d105      	bne.n	8004310 <std+0x54>
 8004304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	f000 b978 	b.w	8004600 <__retarget_lock_init_recursive>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	bf00      	nop
 8004314:	08004481 	.word	0x08004481
 8004318:	080044a3 	.word	0x080044a3
 800431c:	080044db 	.word	0x080044db
 8004320:	080044ff 	.word	0x080044ff
 8004324:	200002ac 	.word	0x200002ac

08004328 <stdio_exit_handler>:
 8004328:	4a02      	ldr	r2, [pc, #8]	@ (8004334 <stdio_exit_handler+0xc>)
 800432a:	4903      	ldr	r1, [pc, #12]	@ (8004338 <stdio_exit_handler+0x10>)
 800432c:	4803      	ldr	r0, [pc, #12]	@ (800433c <stdio_exit_handler+0x14>)
 800432e:	f000 b869 	b.w	8004404 <_fwalk_sglue>
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
 8004338:	08005f5d 	.word	0x08005f5d
 800433c:	2000001c 	.word	0x2000001c

08004340 <cleanup_stdio>:
 8004340:	6841      	ldr	r1, [r0, #4]
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <cleanup_stdio+0x34>)
 8004344:	4299      	cmp	r1, r3
 8004346:	b510      	push	{r4, lr}
 8004348:	4604      	mov	r4, r0
 800434a:	d001      	beq.n	8004350 <cleanup_stdio+0x10>
 800434c:	f001 fe06 	bl	8005f5c <_fflush_r>
 8004350:	68a1      	ldr	r1, [r4, #8]
 8004352:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <cleanup_stdio+0x38>)
 8004354:	4299      	cmp	r1, r3
 8004356:	d002      	beq.n	800435e <cleanup_stdio+0x1e>
 8004358:	4620      	mov	r0, r4
 800435a:	f001 fdff 	bl	8005f5c <_fflush_r>
 800435e:	68e1      	ldr	r1, [r4, #12]
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <cleanup_stdio+0x3c>)
 8004362:	4299      	cmp	r1, r3
 8004364:	d004      	beq.n	8004370 <cleanup_stdio+0x30>
 8004366:	4620      	mov	r0, r4
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f001 bdf6 	b.w	8005f5c <_fflush_r>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	200002ac 	.word	0x200002ac
 8004378:	20000314 	.word	0x20000314
 800437c:	2000037c 	.word	0x2000037c

08004380 <global_stdio_init.part.0>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <global_stdio_init.part.0+0x30>)
 8004384:	4c0b      	ldr	r4, [pc, #44]	@ (80043b4 <global_stdio_init.part.0+0x34>)
 8004386:	4a0c      	ldr	r2, [pc, #48]	@ (80043b8 <global_stdio_init.part.0+0x38>)
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	4620      	mov	r0, r4
 800438c:	2200      	movs	r2, #0
 800438e:	2104      	movs	r1, #4
 8004390:	f7ff ff94 	bl	80042bc <std>
 8004394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004398:	2201      	movs	r2, #1
 800439a:	2109      	movs	r1, #9
 800439c:	f7ff ff8e 	bl	80042bc <std>
 80043a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043a4:	2202      	movs	r2, #2
 80043a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043aa:	2112      	movs	r1, #18
 80043ac:	f7ff bf86 	b.w	80042bc <std>
 80043b0:	200003e4 	.word	0x200003e4
 80043b4:	200002ac 	.word	0x200002ac
 80043b8:	08004329 	.word	0x08004329

080043bc <__sfp_lock_acquire>:
 80043bc:	4801      	ldr	r0, [pc, #4]	@ (80043c4 <__sfp_lock_acquire+0x8>)
 80043be:	f000 b920 	b.w	8004602 <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	200003ed 	.word	0x200003ed

080043c8 <__sfp_lock_release>:
 80043c8:	4801      	ldr	r0, [pc, #4]	@ (80043d0 <__sfp_lock_release+0x8>)
 80043ca:	f000 b91b 	b.w	8004604 <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	200003ed 	.word	0x200003ed

080043d4 <__sinit>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	f7ff fff0 	bl	80043bc <__sfp_lock_acquire>
 80043dc:	6a23      	ldr	r3, [r4, #32]
 80043de:	b11b      	cbz	r3, 80043e8 <__sinit+0x14>
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e4:	f7ff bff0 	b.w	80043c8 <__sfp_lock_release>
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <__sinit+0x28>)
 80043ea:	6223      	str	r3, [r4, #32]
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <__sinit+0x2c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f5      	bne.n	80043e0 <__sinit+0xc>
 80043f4:	f7ff ffc4 	bl	8004380 <global_stdio_init.part.0>
 80043f8:	e7f2      	b.n	80043e0 <__sinit+0xc>
 80043fa:	bf00      	nop
 80043fc:	08004341 	.word	0x08004341
 8004400:	200003e4 	.word	0x200003e4

08004404 <_fwalk_sglue>:
 8004404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004408:	4607      	mov	r7, r0
 800440a:	4688      	mov	r8, r1
 800440c:	4614      	mov	r4, r2
 800440e:	2600      	movs	r6, #0
 8004410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004414:	f1b9 0901 	subs.w	r9, r9, #1
 8004418:	d505      	bpl.n	8004426 <_fwalk_sglue+0x22>
 800441a:	6824      	ldr	r4, [r4, #0]
 800441c:	2c00      	cmp	r4, #0
 800441e:	d1f7      	bne.n	8004410 <_fwalk_sglue+0xc>
 8004420:	4630      	mov	r0, r6
 8004422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004426:	89ab      	ldrh	r3, [r5, #12]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d907      	bls.n	800443c <_fwalk_sglue+0x38>
 800442c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004430:	3301      	adds	r3, #1
 8004432:	d003      	beq.n	800443c <_fwalk_sglue+0x38>
 8004434:	4629      	mov	r1, r5
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	4306      	orrs	r6, r0
 800443c:	3568      	adds	r5, #104	@ 0x68
 800443e:	e7e9      	b.n	8004414 <_fwalk_sglue+0x10>

08004440 <siprintf>:
 8004440:	b40e      	push	{r1, r2, r3}
 8004442:	b500      	push	{lr}
 8004444:	b09c      	sub	sp, #112	@ 0x70
 8004446:	ab1d      	add	r3, sp, #116	@ 0x74
 8004448:	9002      	str	r0, [sp, #8]
 800444a:	9006      	str	r0, [sp, #24]
 800444c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004450:	4809      	ldr	r0, [pc, #36]	@ (8004478 <siprintf+0x38>)
 8004452:	9107      	str	r1, [sp, #28]
 8004454:	9104      	str	r1, [sp, #16]
 8004456:	4909      	ldr	r1, [pc, #36]	@ (800447c <siprintf+0x3c>)
 8004458:	f853 2b04 	ldr.w	r2, [r3], #4
 800445c:	9105      	str	r1, [sp, #20]
 800445e:	6800      	ldr	r0, [r0, #0]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	a902      	add	r1, sp, #8
 8004464:	f001 fbfa 	bl	8005c5c <_svfiprintf_r>
 8004468:	9b02      	ldr	r3, [sp, #8]
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	b01c      	add	sp, #112	@ 0x70
 8004470:	f85d eb04 	ldr.w	lr, [sp], #4
 8004474:	b003      	add	sp, #12
 8004476:	4770      	bx	lr
 8004478:	20000018 	.word	0x20000018
 800447c:	ffff0208 	.word	0xffff0208

08004480 <__sread>:
 8004480:	b510      	push	{r4, lr}
 8004482:	460c      	mov	r4, r1
 8004484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004488:	f000 f86c 	bl	8004564 <_read_r>
 800448c:	2800      	cmp	r0, #0
 800448e:	bfab      	itete	ge
 8004490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004492:	89a3      	ldrhlt	r3, [r4, #12]
 8004494:	181b      	addge	r3, r3, r0
 8004496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800449a:	bfac      	ite	ge
 800449c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800449e:	81a3      	strhlt	r3, [r4, #12]
 80044a0:	bd10      	pop	{r4, pc}

080044a2 <__swrite>:
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	461f      	mov	r7, r3
 80044a8:	898b      	ldrh	r3, [r1, #12]
 80044aa:	05db      	lsls	r3, r3, #23
 80044ac:	4605      	mov	r5, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	4616      	mov	r6, r2
 80044b2:	d505      	bpl.n	80044c0 <__swrite+0x1e>
 80044b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b8:	2302      	movs	r3, #2
 80044ba:	2200      	movs	r2, #0
 80044bc:	f000 f840 	bl	8004540 <_lseek_r>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	4632      	mov	r2, r6
 80044ce:	463b      	mov	r3, r7
 80044d0:	4628      	mov	r0, r5
 80044d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d6:	f000 b857 	b.w	8004588 <_write_r>

080044da <__sseek>:
 80044da:	b510      	push	{r4, lr}
 80044dc:	460c      	mov	r4, r1
 80044de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e2:	f000 f82d 	bl	8004540 <_lseek_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	bf15      	itete	ne
 80044ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044f6:	81a3      	strheq	r3, [r4, #12]
 80044f8:	bf18      	it	ne
 80044fa:	81a3      	strhne	r3, [r4, #12]
 80044fc:	bd10      	pop	{r4, pc}

080044fe <__sclose>:
 80044fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004502:	f000 b80d 	b.w	8004520 <_close_r>

08004506 <memset>:
 8004506:	4402      	add	r2, r0
 8004508:	4603      	mov	r3, r0
 800450a:	4293      	cmp	r3, r2
 800450c:	d100      	bne.n	8004510 <memset+0xa>
 800450e:	4770      	bx	lr
 8004510:	f803 1b01 	strb.w	r1, [r3], #1
 8004514:	e7f9      	b.n	800450a <memset+0x4>
	...

08004518 <_localeconv_r>:
 8004518:	4800      	ldr	r0, [pc, #0]	@ (800451c <_localeconv_r+0x4>)
 800451a:	4770      	bx	lr
 800451c:	20000158 	.word	0x20000158

08004520 <_close_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	@ (800453c <_close_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fd fa33 	bl	8001996 <_close>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_close_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_close_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	200003e8 	.word	0x200003e8

08004540 <_lseek_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d07      	ldr	r5, [pc, #28]	@ (8004560 <_lseek_r+0x20>)
 8004544:	4604      	mov	r4, r0
 8004546:	4608      	mov	r0, r1
 8004548:	4611      	mov	r1, r2
 800454a:	2200      	movs	r2, #0
 800454c:	602a      	str	r2, [r5, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd fa48 	bl	80019e4 <_lseek>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_lseek_r+0x1e>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_lseek_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	200003e8 	.word	0x200003e8

08004564 <_read_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d07      	ldr	r5, [pc, #28]	@ (8004584 <_read_r+0x20>)
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	2200      	movs	r2, #0
 8004570:	602a      	str	r2, [r5, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f7fd f9d6 	bl	8001924 <_read>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_read_r+0x1e>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_read_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200003e8 	.word	0x200003e8

08004588 <_write_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4d07      	ldr	r5, [pc, #28]	@ (80045a8 <_write_r+0x20>)
 800458c:	4604      	mov	r4, r0
 800458e:	4608      	mov	r0, r1
 8004590:	4611      	mov	r1, r2
 8004592:	2200      	movs	r2, #0
 8004594:	602a      	str	r2, [r5, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f7fd f9e1 	bl	800195e <_write>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_write_r+0x1e>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_write_r+0x1e>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200003e8 	.word	0x200003e8

080045ac <__errno>:
 80045ac:	4b01      	ldr	r3, [pc, #4]	@ (80045b4 <__errno+0x8>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000018 	.word	0x20000018

080045b8 <__libc_init_array>:
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	4d0d      	ldr	r5, [pc, #52]	@ (80045f0 <__libc_init_array+0x38>)
 80045bc:	4c0d      	ldr	r4, [pc, #52]	@ (80045f4 <__libc_init_array+0x3c>)
 80045be:	1b64      	subs	r4, r4, r5
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	2600      	movs	r6, #0
 80045c4:	42a6      	cmp	r6, r4
 80045c6:	d109      	bne.n	80045dc <__libc_init_array+0x24>
 80045c8:	4d0b      	ldr	r5, [pc, #44]	@ (80045f8 <__libc_init_array+0x40>)
 80045ca:	4c0c      	ldr	r4, [pc, #48]	@ (80045fc <__libc_init_array+0x44>)
 80045cc:	f002 f864 	bl	8006698 <_init>
 80045d0:	1b64      	subs	r4, r4, r5
 80045d2:	10a4      	asrs	r4, r4, #2
 80045d4:	2600      	movs	r6, #0
 80045d6:	42a6      	cmp	r6, r4
 80045d8:	d105      	bne.n	80045e6 <__libc_init_array+0x2e>
 80045da:	bd70      	pop	{r4, r5, r6, pc}
 80045dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e0:	4798      	blx	r3
 80045e2:	3601      	adds	r6, #1
 80045e4:	e7ee      	b.n	80045c4 <__libc_init_array+0xc>
 80045e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ea:	4798      	blx	r3
 80045ec:	3601      	adds	r6, #1
 80045ee:	e7f2      	b.n	80045d6 <__libc_init_array+0x1e>
 80045f0:	08006a70 	.word	0x08006a70
 80045f4:	08006a70 	.word	0x08006a70
 80045f8:	08006a70 	.word	0x08006a70
 80045fc:	08006a74 	.word	0x08006a74

08004600 <__retarget_lock_init_recursive>:
 8004600:	4770      	bx	lr

08004602 <__retarget_lock_acquire_recursive>:
 8004602:	4770      	bx	lr

08004604 <__retarget_lock_release_recursive>:
 8004604:	4770      	bx	lr

08004606 <quorem>:
 8004606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	6903      	ldr	r3, [r0, #16]
 800460c:	690c      	ldr	r4, [r1, #16]
 800460e:	42a3      	cmp	r3, r4
 8004610:	4607      	mov	r7, r0
 8004612:	db7e      	blt.n	8004712 <quorem+0x10c>
 8004614:	3c01      	subs	r4, #1
 8004616:	f101 0814 	add.w	r8, r1, #20
 800461a:	00a3      	lsls	r3, r4, #2
 800461c:	f100 0514 	add.w	r5, r0, #20
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800462c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004630:	3301      	adds	r3, #1
 8004632:	429a      	cmp	r2, r3
 8004634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004638:	fbb2 f6f3 	udiv	r6, r2, r3
 800463c:	d32e      	bcc.n	800469c <quorem+0x96>
 800463e:	f04f 0a00 	mov.w	sl, #0
 8004642:	46c4      	mov	ip, r8
 8004644:	46ae      	mov	lr, r5
 8004646:	46d3      	mov	fp, sl
 8004648:	f85c 3b04 	ldr.w	r3, [ip], #4
 800464c:	b298      	uxth	r0, r3
 800464e:	fb06 a000 	mla	r0, r6, r0, sl
 8004652:	0c02      	lsrs	r2, r0, #16
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	fb06 2303 	mla	r3, r6, r3, r2
 800465a:	f8de 2000 	ldr.w	r2, [lr]
 800465e:	b280      	uxth	r0, r0
 8004660:	b292      	uxth	r2, r2
 8004662:	1a12      	subs	r2, r2, r0
 8004664:	445a      	add	r2, fp
 8004666:	f8de 0000 	ldr.w	r0, [lr]
 800466a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800466e:	b29b      	uxth	r3, r3
 8004670:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004674:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004678:	b292      	uxth	r2, r2
 800467a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800467e:	45e1      	cmp	r9, ip
 8004680:	f84e 2b04 	str.w	r2, [lr], #4
 8004684:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004688:	d2de      	bcs.n	8004648 <quorem+0x42>
 800468a:	9b00      	ldr	r3, [sp, #0]
 800468c:	58eb      	ldr	r3, [r5, r3]
 800468e:	b92b      	cbnz	r3, 800469c <quorem+0x96>
 8004690:	9b01      	ldr	r3, [sp, #4]
 8004692:	3b04      	subs	r3, #4
 8004694:	429d      	cmp	r5, r3
 8004696:	461a      	mov	r2, r3
 8004698:	d32f      	bcc.n	80046fa <quorem+0xf4>
 800469a:	613c      	str	r4, [r7, #16]
 800469c:	4638      	mov	r0, r7
 800469e:	f001 f979 	bl	8005994 <__mcmp>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	db25      	blt.n	80046f2 <quorem+0xec>
 80046a6:	4629      	mov	r1, r5
 80046a8:	2000      	movs	r0, #0
 80046aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80046ae:	f8d1 c000 	ldr.w	ip, [r1]
 80046b2:	fa1f fe82 	uxth.w	lr, r2
 80046b6:	fa1f f38c 	uxth.w	r3, ip
 80046ba:	eba3 030e 	sub.w	r3, r3, lr
 80046be:	4403      	add	r3, r0
 80046c0:	0c12      	lsrs	r2, r2, #16
 80046c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80046c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046d0:	45c1      	cmp	r9, r8
 80046d2:	f841 3b04 	str.w	r3, [r1], #4
 80046d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046da:	d2e6      	bcs.n	80046aa <quorem+0xa4>
 80046dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046e4:	b922      	cbnz	r2, 80046f0 <quorem+0xea>
 80046e6:	3b04      	subs	r3, #4
 80046e8:	429d      	cmp	r5, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	d30b      	bcc.n	8004706 <quorem+0x100>
 80046ee:	613c      	str	r4, [r7, #16]
 80046f0:	3601      	adds	r6, #1
 80046f2:	4630      	mov	r0, r6
 80046f4:	b003      	add	sp, #12
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	2a00      	cmp	r2, #0
 8004700:	d1cb      	bne.n	800469a <quorem+0x94>
 8004702:	3c01      	subs	r4, #1
 8004704:	e7c6      	b.n	8004694 <quorem+0x8e>
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	3b04      	subs	r3, #4
 800470a:	2a00      	cmp	r2, #0
 800470c:	d1ef      	bne.n	80046ee <quorem+0xe8>
 800470e:	3c01      	subs	r4, #1
 8004710:	e7ea      	b.n	80046e8 <quorem+0xe2>
 8004712:	2000      	movs	r0, #0
 8004714:	e7ee      	b.n	80046f4 <quorem+0xee>
	...

08004718 <_dtoa_r>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	69c7      	ldr	r7, [r0, #28]
 800471e:	b099      	sub	sp, #100	@ 0x64
 8004720:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004724:	ec55 4b10 	vmov	r4, r5, d0
 8004728:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800472a:	9109      	str	r1, [sp, #36]	@ 0x24
 800472c:	4683      	mov	fp, r0
 800472e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004730:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004732:	b97f      	cbnz	r7, 8004754 <_dtoa_r+0x3c>
 8004734:	2010      	movs	r0, #16
 8004736:	f000 fdfd 	bl	8005334 <malloc>
 800473a:	4602      	mov	r2, r0
 800473c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004740:	b920      	cbnz	r0, 800474c <_dtoa_r+0x34>
 8004742:	4ba7      	ldr	r3, [pc, #668]	@ (80049e0 <_dtoa_r+0x2c8>)
 8004744:	21ef      	movs	r1, #239	@ 0xef
 8004746:	48a7      	ldr	r0, [pc, #668]	@ (80049e4 <_dtoa_r+0x2cc>)
 8004748:	f001 fc68 	bl	800601c <__assert_func>
 800474c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004750:	6007      	str	r7, [r0, #0]
 8004752:	60c7      	str	r7, [r0, #12]
 8004754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	b159      	cbz	r1, 8004774 <_dtoa_r+0x5c>
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	604a      	str	r2, [r1, #4]
 8004760:	2301      	movs	r3, #1
 8004762:	4093      	lsls	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
 8004766:	4658      	mov	r0, fp
 8004768:	f000 feda 	bl	8005520 <_Bfree>
 800476c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	1e2b      	subs	r3, r5, #0
 8004776:	bfb9      	ittee	lt
 8004778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800477c:	9303      	strlt	r3, [sp, #12]
 800477e:	2300      	movge	r3, #0
 8004780:	6033      	strge	r3, [r6, #0]
 8004782:	9f03      	ldr	r7, [sp, #12]
 8004784:	4b98      	ldr	r3, [pc, #608]	@ (80049e8 <_dtoa_r+0x2d0>)
 8004786:	bfbc      	itt	lt
 8004788:	2201      	movlt	r2, #1
 800478a:	6032      	strlt	r2, [r6, #0]
 800478c:	43bb      	bics	r3, r7
 800478e:	d112      	bne.n	80047b6 <_dtoa_r+0x9e>
 8004790:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004792:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800479c:	4323      	orrs	r3, r4
 800479e:	f000 854d 	beq.w	800523c <_dtoa_r+0xb24>
 80047a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80049fc <_dtoa_r+0x2e4>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 854f 	beq.w	800524c <_dtoa_r+0xb34>
 80047ae:	f10a 0303 	add.w	r3, sl, #3
 80047b2:	f000 bd49 	b.w	8005248 <_dtoa_r+0xb30>
 80047b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	ec51 0b17 	vmov	r0, r1, d7
 80047c0:	2300      	movs	r3, #0
 80047c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80047c6:	f7fc f99f 	bl	8000b08 <__aeabi_dcmpeq>
 80047ca:	4680      	mov	r8, r0
 80047cc:	b158      	cbz	r0, 80047e6 <_dtoa_r+0xce>
 80047ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80047d0:	2301      	movs	r3, #1
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80047d6:	b113      	cbz	r3, 80047de <_dtoa_r+0xc6>
 80047d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80047da:	4b84      	ldr	r3, [pc, #528]	@ (80049ec <_dtoa_r+0x2d4>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004a00 <_dtoa_r+0x2e8>
 80047e2:	f000 bd33 	b.w	800524c <_dtoa_r+0xb34>
 80047e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80047ea:	aa16      	add	r2, sp, #88	@ 0x58
 80047ec:	a917      	add	r1, sp, #92	@ 0x5c
 80047ee:	4658      	mov	r0, fp
 80047f0:	f001 f980 	bl	8005af4 <__d2b>
 80047f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80047f8:	4681      	mov	r9, r0
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d077      	beq.n	80048ee <_dtoa_r+0x1d6>
 80047fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004800:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800480c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004818:	4619      	mov	r1, r3
 800481a:	2200      	movs	r2, #0
 800481c:	4b74      	ldr	r3, [pc, #464]	@ (80049f0 <_dtoa_r+0x2d8>)
 800481e:	f7fb fd53 	bl	80002c8 <__aeabi_dsub>
 8004822:	a369      	add	r3, pc, #420	@ (adr r3, 80049c8 <_dtoa_r+0x2b0>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb ff06 	bl	8000638 <__aeabi_dmul>
 800482c:	a368      	add	r3, pc, #416	@ (adr r3, 80049d0 <_dtoa_r+0x2b8>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	f7fb fd4b 	bl	80002cc <__adddf3>
 8004836:	4604      	mov	r4, r0
 8004838:	4630      	mov	r0, r6
 800483a:	460d      	mov	r5, r1
 800483c:	f7fb fe92 	bl	8000564 <__aeabi_i2d>
 8004840:	a365      	add	r3, pc, #404	@ (adr r3, 80049d8 <_dtoa_r+0x2c0>)
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f7fb fef7 	bl	8000638 <__aeabi_dmul>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	f7fb fd3b 	bl	80002cc <__adddf3>
 8004856:	4604      	mov	r4, r0
 8004858:	460d      	mov	r5, r1
 800485a:	f7fc f99d 	bl	8000b98 <__aeabi_d2iz>
 800485e:	2200      	movs	r2, #0
 8004860:	4607      	mov	r7, r0
 8004862:	2300      	movs	r3, #0
 8004864:	4620      	mov	r0, r4
 8004866:	4629      	mov	r1, r5
 8004868:	f7fc f958 	bl	8000b1c <__aeabi_dcmplt>
 800486c:	b140      	cbz	r0, 8004880 <_dtoa_r+0x168>
 800486e:	4638      	mov	r0, r7
 8004870:	f7fb fe78 	bl	8000564 <__aeabi_i2d>
 8004874:	4622      	mov	r2, r4
 8004876:	462b      	mov	r3, r5
 8004878:	f7fc f946 	bl	8000b08 <__aeabi_dcmpeq>
 800487c:	b900      	cbnz	r0, 8004880 <_dtoa_r+0x168>
 800487e:	3f01      	subs	r7, #1
 8004880:	2f16      	cmp	r7, #22
 8004882:	d851      	bhi.n	8004928 <_dtoa_r+0x210>
 8004884:	4b5b      	ldr	r3, [pc, #364]	@ (80049f4 <_dtoa_r+0x2dc>)
 8004886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004892:	f7fc f943 	bl	8000b1c <__aeabi_dcmplt>
 8004896:	2800      	cmp	r0, #0
 8004898:	d048      	beq.n	800492c <_dtoa_r+0x214>
 800489a:	3f01      	subs	r7, #1
 800489c:	2300      	movs	r3, #0
 800489e:	9312      	str	r3, [sp, #72]	@ 0x48
 80048a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80048a2:	1b9b      	subs	r3, r3, r6
 80048a4:	1e5a      	subs	r2, r3, #1
 80048a6:	bf44      	itt	mi
 80048a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80048ac:	2300      	movmi	r3, #0
 80048ae:	9208      	str	r2, [sp, #32]
 80048b0:	bf54      	ite	pl
 80048b2:	f04f 0800 	movpl.w	r8, #0
 80048b6:	9308      	strmi	r3, [sp, #32]
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	db39      	blt.n	8004930 <_dtoa_r+0x218>
 80048bc:	9b08      	ldr	r3, [sp, #32]
 80048be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80048c0:	443b      	add	r3, r7
 80048c2:	9308      	str	r3, [sp, #32]
 80048c4:	2300      	movs	r3, #0
 80048c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d864      	bhi.n	8004998 <_dtoa_r+0x280>
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	bfc4      	itt	gt
 80048d2:	3b04      	subgt	r3, #4
 80048d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80048d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d8:	f1a3 0302 	sub.w	r3, r3, #2
 80048dc:	bfcc      	ite	gt
 80048de:	2400      	movgt	r4, #0
 80048e0:	2401      	movle	r4, #1
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d863      	bhi.n	80049ae <_dtoa_r+0x296>
 80048e6:	e8df f003 	tbb	[pc, r3]
 80048ea:	372a      	.short	0x372a
 80048ec:	5535      	.short	0x5535
 80048ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80048f2:	441e      	add	r6, r3
 80048f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	bfc1      	itttt	gt
 80048fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004900:	409f      	lslgt	r7, r3
 8004902:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004906:	fa24 f303 	lsrgt.w	r3, r4, r3
 800490a:	bfd6      	itet	le
 800490c:	f1c3 0320 	rsble	r3, r3, #32
 8004910:	ea47 0003 	orrgt.w	r0, r7, r3
 8004914:	fa04 f003 	lslle.w	r0, r4, r3
 8004918:	f7fb fe14 	bl	8000544 <__aeabi_ui2d>
 800491c:	2201      	movs	r2, #1
 800491e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004922:	3e01      	subs	r6, #1
 8004924:	9214      	str	r2, [sp, #80]	@ 0x50
 8004926:	e777      	b.n	8004818 <_dtoa_r+0x100>
 8004928:	2301      	movs	r3, #1
 800492a:	e7b8      	b.n	800489e <_dtoa_r+0x186>
 800492c:	9012      	str	r0, [sp, #72]	@ 0x48
 800492e:	e7b7      	b.n	80048a0 <_dtoa_r+0x188>
 8004930:	427b      	negs	r3, r7
 8004932:	930a      	str	r3, [sp, #40]	@ 0x28
 8004934:	2300      	movs	r3, #0
 8004936:	eba8 0807 	sub.w	r8, r8, r7
 800493a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800493c:	e7c4      	b.n	80048c8 <_dtoa_r+0x1b0>
 800493e:	2300      	movs	r3, #0
 8004940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	dc35      	bgt.n	80049b4 <_dtoa_r+0x29c>
 8004948:	2301      	movs	r3, #1
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	461a      	mov	r2, r3
 8004950:	920e      	str	r2, [sp, #56]	@ 0x38
 8004952:	e00b      	b.n	800496c <_dtoa_r+0x254>
 8004954:	2301      	movs	r3, #1
 8004956:	e7f3      	b.n	8004940 <_dtoa_r+0x228>
 8004958:	2300      	movs	r3, #0
 800495a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800495c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	9307      	str	r3, [sp, #28]
 8004968:	bfb8      	it	lt
 800496a:	2301      	movlt	r3, #1
 800496c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004970:	2100      	movs	r1, #0
 8004972:	2204      	movs	r2, #4
 8004974:	f102 0514 	add.w	r5, r2, #20
 8004978:	429d      	cmp	r5, r3
 800497a:	d91f      	bls.n	80049bc <_dtoa_r+0x2a4>
 800497c:	6041      	str	r1, [r0, #4]
 800497e:	4658      	mov	r0, fp
 8004980:	f000 fd8e 	bl	80054a0 <_Balloc>
 8004984:	4682      	mov	sl, r0
 8004986:	2800      	cmp	r0, #0
 8004988:	d13c      	bne.n	8004a04 <_dtoa_r+0x2ec>
 800498a:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <_dtoa_r+0x2e0>)
 800498c:	4602      	mov	r2, r0
 800498e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004992:	e6d8      	b.n	8004746 <_dtoa_r+0x2e>
 8004994:	2301      	movs	r3, #1
 8004996:	e7e0      	b.n	800495a <_dtoa_r+0x242>
 8004998:	2401      	movs	r4, #1
 800499a:	2300      	movs	r3, #0
 800499c:	9309      	str	r3, [sp, #36]	@ 0x24
 800499e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	9307      	str	r3, [sp, #28]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2312      	movs	r3, #18
 80049ac:	e7d0      	b.n	8004950 <_dtoa_r+0x238>
 80049ae:	2301      	movs	r3, #1
 80049b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049b2:	e7f5      	b.n	80049a0 <_dtoa_r+0x288>
 80049b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	9307      	str	r3, [sp, #28]
 80049ba:	e7d7      	b.n	800496c <_dtoa_r+0x254>
 80049bc:	3101      	adds	r1, #1
 80049be:	0052      	lsls	r2, r2, #1
 80049c0:	e7d8      	b.n	8004974 <_dtoa_r+0x25c>
 80049c2:	bf00      	nop
 80049c4:	f3af 8000 	nop.w
 80049c8:	636f4361 	.word	0x636f4361
 80049cc:	3fd287a7 	.word	0x3fd287a7
 80049d0:	8b60c8b3 	.word	0x8b60c8b3
 80049d4:	3fc68a28 	.word	0x3fc68a28
 80049d8:	509f79fb 	.word	0x509f79fb
 80049dc:	3fd34413 	.word	0x3fd34413
 80049e0:	08006739 	.word	0x08006739
 80049e4:	08006750 	.word	0x08006750
 80049e8:	7ff00000 	.word	0x7ff00000
 80049ec:	08006709 	.word	0x08006709
 80049f0:	3ff80000 	.word	0x3ff80000
 80049f4:	08006848 	.word	0x08006848
 80049f8:	080067a8 	.word	0x080067a8
 80049fc:	08006735 	.word	0x08006735
 8004a00:	08006708 	.word	0x08006708
 8004a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a08:	6018      	str	r0, [r3, #0]
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	2b0e      	cmp	r3, #14
 8004a0e:	f200 80a4 	bhi.w	8004b5a <_dtoa_r+0x442>
 8004a12:	2c00      	cmp	r4, #0
 8004a14:	f000 80a1 	beq.w	8004b5a <_dtoa_r+0x442>
 8004a18:	2f00      	cmp	r7, #0
 8004a1a:	dd33      	ble.n	8004a84 <_dtoa_r+0x36c>
 8004a1c:	4bad      	ldr	r3, [pc, #692]	@ (8004cd4 <_dtoa_r+0x5bc>)
 8004a1e:	f007 020f 	and.w	r2, r7, #15
 8004a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a26:	ed93 7b00 	vldr	d7, [r3]
 8004a2a:	05f8      	lsls	r0, r7, #23
 8004a2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004a30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a34:	d516      	bpl.n	8004a64 <_dtoa_r+0x34c>
 8004a36:	4ba8      	ldr	r3, [pc, #672]	@ (8004cd8 <_dtoa_r+0x5c0>)
 8004a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a40:	f7fb ff24 	bl	800088c <__aeabi_ddiv>
 8004a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a48:	f004 040f 	and.w	r4, r4, #15
 8004a4c:	2603      	movs	r6, #3
 8004a4e:	4da2      	ldr	r5, [pc, #648]	@ (8004cd8 <_dtoa_r+0x5c0>)
 8004a50:	b954      	cbnz	r4, 8004a68 <_dtoa_r+0x350>
 8004a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a5a:	f7fb ff17 	bl	800088c <__aeabi_ddiv>
 8004a5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a62:	e028      	b.n	8004ab6 <_dtoa_r+0x39e>
 8004a64:	2602      	movs	r6, #2
 8004a66:	e7f2      	b.n	8004a4e <_dtoa_r+0x336>
 8004a68:	07e1      	lsls	r1, r4, #31
 8004a6a:	d508      	bpl.n	8004a7e <_dtoa_r+0x366>
 8004a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a74:	f7fb fde0 	bl	8000638 <__aeabi_dmul>
 8004a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	1064      	asrs	r4, r4, #1
 8004a80:	3508      	adds	r5, #8
 8004a82:	e7e5      	b.n	8004a50 <_dtoa_r+0x338>
 8004a84:	f000 80d2 	beq.w	8004c2c <_dtoa_r+0x514>
 8004a88:	427c      	negs	r4, r7
 8004a8a:	4b92      	ldr	r3, [pc, #584]	@ (8004cd4 <_dtoa_r+0x5bc>)
 8004a8c:	4d92      	ldr	r5, [pc, #584]	@ (8004cd8 <_dtoa_r+0x5c0>)
 8004a8e:	f004 020f 	and.w	r2, r4, #15
 8004a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a9e:	f7fb fdcb 	bl	8000638 <__aeabi_dmul>
 8004aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa6:	1124      	asrs	r4, r4, #4
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2602      	movs	r6, #2
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	f040 80b2 	bne.w	8004c16 <_dtoa_r+0x4fe>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1d3      	bne.n	8004a5e <_dtoa_r+0x346>
 8004ab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ab8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80b7 	beq.w	8004c30 <_dtoa_r+0x518>
 8004ac2:	4b86      	ldr	r3, [pc, #536]	@ (8004cdc <_dtoa_r+0x5c4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fc f827 	bl	8000b1c <__aeabi_dcmplt>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f000 80ae 	beq.w	8004c30 <_dtoa_r+0x518>
 8004ad4:	9b07      	ldr	r3, [sp, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80aa 	beq.w	8004c30 <_dtoa_r+0x518>
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd37      	ble.n	8004b52 <_dtoa_r+0x43a>
 8004ae2:	1e7b      	subs	r3, r7, #1
 8004ae4:	9304      	str	r3, [sp, #16]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ce0 <_dtoa_r+0x5c8>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	4629      	mov	r1, r5
 8004aee:	f7fb fda3 	bl	8000638 <__aeabi_dmul>
 8004af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af6:	9c00      	ldr	r4, [sp, #0]
 8004af8:	3601      	adds	r6, #1
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7fb fd32 	bl	8000564 <__aeabi_i2d>
 8004b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b04:	f7fb fd98 	bl	8000638 <__aeabi_dmul>
 8004b08:	4b76      	ldr	r3, [pc, #472]	@ (8004ce4 <_dtoa_r+0x5cc>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f7fb fbde 	bl	80002cc <__adddf3>
 8004b10:	4605      	mov	r5, r0
 8004b12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	f040 808d 	bne.w	8004c36 <_dtoa_r+0x51e>
 8004b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b20:	4b71      	ldr	r3, [pc, #452]	@ (8004ce8 <_dtoa_r+0x5d0>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	f7fb fbd0 	bl	80002c8 <__aeabi_dsub>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4633      	mov	r3, r6
 8004b34:	f7fc f810 	bl	8000b58 <__aeabi_dcmpgt>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f040 828b 	bne.w	8005054 <_dtoa_r+0x93c>
 8004b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b42:	462a      	mov	r2, r5
 8004b44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b48:	f7fb ffe8 	bl	8000b1c <__aeabi_dcmplt>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	f040 8128 	bne.w	8004da2 <_dtoa_r+0x68a>
 8004b52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004b5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f2c0 815a 	blt.w	8004e16 <_dtoa_r+0x6fe>
 8004b62:	2f0e      	cmp	r7, #14
 8004b64:	f300 8157 	bgt.w	8004e16 <_dtoa_r+0x6fe>
 8004b68:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <_dtoa_r+0x5bc>)
 8004b6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b6e:	ed93 7b00 	vldr	d7, [r3]
 8004b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	ed8d 7b00 	vstr	d7, [sp]
 8004b7a:	da03      	bge.n	8004b84 <_dtoa_r+0x46c>
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f340 8101 	ble.w	8004d86 <_dtoa_r+0x66e>
 8004b84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b88:	4656      	mov	r6, sl
 8004b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fe7b 	bl	800088c <__aeabi_ddiv>
 8004b96:	f7fb ffff 	bl	8000b98 <__aeabi_d2iz>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	f7fb fce2 	bl	8000564 <__aeabi_i2d>
 8004ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ba4:	f7fb fd48 	bl	8000638 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4620      	mov	r0, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bb4:	f7fb fb88 	bl	80002c8 <__aeabi_dsub>
 8004bb8:	f806 4b01 	strb.w	r4, [r6], #1
 8004bbc:	9d07      	ldr	r5, [sp, #28]
 8004bbe:	eba6 040a 	sub.w	r4, r6, sl
 8004bc2:	42a5      	cmp	r5, r4
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	f040 8117 	bne.w	8004dfa <_dtoa_r+0x6e2>
 8004bcc:	f7fb fb7e 	bl	80002cc <__adddf3>
 8004bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	460d      	mov	r5, r1
 8004bd8:	f7fb ffbe 	bl	8000b58 <__aeabi_dcmpgt>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 80f9 	bne.w	8004dd4 <_dtoa_r+0x6bc>
 8004be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8004bee:	b118      	cbz	r0, 8004bf8 <_dtoa_r+0x4e0>
 8004bf0:	f018 0f01 	tst.w	r8, #1
 8004bf4:	f040 80ee 	bne.w	8004dd4 <_dtoa_r+0x6bc>
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4658      	mov	r0, fp
 8004bfc:	f000 fc90 	bl	8005520 <_Bfree>
 8004c00:	2300      	movs	r3, #0
 8004c02:	7033      	strb	r3, [r6, #0]
 8004c04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004c06:	3701      	adds	r7, #1
 8004c08:	601f      	str	r7, [r3, #0]
 8004c0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 831d 	beq.w	800524c <_dtoa_r+0xb34>
 8004c12:	601e      	str	r6, [r3, #0]
 8004c14:	e31a      	b.n	800524c <_dtoa_r+0xb34>
 8004c16:	07e2      	lsls	r2, r4, #31
 8004c18:	d505      	bpl.n	8004c26 <_dtoa_r+0x50e>
 8004c1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c1e:	f7fb fd0b 	bl	8000638 <__aeabi_dmul>
 8004c22:	3601      	adds	r6, #1
 8004c24:	2301      	movs	r3, #1
 8004c26:	1064      	asrs	r4, r4, #1
 8004c28:	3508      	adds	r5, #8
 8004c2a:	e73f      	b.n	8004aac <_dtoa_r+0x394>
 8004c2c:	2602      	movs	r6, #2
 8004c2e:	e742      	b.n	8004ab6 <_dtoa_r+0x39e>
 8004c30:	9c07      	ldr	r4, [sp, #28]
 8004c32:	9704      	str	r7, [sp, #16]
 8004c34:	e761      	b.n	8004afa <_dtoa_r+0x3e2>
 8004c36:	4b27      	ldr	r3, [pc, #156]	@ (8004cd4 <_dtoa_r+0x5bc>)
 8004c38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c42:	4454      	add	r4, sl
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d053      	beq.n	8004cf0 <_dtoa_r+0x5d8>
 8004c48:	4928      	ldr	r1, [pc, #160]	@ (8004cec <_dtoa_r+0x5d4>)
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7fb fe1e 	bl	800088c <__aeabi_ddiv>
 8004c50:	4633      	mov	r3, r6
 8004c52:	462a      	mov	r2, r5
 8004c54:	f7fb fb38 	bl	80002c8 <__aeabi_dsub>
 8004c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c5c:	4656      	mov	r6, sl
 8004c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c62:	f7fb ff99 	bl	8000b98 <__aeabi_d2iz>
 8004c66:	4605      	mov	r5, r0
 8004c68:	f7fb fc7c 	bl	8000564 <__aeabi_i2d>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c74:	f7fb fb28 	bl	80002c8 <__aeabi_dsub>
 8004c78:	3530      	adds	r5, #48	@ 0x30
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c82:	f806 5b01 	strb.w	r5, [r6], #1
 8004c86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c8a:	f7fb ff47 	bl	8000b1c <__aeabi_dcmplt>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d171      	bne.n	8004d76 <_dtoa_r+0x65e>
 8004c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c96:	4911      	ldr	r1, [pc, #68]	@ (8004cdc <_dtoa_r+0x5c4>)
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fb fb15 	bl	80002c8 <__aeabi_dsub>
 8004c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ca2:	f7fb ff3b 	bl	8000b1c <__aeabi_dcmplt>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f040 8095 	bne.w	8004dd6 <_dtoa_r+0x6be>
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	f43f af50 	beq.w	8004b52 <_dtoa_r+0x43a>
 8004cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <_dtoa_r+0x5c8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f7fb fcbd 	bl	8000638 <__aeabi_dmul>
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <_dtoa_r+0x5c8>)
 8004cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cca:	f7fb fcb5 	bl	8000638 <__aeabi_dmul>
 8004cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd2:	e7c4      	b.n	8004c5e <_dtoa_r+0x546>
 8004cd4:	08006848 	.word	0x08006848
 8004cd8:	08006820 	.word	0x08006820
 8004cdc:	3ff00000 	.word	0x3ff00000
 8004ce0:	40240000 	.word	0x40240000
 8004ce4:	401c0000 	.word	0x401c0000
 8004ce8:	40140000 	.word	0x40140000
 8004cec:	3fe00000 	.word	0x3fe00000
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7fb fca0 	bl	8000638 <__aeabi_dmul>
 8004cf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004cfe:	4656      	mov	r6, sl
 8004d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d04:	f7fb ff48 	bl	8000b98 <__aeabi_d2iz>
 8004d08:	4605      	mov	r5, r0
 8004d0a:	f7fb fc2b 	bl	8000564 <__aeabi_i2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d16:	f7fb fad7 	bl	80002c8 <__aeabi_dsub>
 8004d1a:	3530      	adds	r5, #48	@ 0x30
 8004d1c:	f806 5b01 	strb.w	r5, [r6], #1
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	d124      	bne.n	8004d7a <_dtoa_r+0x662>
 8004d30:	4bac      	ldr	r3, [pc, #688]	@ (8004fe4 <_dtoa_r+0x8cc>)
 8004d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d36:	f7fb fac9 	bl	80002cc <__adddf3>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d42:	f7fb ff09 	bl	8000b58 <__aeabi_dcmpgt>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d145      	bne.n	8004dd6 <_dtoa_r+0x6be>
 8004d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d4e:	49a5      	ldr	r1, [pc, #660]	@ (8004fe4 <_dtoa_r+0x8cc>)
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7fb fab9 	bl	80002c8 <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d5e:	f7fb fedd 	bl	8000b1c <__aeabi_dcmplt>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	f43f aef5 	beq.w	8004b52 <_dtoa_r+0x43a>
 8004d68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004d6a:	1e73      	subs	r3, r6, #1
 8004d6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004d6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d72:	2b30      	cmp	r3, #48	@ 0x30
 8004d74:	d0f8      	beq.n	8004d68 <_dtoa_r+0x650>
 8004d76:	9f04      	ldr	r7, [sp, #16]
 8004d78:	e73e      	b.n	8004bf8 <_dtoa_r+0x4e0>
 8004d7a:	4b9b      	ldr	r3, [pc, #620]	@ (8004fe8 <_dtoa_r+0x8d0>)
 8004d7c:	f7fb fc5c 	bl	8000638 <__aeabi_dmul>
 8004d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d84:	e7bc      	b.n	8004d00 <_dtoa_r+0x5e8>
 8004d86:	d10c      	bne.n	8004da2 <_dtoa_r+0x68a>
 8004d88:	4b98      	ldr	r3, [pc, #608]	@ (8004fec <_dtoa_r+0x8d4>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d90:	f7fb fc52 	bl	8000638 <__aeabi_dmul>
 8004d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d98:	f7fb fed4 	bl	8000b44 <__aeabi_dcmpge>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f000 8157 	beq.w	8005050 <_dtoa_r+0x938>
 8004da2:	2400      	movs	r4, #0
 8004da4:	4625      	mov	r5, r4
 8004da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004da8:	43db      	mvns	r3, r3
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	4656      	mov	r6, sl
 8004dae:	2700      	movs	r7, #0
 8004db0:	4621      	mov	r1, r4
 8004db2:	4658      	mov	r0, fp
 8004db4:	f000 fbb4 	bl	8005520 <_Bfree>
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	d0dc      	beq.n	8004d76 <_dtoa_r+0x65e>
 8004dbc:	b12f      	cbz	r7, 8004dca <_dtoa_r+0x6b2>
 8004dbe:	42af      	cmp	r7, r5
 8004dc0:	d003      	beq.n	8004dca <_dtoa_r+0x6b2>
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4658      	mov	r0, fp
 8004dc6:	f000 fbab 	bl	8005520 <_Bfree>
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4658      	mov	r0, fp
 8004dce:	f000 fba7 	bl	8005520 <_Bfree>
 8004dd2:	e7d0      	b.n	8004d76 <_dtoa_r+0x65e>
 8004dd4:	9704      	str	r7, [sp, #16]
 8004dd6:	4633      	mov	r3, r6
 8004dd8:	461e      	mov	r6, r3
 8004dda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dde:	2a39      	cmp	r2, #57	@ 0x39
 8004de0:	d107      	bne.n	8004df2 <_dtoa_r+0x6da>
 8004de2:	459a      	cmp	sl, r3
 8004de4:	d1f8      	bne.n	8004dd8 <_dtoa_r+0x6c0>
 8004de6:	9a04      	ldr	r2, [sp, #16]
 8004de8:	3201      	adds	r2, #1
 8004dea:	9204      	str	r2, [sp, #16]
 8004dec:	2230      	movs	r2, #48	@ 0x30
 8004dee:	f88a 2000 	strb.w	r2, [sl]
 8004df2:	781a      	ldrb	r2, [r3, #0]
 8004df4:	3201      	adds	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e7bd      	b.n	8004d76 <_dtoa_r+0x65e>
 8004dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8004fe8 <_dtoa_r+0x8d0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f7fb fc1b 	bl	8000638 <__aeabi_dmul>
 8004e02:	2200      	movs	r2, #0
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	460d      	mov	r5, r1
 8004e0a:	f7fb fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f43f aebb 	beq.w	8004b8a <_dtoa_r+0x472>
 8004e14:	e6f0      	b.n	8004bf8 <_dtoa_r+0x4e0>
 8004e16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	f000 80db 	beq.w	8004fd4 <_dtoa_r+0x8bc>
 8004e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e20:	2a01      	cmp	r2, #1
 8004e22:	f300 80bf 	bgt.w	8004fa4 <_dtoa_r+0x88c>
 8004e26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	f000 80b7 	beq.w	8004f9c <_dtoa_r+0x884>
 8004e2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e34:	4646      	mov	r6, r8
 8004e36:	9a08      	ldr	r2, [sp, #32]
 8004e38:	2101      	movs	r1, #1
 8004e3a:	441a      	add	r2, r3
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	4498      	add	r8, r3
 8004e40:	9208      	str	r2, [sp, #32]
 8004e42:	f000 fc21 	bl	8005688 <__i2b>
 8004e46:	4605      	mov	r5, r0
 8004e48:	b15e      	cbz	r6, 8004e62 <_dtoa_r+0x74a>
 8004e4a:	9b08      	ldr	r3, [sp, #32]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dd08      	ble.n	8004e62 <_dtoa_r+0x74a>
 8004e50:	42b3      	cmp	r3, r6
 8004e52:	9a08      	ldr	r2, [sp, #32]
 8004e54:	bfa8      	it	ge
 8004e56:	4633      	movge	r3, r6
 8004e58:	eba8 0803 	sub.w	r8, r8, r3
 8004e5c:	1af6      	subs	r6, r6, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	9308      	str	r3, [sp, #32]
 8004e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e64:	b1f3      	cbz	r3, 8004ea4 <_dtoa_r+0x78c>
 8004e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80b7 	beq.w	8004fdc <_dtoa_r+0x8c4>
 8004e6e:	b18c      	cbz	r4, 8004e94 <_dtoa_r+0x77c>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4622      	mov	r2, r4
 8004e74:	4658      	mov	r0, fp
 8004e76:	f000 fcc7 	bl	8005808 <__pow5mult>
 8004e7a:	464a      	mov	r2, r9
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4605      	mov	r5, r0
 8004e80:	4658      	mov	r0, fp
 8004e82:	f000 fc17 	bl	80056b4 <__multiply>
 8004e86:	4649      	mov	r1, r9
 8004e88:	9004      	str	r0, [sp, #16]
 8004e8a:	4658      	mov	r0, fp
 8004e8c:	f000 fb48 	bl	8005520 <_Bfree>
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	4699      	mov	r9, r3
 8004e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e96:	1b1a      	subs	r2, r3, r4
 8004e98:	d004      	beq.n	8004ea4 <_dtoa_r+0x78c>
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4658      	mov	r0, fp
 8004e9e:	f000 fcb3 	bl	8005808 <__pow5mult>
 8004ea2:	4681      	mov	r9, r0
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	4658      	mov	r0, fp
 8004ea8:	f000 fbee 	bl	8005688 <__i2b>
 8004eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 81cf 	beq.w	8005254 <_dtoa_r+0xb3c>
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4658      	mov	r0, fp
 8004ebc:	f000 fca4 	bl	8005808 <__pow5mult>
 8004ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	f300 8095 	bgt.w	8004ff4 <_dtoa_r+0x8dc>
 8004eca:	9b02      	ldr	r3, [sp, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8087 	bne.w	8004fe0 <_dtoa_r+0x8c8>
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 8089 	bne.w	8004ff0 <_dtoa_r+0x8d8>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ee4:	0d1b      	lsrs	r3, r3, #20
 8004ee6:	051b      	lsls	r3, r3, #20
 8004ee8:	b12b      	cbz	r3, 8004ef6 <_dtoa_r+0x7de>
 8004eea:	9b08      	ldr	r3, [sp, #32]
 8004eec:	3301      	adds	r3, #1
 8004eee:	9308      	str	r3, [sp, #32]
 8004ef0:	f108 0801 	add.w	r8, r8, #1
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 81b0 	beq.w	8005260 <_dtoa_r+0xb48>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f06:	6918      	ldr	r0, [r3, #16]
 8004f08:	f000 fb72 	bl	80055f0 <__hi0bits>
 8004f0c:	f1c0 0020 	rsb	r0, r0, #32
 8004f10:	9b08      	ldr	r3, [sp, #32]
 8004f12:	4418      	add	r0, r3
 8004f14:	f010 001f 	ands.w	r0, r0, #31
 8004f18:	d077      	beq.n	800500a <_dtoa_r+0x8f2>
 8004f1a:	f1c0 0320 	rsb	r3, r0, #32
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	dd6b      	ble.n	8004ffa <_dtoa_r+0x8e2>
 8004f22:	9b08      	ldr	r3, [sp, #32]
 8004f24:	f1c0 001c 	rsb	r0, r0, #28
 8004f28:	4403      	add	r3, r0
 8004f2a:	4480      	add	r8, r0
 8004f2c:	4406      	add	r6, r0
 8004f2e:	9308      	str	r3, [sp, #32]
 8004f30:	f1b8 0f00 	cmp.w	r8, #0
 8004f34:	dd05      	ble.n	8004f42 <_dtoa_r+0x82a>
 8004f36:	4649      	mov	r1, r9
 8004f38:	4642      	mov	r2, r8
 8004f3a:	4658      	mov	r0, fp
 8004f3c:	f000 fcbe 	bl	80058bc <__lshift>
 8004f40:	4681      	mov	r9, r0
 8004f42:	9b08      	ldr	r3, [sp, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dd05      	ble.n	8004f54 <_dtoa_r+0x83c>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4658      	mov	r0, fp
 8004f4e:	f000 fcb5 	bl	80058bc <__lshift>
 8004f52:	4604      	mov	r4, r0
 8004f54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d059      	beq.n	800500e <_dtoa_r+0x8f6>
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	4648      	mov	r0, r9
 8004f5e:	f000 fd19 	bl	8005994 <__mcmp>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	da53      	bge.n	800500e <_dtoa_r+0x8f6>
 8004f66:	1e7b      	subs	r3, r7, #1
 8004f68:	9304      	str	r3, [sp, #16]
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	220a      	movs	r2, #10
 8004f70:	4658      	mov	r0, fp
 8004f72:	f000 faf7 	bl	8005564 <__multadd>
 8004f76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f78:	4681      	mov	r9, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8172 	beq.w	8005264 <_dtoa_r+0xb4c>
 8004f80:	2300      	movs	r3, #0
 8004f82:	4629      	mov	r1, r5
 8004f84:	220a      	movs	r2, #10
 8004f86:	4658      	mov	r0, fp
 8004f88:	f000 faec 	bl	8005564 <__multadd>
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	4605      	mov	r5, r0
 8004f92:	dc67      	bgt.n	8005064 <_dtoa_r+0x94c>
 8004f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	dc41      	bgt.n	800501e <_dtoa_r+0x906>
 8004f9a:	e063      	b.n	8005064 <_dtoa_r+0x94c>
 8004f9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004fa2:	e746      	b.n	8004e32 <_dtoa_r+0x71a>
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	1e5c      	subs	r4, r3, #1
 8004fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	bfbf      	itttt	lt
 8004fae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004fb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004fb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004fb4:	1ae3      	sublt	r3, r4, r3
 8004fb6:	bfb4      	ite	lt
 8004fb8:	18d2      	addlt	r2, r2, r3
 8004fba:	1b1c      	subge	r4, r3, r4
 8004fbc:	9b07      	ldr	r3, [sp, #28]
 8004fbe:	bfbc      	itt	lt
 8004fc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004fc2:	2400      	movlt	r4, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bfb5      	itete	lt
 8004fc8:	eba8 0603 	sublt.w	r6, r8, r3
 8004fcc:	9b07      	ldrge	r3, [sp, #28]
 8004fce:	2300      	movlt	r3, #0
 8004fd0:	4646      	movge	r6, r8
 8004fd2:	e730      	b.n	8004e36 <_dtoa_r+0x71e>
 8004fd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004fd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004fd8:	4646      	mov	r6, r8
 8004fda:	e735      	b.n	8004e48 <_dtoa_r+0x730>
 8004fdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fde:	e75c      	b.n	8004e9a <_dtoa_r+0x782>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e788      	b.n	8004ef6 <_dtoa_r+0x7de>
 8004fe4:	3fe00000 	.word	0x3fe00000
 8004fe8:	40240000 	.word	0x40240000
 8004fec:	40140000 	.word	0x40140000
 8004ff0:	9b02      	ldr	r3, [sp, #8]
 8004ff2:	e780      	b.n	8004ef6 <_dtoa_r+0x7de>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ff8:	e782      	b.n	8004f00 <_dtoa_r+0x7e8>
 8004ffa:	d099      	beq.n	8004f30 <_dtoa_r+0x818>
 8004ffc:	9a08      	ldr	r2, [sp, #32]
 8004ffe:	331c      	adds	r3, #28
 8005000:	441a      	add	r2, r3
 8005002:	4498      	add	r8, r3
 8005004:	441e      	add	r6, r3
 8005006:	9208      	str	r2, [sp, #32]
 8005008:	e792      	b.n	8004f30 <_dtoa_r+0x818>
 800500a:	4603      	mov	r3, r0
 800500c:	e7f6      	b.n	8004ffc <_dtoa_r+0x8e4>
 800500e:	9b07      	ldr	r3, [sp, #28]
 8005010:	9704      	str	r7, [sp, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dc20      	bgt.n	8005058 <_dtoa_r+0x940>
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501a:	2b02      	cmp	r3, #2
 800501c:	dd1e      	ble.n	800505c <_dtoa_r+0x944>
 800501e:	9b00      	ldr	r3, [sp, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f aec0 	bne.w	8004da6 <_dtoa_r+0x68e>
 8005026:	4621      	mov	r1, r4
 8005028:	2205      	movs	r2, #5
 800502a:	4658      	mov	r0, fp
 800502c:	f000 fa9a 	bl	8005564 <__multadd>
 8005030:	4601      	mov	r1, r0
 8005032:	4604      	mov	r4, r0
 8005034:	4648      	mov	r0, r9
 8005036:	f000 fcad 	bl	8005994 <__mcmp>
 800503a:	2800      	cmp	r0, #0
 800503c:	f77f aeb3 	ble.w	8004da6 <_dtoa_r+0x68e>
 8005040:	4656      	mov	r6, sl
 8005042:	2331      	movs	r3, #49	@ 0x31
 8005044:	f806 3b01 	strb.w	r3, [r6], #1
 8005048:	9b04      	ldr	r3, [sp, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	e6ae      	b.n	8004dae <_dtoa_r+0x696>
 8005050:	9c07      	ldr	r4, [sp, #28]
 8005052:	9704      	str	r7, [sp, #16]
 8005054:	4625      	mov	r5, r4
 8005056:	e7f3      	b.n	8005040 <_dtoa_r+0x928>
 8005058:	9b07      	ldr	r3, [sp, #28]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8104 	beq.w	800526c <_dtoa_r+0xb54>
 8005064:	2e00      	cmp	r6, #0
 8005066:	dd05      	ble.n	8005074 <_dtoa_r+0x95c>
 8005068:	4629      	mov	r1, r5
 800506a:	4632      	mov	r2, r6
 800506c:	4658      	mov	r0, fp
 800506e:	f000 fc25 	bl	80058bc <__lshift>
 8005072:	4605      	mov	r5, r0
 8005074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d05a      	beq.n	8005130 <_dtoa_r+0xa18>
 800507a:	6869      	ldr	r1, [r5, #4]
 800507c:	4658      	mov	r0, fp
 800507e:	f000 fa0f 	bl	80054a0 <_Balloc>
 8005082:	4606      	mov	r6, r0
 8005084:	b928      	cbnz	r0, 8005092 <_dtoa_r+0x97a>
 8005086:	4b84      	ldr	r3, [pc, #528]	@ (8005298 <_dtoa_r+0xb80>)
 8005088:	4602      	mov	r2, r0
 800508a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800508e:	f7ff bb5a 	b.w	8004746 <_dtoa_r+0x2e>
 8005092:	692a      	ldr	r2, [r5, #16]
 8005094:	3202      	adds	r2, #2
 8005096:	0092      	lsls	r2, r2, #2
 8005098:	f105 010c 	add.w	r1, r5, #12
 800509c:	300c      	adds	r0, #12
 800509e:	f000 ffaf 	bl	8006000 <memcpy>
 80050a2:	2201      	movs	r2, #1
 80050a4:	4631      	mov	r1, r6
 80050a6:	4658      	mov	r0, fp
 80050a8:	f000 fc08 	bl	80058bc <__lshift>
 80050ac:	f10a 0301 	add.w	r3, sl, #1
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	4453      	add	r3, sl
 80050b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050b8:	9b02      	ldr	r3, [sp, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	462f      	mov	r7, r5
 80050c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050c2:	4605      	mov	r5, r0
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	4621      	mov	r1, r4
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4648      	mov	r0, r9
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	f7ff fa9a 	bl	8004606 <quorem>
 80050d2:	4639      	mov	r1, r7
 80050d4:	9002      	str	r0, [sp, #8]
 80050d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80050da:	4648      	mov	r0, r9
 80050dc:	f000 fc5a 	bl	8005994 <__mcmp>
 80050e0:	462a      	mov	r2, r5
 80050e2:	9008      	str	r0, [sp, #32]
 80050e4:	4621      	mov	r1, r4
 80050e6:	4658      	mov	r0, fp
 80050e8:	f000 fc70 	bl	80059cc <__mdiff>
 80050ec:	68c2      	ldr	r2, [r0, #12]
 80050ee:	4606      	mov	r6, r0
 80050f0:	bb02      	cbnz	r2, 8005134 <_dtoa_r+0xa1c>
 80050f2:	4601      	mov	r1, r0
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 fc4d 	bl	8005994 <__mcmp>
 80050fa:	4602      	mov	r2, r0
 80050fc:	4631      	mov	r1, r6
 80050fe:	4658      	mov	r0, fp
 8005100:	920e      	str	r2, [sp, #56]	@ 0x38
 8005102:	f000 fa0d 	bl	8005520 <_Bfree>
 8005106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800510a:	9e07      	ldr	r6, [sp, #28]
 800510c:	ea43 0102 	orr.w	r1, r3, r2
 8005110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005112:	4319      	orrs	r1, r3
 8005114:	d110      	bne.n	8005138 <_dtoa_r+0xa20>
 8005116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800511a:	d029      	beq.n	8005170 <_dtoa_r+0xa58>
 800511c:	9b08      	ldr	r3, [sp, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	dd02      	ble.n	8005128 <_dtoa_r+0xa10>
 8005122:	9b02      	ldr	r3, [sp, #8]
 8005124:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005128:	9b00      	ldr	r3, [sp, #0]
 800512a:	f883 8000 	strb.w	r8, [r3]
 800512e:	e63f      	b.n	8004db0 <_dtoa_r+0x698>
 8005130:	4628      	mov	r0, r5
 8005132:	e7bb      	b.n	80050ac <_dtoa_r+0x994>
 8005134:	2201      	movs	r2, #1
 8005136:	e7e1      	b.n	80050fc <_dtoa_r+0x9e4>
 8005138:	9b08      	ldr	r3, [sp, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	db04      	blt.n	8005148 <_dtoa_r+0xa30>
 800513e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005140:	430b      	orrs	r3, r1
 8005142:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005144:	430b      	orrs	r3, r1
 8005146:	d120      	bne.n	800518a <_dtoa_r+0xa72>
 8005148:	2a00      	cmp	r2, #0
 800514a:	dded      	ble.n	8005128 <_dtoa_r+0xa10>
 800514c:	4649      	mov	r1, r9
 800514e:	2201      	movs	r2, #1
 8005150:	4658      	mov	r0, fp
 8005152:	f000 fbb3 	bl	80058bc <__lshift>
 8005156:	4621      	mov	r1, r4
 8005158:	4681      	mov	r9, r0
 800515a:	f000 fc1b 	bl	8005994 <__mcmp>
 800515e:	2800      	cmp	r0, #0
 8005160:	dc03      	bgt.n	800516a <_dtoa_r+0xa52>
 8005162:	d1e1      	bne.n	8005128 <_dtoa_r+0xa10>
 8005164:	f018 0f01 	tst.w	r8, #1
 8005168:	d0de      	beq.n	8005128 <_dtoa_r+0xa10>
 800516a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800516e:	d1d8      	bne.n	8005122 <_dtoa_r+0xa0a>
 8005170:	9a00      	ldr	r2, [sp, #0]
 8005172:	2339      	movs	r3, #57	@ 0x39
 8005174:	7013      	strb	r3, [r2, #0]
 8005176:	4633      	mov	r3, r6
 8005178:	461e      	mov	r6, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005180:	2a39      	cmp	r2, #57	@ 0x39
 8005182:	d052      	beq.n	800522a <_dtoa_r+0xb12>
 8005184:	3201      	adds	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e612      	b.n	8004db0 <_dtoa_r+0x698>
 800518a:	2a00      	cmp	r2, #0
 800518c:	dd07      	ble.n	800519e <_dtoa_r+0xa86>
 800518e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005192:	d0ed      	beq.n	8005170 <_dtoa_r+0xa58>
 8005194:	9a00      	ldr	r2, [sp, #0]
 8005196:	f108 0301 	add.w	r3, r8, #1
 800519a:	7013      	strb	r3, [r2, #0]
 800519c:	e608      	b.n	8004db0 <_dtoa_r+0x698>
 800519e:	9b07      	ldr	r3, [sp, #28]
 80051a0:	9a07      	ldr	r2, [sp, #28]
 80051a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80051a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d028      	beq.n	80051fe <_dtoa_r+0xae6>
 80051ac:	4649      	mov	r1, r9
 80051ae:	2300      	movs	r3, #0
 80051b0:	220a      	movs	r2, #10
 80051b2:	4658      	mov	r0, fp
 80051b4:	f000 f9d6 	bl	8005564 <__multadd>
 80051b8:	42af      	cmp	r7, r5
 80051ba:	4681      	mov	r9, r0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	f04f 020a 	mov.w	r2, #10
 80051c4:	4639      	mov	r1, r7
 80051c6:	4658      	mov	r0, fp
 80051c8:	d107      	bne.n	80051da <_dtoa_r+0xac2>
 80051ca:	f000 f9cb 	bl	8005564 <__multadd>
 80051ce:	4607      	mov	r7, r0
 80051d0:	4605      	mov	r5, r0
 80051d2:	9b07      	ldr	r3, [sp, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	9307      	str	r3, [sp, #28]
 80051d8:	e774      	b.n	80050c4 <_dtoa_r+0x9ac>
 80051da:	f000 f9c3 	bl	8005564 <__multadd>
 80051de:	4629      	mov	r1, r5
 80051e0:	4607      	mov	r7, r0
 80051e2:	2300      	movs	r3, #0
 80051e4:	220a      	movs	r2, #10
 80051e6:	4658      	mov	r0, fp
 80051e8:	f000 f9bc 	bl	8005564 <__multadd>
 80051ec:	4605      	mov	r5, r0
 80051ee:	e7f0      	b.n	80051d2 <_dtoa_r+0xaba>
 80051f0:	9b00      	ldr	r3, [sp, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfcc      	ite	gt
 80051f6:	461e      	movgt	r6, r3
 80051f8:	2601      	movle	r6, #1
 80051fa:	4456      	add	r6, sl
 80051fc:	2700      	movs	r7, #0
 80051fe:	4649      	mov	r1, r9
 8005200:	2201      	movs	r2, #1
 8005202:	4658      	mov	r0, fp
 8005204:	f000 fb5a 	bl	80058bc <__lshift>
 8005208:	4621      	mov	r1, r4
 800520a:	4681      	mov	r9, r0
 800520c:	f000 fbc2 	bl	8005994 <__mcmp>
 8005210:	2800      	cmp	r0, #0
 8005212:	dcb0      	bgt.n	8005176 <_dtoa_r+0xa5e>
 8005214:	d102      	bne.n	800521c <_dtoa_r+0xb04>
 8005216:	f018 0f01 	tst.w	r8, #1
 800521a:	d1ac      	bne.n	8005176 <_dtoa_r+0xa5e>
 800521c:	4633      	mov	r3, r6
 800521e:	461e      	mov	r6, r3
 8005220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005224:	2a30      	cmp	r2, #48	@ 0x30
 8005226:	d0fa      	beq.n	800521e <_dtoa_r+0xb06>
 8005228:	e5c2      	b.n	8004db0 <_dtoa_r+0x698>
 800522a:	459a      	cmp	sl, r3
 800522c:	d1a4      	bne.n	8005178 <_dtoa_r+0xa60>
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	3301      	adds	r3, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	2331      	movs	r3, #49	@ 0x31
 8005236:	f88a 3000 	strb.w	r3, [sl]
 800523a:	e5b9      	b.n	8004db0 <_dtoa_r+0x698>
 800523c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800523e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800529c <_dtoa_r+0xb84>
 8005242:	b11b      	cbz	r3, 800524c <_dtoa_r+0xb34>
 8005244:	f10a 0308 	add.w	r3, sl, #8
 8005248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4650      	mov	r0, sl
 800524e:	b019      	add	sp, #100	@ 0x64
 8005250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005256:	2b01      	cmp	r3, #1
 8005258:	f77f ae37 	ble.w	8004eca <_dtoa_r+0x7b2>
 800525c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800525e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005260:	2001      	movs	r0, #1
 8005262:	e655      	b.n	8004f10 <_dtoa_r+0x7f8>
 8005264:	9b00      	ldr	r3, [sp, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f77f aed6 	ble.w	8005018 <_dtoa_r+0x900>
 800526c:	4656      	mov	r6, sl
 800526e:	4621      	mov	r1, r4
 8005270:	4648      	mov	r0, r9
 8005272:	f7ff f9c8 	bl	8004606 <quorem>
 8005276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800527a:	f806 8b01 	strb.w	r8, [r6], #1
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	eba6 020a 	sub.w	r2, r6, sl
 8005284:	4293      	cmp	r3, r2
 8005286:	ddb3      	ble.n	80051f0 <_dtoa_r+0xad8>
 8005288:	4649      	mov	r1, r9
 800528a:	2300      	movs	r3, #0
 800528c:	220a      	movs	r2, #10
 800528e:	4658      	mov	r0, fp
 8005290:	f000 f968 	bl	8005564 <__multadd>
 8005294:	4681      	mov	r9, r0
 8005296:	e7ea      	b.n	800526e <_dtoa_r+0xb56>
 8005298:	080067a8 	.word	0x080067a8
 800529c:	0800672c 	.word	0x0800672c

080052a0 <_free_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4605      	mov	r5, r0
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d041      	beq.n	800532c <_free_r+0x8c>
 80052a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ac:	1f0c      	subs	r4, r1, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfb8      	it	lt
 80052b2:	18e4      	addlt	r4, r4, r3
 80052b4:	f000 f8e8 	bl	8005488 <__malloc_lock>
 80052b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <_free_r+0x90>)
 80052ba:	6813      	ldr	r3, [r2, #0]
 80052bc:	b933      	cbnz	r3, 80052cc <_free_r+0x2c>
 80052be:	6063      	str	r3, [r4, #4]
 80052c0:	6014      	str	r4, [r2, #0]
 80052c2:	4628      	mov	r0, r5
 80052c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052c8:	f000 b8e4 	b.w	8005494 <__malloc_unlock>
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	d908      	bls.n	80052e2 <_free_r+0x42>
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	1821      	adds	r1, r4, r0
 80052d4:	428b      	cmp	r3, r1
 80052d6:	bf01      	itttt	eq
 80052d8:	6819      	ldreq	r1, [r3, #0]
 80052da:	685b      	ldreq	r3, [r3, #4]
 80052dc:	1809      	addeq	r1, r1, r0
 80052de:	6021      	streq	r1, [r4, #0]
 80052e0:	e7ed      	b.n	80052be <_free_r+0x1e>
 80052e2:	461a      	mov	r2, r3
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b10b      	cbz	r3, 80052ec <_free_r+0x4c>
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d9fa      	bls.n	80052e2 <_free_r+0x42>
 80052ec:	6811      	ldr	r1, [r2, #0]
 80052ee:	1850      	adds	r0, r2, r1
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d10b      	bne.n	800530c <_free_r+0x6c>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	4401      	add	r1, r0
 80052f8:	1850      	adds	r0, r2, r1
 80052fa:	4283      	cmp	r3, r0
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	d1e0      	bne.n	80052c2 <_free_r+0x22>
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	6053      	str	r3, [r2, #4]
 8005306:	4408      	add	r0, r1
 8005308:	6010      	str	r0, [r2, #0]
 800530a:	e7da      	b.n	80052c2 <_free_r+0x22>
 800530c:	d902      	bls.n	8005314 <_free_r+0x74>
 800530e:	230c      	movs	r3, #12
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	e7d6      	b.n	80052c2 <_free_r+0x22>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	1821      	adds	r1, r4, r0
 8005318:	428b      	cmp	r3, r1
 800531a:	bf04      	itt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	6063      	str	r3, [r4, #4]
 8005322:	bf04      	itt	eq
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	6054      	str	r4, [r2, #4]
 800532a:	e7ca      	b.n	80052c2 <_free_r+0x22>
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	200003f4 	.word	0x200003f4

08005334 <malloc>:
 8005334:	4b02      	ldr	r3, [pc, #8]	@ (8005340 <malloc+0xc>)
 8005336:	4601      	mov	r1, r0
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f000 b825 	b.w	8005388 <_malloc_r>
 800533e:	bf00      	nop
 8005340:	20000018 	.word	0x20000018

08005344 <sbrk_aligned>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4e0f      	ldr	r6, [pc, #60]	@ (8005384 <sbrk_aligned+0x40>)
 8005348:	460c      	mov	r4, r1
 800534a:	6831      	ldr	r1, [r6, #0]
 800534c:	4605      	mov	r5, r0
 800534e:	b911      	cbnz	r1, 8005356 <sbrk_aligned+0x12>
 8005350:	f000 fe46 	bl	8005fe0 <_sbrk_r>
 8005354:	6030      	str	r0, [r6, #0]
 8005356:	4621      	mov	r1, r4
 8005358:	4628      	mov	r0, r5
 800535a:	f000 fe41 	bl	8005fe0 <_sbrk_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	d103      	bne.n	800536a <sbrk_aligned+0x26>
 8005362:	f04f 34ff 	mov.w	r4, #4294967295
 8005366:	4620      	mov	r0, r4
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	1cc4      	adds	r4, r0, #3
 800536c:	f024 0403 	bic.w	r4, r4, #3
 8005370:	42a0      	cmp	r0, r4
 8005372:	d0f8      	beq.n	8005366 <sbrk_aligned+0x22>
 8005374:	1a21      	subs	r1, r4, r0
 8005376:	4628      	mov	r0, r5
 8005378:	f000 fe32 	bl	8005fe0 <_sbrk_r>
 800537c:	3001      	adds	r0, #1
 800537e:	d1f2      	bne.n	8005366 <sbrk_aligned+0x22>
 8005380:	e7ef      	b.n	8005362 <sbrk_aligned+0x1e>
 8005382:	bf00      	nop
 8005384:	200003f0 	.word	0x200003f0

08005388 <_malloc_r>:
 8005388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538c:	1ccd      	adds	r5, r1, #3
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	2d00      	cmp	r5, #0
 800539c:	4606      	mov	r6, r0
 800539e:	db01      	blt.n	80053a4 <_malloc_r+0x1c>
 80053a0:	42a9      	cmp	r1, r5
 80053a2:	d904      	bls.n	80053ae <_malloc_r+0x26>
 80053a4:	230c      	movs	r3, #12
 80053a6:	6033      	str	r3, [r6, #0]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005484 <_malloc_r+0xfc>
 80053b2:	f000 f869 	bl	8005488 <__malloc_lock>
 80053b6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ba:	461c      	mov	r4, r3
 80053bc:	bb44      	cbnz	r4, 8005410 <_malloc_r+0x88>
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	f7ff ffbf 	bl	8005344 <sbrk_aligned>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	4604      	mov	r4, r0
 80053ca:	d158      	bne.n	800547e <_malloc_r+0xf6>
 80053cc:	f8d8 4000 	ldr.w	r4, [r8]
 80053d0:	4627      	mov	r7, r4
 80053d2:	2f00      	cmp	r7, #0
 80053d4:	d143      	bne.n	800545e <_malloc_r+0xd6>
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	d04b      	beq.n	8005472 <_malloc_r+0xea>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4639      	mov	r1, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	eb04 0903 	add.w	r9, r4, r3
 80053e4:	f000 fdfc 	bl	8005fe0 <_sbrk_r>
 80053e8:	4581      	cmp	r9, r0
 80053ea:	d142      	bne.n	8005472 <_malloc_r+0xea>
 80053ec:	6821      	ldr	r1, [r4, #0]
 80053ee:	1a6d      	subs	r5, r5, r1
 80053f0:	4629      	mov	r1, r5
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7ff ffa6 	bl	8005344 <sbrk_aligned>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d03a      	beq.n	8005472 <_malloc_r+0xea>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	442b      	add	r3, r5
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	f8d8 3000 	ldr.w	r3, [r8]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	bb62      	cbnz	r2, 8005464 <_malloc_r+0xdc>
 800540a:	f8c8 7000 	str.w	r7, [r8]
 800540e:	e00f      	b.n	8005430 <_malloc_r+0xa8>
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	1b52      	subs	r2, r2, r5
 8005414:	d420      	bmi.n	8005458 <_malloc_r+0xd0>
 8005416:	2a0b      	cmp	r2, #11
 8005418:	d917      	bls.n	800544a <_malloc_r+0xc2>
 800541a:	1961      	adds	r1, r4, r5
 800541c:	42a3      	cmp	r3, r4
 800541e:	6025      	str	r5, [r4, #0]
 8005420:	bf18      	it	ne
 8005422:	6059      	strne	r1, [r3, #4]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	bf08      	it	eq
 8005428:	f8c8 1000 	streq.w	r1, [r8]
 800542c:	5162      	str	r2, [r4, r5]
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f82f 	bl	8005494 <__malloc_unlock>
 8005436:	f104 000b 	add.w	r0, r4, #11
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	f020 0007 	bic.w	r0, r0, #7
 8005440:	1ac2      	subs	r2, r0, r3
 8005442:	bf1c      	itt	ne
 8005444:	1a1b      	subne	r3, r3, r0
 8005446:	50a3      	strne	r3, [r4, r2]
 8005448:	e7af      	b.n	80053aa <_malloc_r+0x22>
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	42a3      	cmp	r3, r4
 800544e:	bf0c      	ite	eq
 8005450:	f8c8 2000 	streq.w	r2, [r8]
 8005454:	605a      	strne	r2, [r3, #4]
 8005456:	e7eb      	b.n	8005430 <_malloc_r+0xa8>
 8005458:	4623      	mov	r3, r4
 800545a:	6864      	ldr	r4, [r4, #4]
 800545c:	e7ae      	b.n	80053bc <_malloc_r+0x34>
 800545e:	463c      	mov	r4, r7
 8005460:	687f      	ldr	r7, [r7, #4]
 8005462:	e7b6      	b.n	80053d2 <_malloc_r+0x4a>
 8005464:	461a      	mov	r2, r3
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	42a3      	cmp	r3, r4
 800546a:	d1fb      	bne.n	8005464 <_malloc_r+0xdc>
 800546c:	2300      	movs	r3, #0
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e7de      	b.n	8005430 <_malloc_r+0xa8>
 8005472:	230c      	movs	r3, #12
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	4630      	mov	r0, r6
 8005478:	f000 f80c 	bl	8005494 <__malloc_unlock>
 800547c:	e794      	b.n	80053a8 <_malloc_r+0x20>
 800547e:	6005      	str	r5, [r0, #0]
 8005480:	e7d6      	b.n	8005430 <_malloc_r+0xa8>
 8005482:	bf00      	nop
 8005484:	200003f4 	.word	0x200003f4

08005488 <__malloc_lock>:
 8005488:	4801      	ldr	r0, [pc, #4]	@ (8005490 <__malloc_lock+0x8>)
 800548a:	f7ff b8ba 	b.w	8004602 <__retarget_lock_acquire_recursive>
 800548e:	bf00      	nop
 8005490:	200003ec 	.word	0x200003ec

08005494 <__malloc_unlock>:
 8005494:	4801      	ldr	r0, [pc, #4]	@ (800549c <__malloc_unlock+0x8>)
 8005496:	f7ff b8b5 	b.w	8004604 <__retarget_lock_release_recursive>
 800549a:	bf00      	nop
 800549c:	200003ec 	.word	0x200003ec

080054a0 <_Balloc>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	69c6      	ldr	r6, [r0, #28]
 80054a4:	4604      	mov	r4, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	b976      	cbnz	r6, 80054c8 <_Balloc+0x28>
 80054aa:	2010      	movs	r0, #16
 80054ac:	f7ff ff42 	bl	8005334 <malloc>
 80054b0:	4602      	mov	r2, r0
 80054b2:	61e0      	str	r0, [r4, #28]
 80054b4:	b920      	cbnz	r0, 80054c0 <_Balloc+0x20>
 80054b6:	4b18      	ldr	r3, [pc, #96]	@ (8005518 <_Balloc+0x78>)
 80054b8:	4818      	ldr	r0, [pc, #96]	@ (800551c <_Balloc+0x7c>)
 80054ba:	216b      	movs	r1, #107	@ 0x6b
 80054bc:	f000 fdae 	bl	800601c <__assert_func>
 80054c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054c4:	6006      	str	r6, [r0, #0]
 80054c6:	60c6      	str	r6, [r0, #12]
 80054c8:	69e6      	ldr	r6, [r4, #28]
 80054ca:	68f3      	ldr	r3, [r6, #12]
 80054cc:	b183      	cbz	r3, 80054f0 <_Balloc+0x50>
 80054ce:	69e3      	ldr	r3, [r4, #28]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054d6:	b9b8      	cbnz	r0, 8005508 <_Balloc+0x68>
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f605 	lsl.w	r6, r1, r5
 80054de:	1d72      	adds	r2, r6, #5
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fdb8 	bl	8006058 <_calloc_r>
 80054e8:	b160      	cbz	r0, 8005504 <_Balloc+0x64>
 80054ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054ee:	e00e      	b.n	800550e <_Balloc+0x6e>
 80054f0:	2221      	movs	r2, #33	@ 0x21
 80054f2:	2104      	movs	r1, #4
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fdaf 	bl	8006058 <_calloc_r>
 80054fa:	69e3      	ldr	r3, [r4, #28]
 80054fc:	60f0      	str	r0, [r6, #12]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e4      	bne.n	80054ce <_Balloc+0x2e>
 8005504:	2000      	movs	r0, #0
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	6802      	ldr	r2, [r0, #0]
 800550a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800550e:	2300      	movs	r3, #0
 8005510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005514:	e7f7      	b.n	8005506 <_Balloc+0x66>
 8005516:	bf00      	nop
 8005518:	08006739 	.word	0x08006739
 800551c:	080067b9 	.word	0x080067b9

08005520 <_Bfree>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	69c6      	ldr	r6, [r0, #28]
 8005524:	4605      	mov	r5, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b976      	cbnz	r6, 8005548 <_Bfree+0x28>
 800552a:	2010      	movs	r0, #16
 800552c:	f7ff ff02 	bl	8005334 <malloc>
 8005530:	4602      	mov	r2, r0
 8005532:	61e8      	str	r0, [r5, #28]
 8005534:	b920      	cbnz	r0, 8005540 <_Bfree+0x20>
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <_Bfree+0x3c>)
 8005538:	4809      	ldr	r0, [pc, #36]	@ (8005560 <_Bfree+0x40>)
 800553a:	218f      	movs	r1, #143	@ 0x8f
 800553c:	f000 fd6e 	bl	800601c <__assert_func>
 8005540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005544:	6006      	str	r6, [r0, #0]
 8005546:	60c6      	str	r6, [r0, #12]
 8005548:	b13c      	cbz	r4, 800555a <_Bfree+0x3a>
 800554a:	69eb      	ldr	r3, [r5, #28]
 800554c:	6862      	ldr	r2, [r4, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005554:	6021      	str	r1, [r4, #0]
 8005556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	08006739 	.word	0x08006739
 8005560:	080067b9 	.word	0x080067b9

08005564 <__multadd>:
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	690d      	ldr	r5, [r1, #16]
 800556a:	4607      	mov	r7, r0
 800556c:	460c      	mov	r4, r1
 800556e:	461e      	mov	r6, r3
 8005570:	f101 0c14 	add.w	ip, r1, #20
 8005574:	2000      	movs	r0, #0
 8005576:	f8dc 3000 	ldr.w	r3, [ip]
 800557a:	b299      	uxth	r1, r3
 800557c:	fb02 6101 	mla	r1, r2, r1, r6
 8005580:	0c1e      	lsrs	r6, r3, #16
 8005582:	0c0b      	lsrs	r3, r1, #16
 8005584:	fb02 3306 	mla	r3, r2, r6, r3
 8005588:	b289      	uxth	r1, r1
 800558a:	3001      	adds	r0, #1
 800558c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005590:	4285      	cmp	r5, r0
 8005592:	f84c 1b04 	str.w	r1, [ip], #4
 8005596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800559a:	dcec      	bgt.n	8005576 <__multadd+0x12>
 800559c:	b30e      	cbz	r6, 80055e2 <__multadd+0x7e>
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	42ab      	cmp	r3, r5
 80055a2:	dc19      	bgt.n	80055d8 <__multadd+0x74>
 80055a4:	6861      	ldr	r1, [r4, #4]
 80055a6:	4638      	mov	r0, r7
 80055a8:	3101      	adds	r1, #1
 80055aa:	f7ff ff79 	bl	80054a0 <_Balloc>
 80055ae:	4680      	mov	r8, r0
 80055b0:	b928      	cbnz	r0, 80055be <__multadd+0x5a>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <__multadd+0x84>)
 80055b6:	480d      	ldr	r0, [pc, #52]	@ (80055ec <__multadd+0x88>)
 80055b8:	21ba      	movs	r1, #186	@ 0xba
 80055ba:	f000 fd2f 	bl	800601c <__assert_func>
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	3202      	adds	r2, #2
 80055c2:	f104 010c 	add.w	r1, r4, #12
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	300c      	adds	r0, #12
 80055ca:	f000 fd19 	bl	8006000 <memcpy>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ffa5 	bl	8005520 <_Bfree>
 80055d6:	4644      	mov	r4, r8
 80055d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055dc:	3501      	adds	r5, #1
 80055de:	615e      	str	r6, [r3, #20]
 80055e0:	6125      	str	r5, [r4, #16]
 80055e2:	4620      	mov	r0, r4
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e8:	080067a8 	.word	0x080067a8
 80055ec:	080067b9 	.word	0x080067b9

080055f0 <__hi0bits>:
 80055f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80055f4:	4603      	mov	r3, r0
 80055f6:	bf36      	itet	cc
 80055f8:	0403      	lslcc	r3, r0, #16
 80055fa:	2000      	movcs	r0, #0
 80055fc:	2010      	movcc	r0, #16
 80055fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005602:	bf3c      	itt	cc
 8005604:	021b      	lslcc	r3, r3, #8
 8005606:	3008      	addcc	r0, #8
 8005608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800560c:	bf3c      	itt	cc
 800560e:	011b      	lslcc	r3, r3, #4
 8005610:	3004      	addcc	r0, #4
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	bf3c      	itt	cc
 8005618:	009b      	lslcc	r3, r3, #2
 800561a:	3002      	addcc	r0, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	db05      	blt.n	800562c <__hi0bits+0x3c>
 8005620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005624:	f100 0001 	add.w	r0, r0, #1
 8005628:	bf08      	it	eq
 800562a:	2020      	moveq	r0, #32
 800562c:	4770      	bx	lr

0800562e <__lo0bits>:
 800562e:	6803      	ldr	r3, [r0, #0]
 8005630:	4602      	mov	r2, r0
 8005632:	f013 0007 	ands.w	r0, r3, #7
 8005636:	d00b      	beq.n	8005650 <__lo0bits+0x22>
 8005638:	07d9      	lsls	r1, r3, #31
 800563a:	d421      	bmi.n	8005680 <__lo0bits+0x52>
 800563c:	0798      	lsls	r0, r3, #30
 800563e:	bf49      	itett	mi
 8005640:	085b      	lsrmi	r3, r3, #1
 8005642:	089b      	lsrpl	r3, r3, #2
 8005644:	2001      	movmi	r0, #1
 8005646:	6013      	strmi	r3, [r2, #0]
 8005648:	bf5c      	itt	pl
 800564a:	6013      	strpl	r3, [r2, #0]
 800564c:	2002      	movpl	r0, #2
 800564e:	4770      	bx	lr
 8005650:	b299      	uxth	r1, r3
 8005652:	b909      	cbnz	r1, 8005658 <__lo0bits+0x2a>
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	2010      	movs	r0, #16
 8005658:	b2d9      	uxtb	r1, r3
 800565a:	b909      	cbnz	r1, 8005660 <__lo0bits+0x32>
 800565c:	3008      	adds	r0, #8
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	0719      	lsls	r1, r3, #28
 8005662:	bf04      	itt	eq
 8005664:	091b      	lsreq	r3, r3, #4
 8005666:	3004      	addeq	r0, #4
 8005668:	0799      	lsls	r1, r3, #30
 800566a:	bf04      	itt	eq
 800566c:	089b      	lsreq	r3, r3, #2
 800566e:	3002      	addeq	r0, #2
 8005670:	07d9      	lsls	r1, r3, #31
 8005672:	d403      	bmi.n	800567c <__lo0bits+0x4e>
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	f100 0001 	add.w	r0, r0, #1
 800567a:	d003      	beq.n	8005684 <__lo0bits+0x56>
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4770      	bx	lr
 8005680:	2000      	movs	r0, #0
 8005682:	4770      	bx	lr
 8005684:	2020      	movs	r0, #32
 8005686:	4770      	bx	lr

08005688 <__i2b>:
 8005688:	b510      	push	{r4, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	2101      	movs	r1, #1
 800568e:	f7ff ff07 	bl	80054a0 <_Balloc>
 8005692:	4602      	mov	r2, r0
 8005694:	b928      	cbnz	r0, 80056a2 <__i2b+0x1a>
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <__i2b+0x24>)
 8005698:	4805      	ldr	r0, [pc, #20]	@ (80056b0 <__i2b+0x28>)
 800569a:	f240 1145 	movw	r1, #325	@ 0x145
 800569e:	f000 fcbd 	bl	800601c <__assert_func>
 80056a2:	2301      	movs	r3, #1
 80056a4:	6144      	str	r4, [r0, #20]
 80056a6:	6103      	str	r3, [r0, #16]
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	bf00      	nop
 80056ac:	080067a8 	.word	0x080067a8
 80056b0:	080067b9 	.word	0x080067b9

080056b4 <__multiply>:
 80056b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b8:	4614      	mov	r4, r2
 80056ba:	690a      	ldr	r2, [r1, #16]
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	bfa8      	it	ge
 80056c2:	4623      	movge	r3, r4
 80056c4:	460f      	mov	r7, r1
 80056c6:	bfa4      	itt	ge
 80056c8:	460c      	movge	r4, r1
 80056ca:	461f      	movge	r7, r3
 80056cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80056d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80056d4:	68a3      	ldr	r3, [r4, #8]
 80056d6:	6861      	ldr	r1, [r4, #4]
 80056d8:	eb0a 0609 	add.w	r6, sl, r9
 80056dc:	42b3      	cmp	r3, r6
 80056de:	b085      	sub	sp, #20
 80056e0:	bfb8      	it	lt
 80056e2:	3101      	addlt	r1, #1
 80056e4:	f7ff fedc 	bl	80054a0 <_Balloc>
 80056e8:	b930      	cbnz	r0, 80056f8 <__multiply+0x44>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b44      	ldr	r3, [pc, #272]	@ (8005800 <__multiply+0x14c>)
 80056ee:	4845      	ldr	r0, [pc, #276]	@ (8005804 <__multiply+0x150>)
 80056f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80056f4:	f000 fc92 	bl	800601c <__assert_func>
 80056f8:	f100 0514 	add.w	r5, r0, #20
 80056fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005700:	462b      	mov	r3, r5
 8005702:	2200      	movs	r2, #0
 8005704:	4543      	cmp	r3, r8
 8005706:	d321      	bcc.n	800574c <__multiply+0x98>
 8005708:	f107 0114 	add.w	r1, r7, #20
 800570c:	f104 0214 	add.w	r2, r4, #20
 8005710:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005714:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	1b13      	subs	r3, r2, r4
 800571c:	3b15      	subs	r3, #21
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	3304      	adds	r3, #4
 8005724:	f104 0715 	add.w	r7, r4, #21
 8005728:	42ba      	cmp	r2, r7
 800572a:	bf38      	it	cc
 800572c:	2304      	movcc	r3, #4
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	9103      	str	r1, [sp, #12]
 8005734:	428b      	cmp	r3, r1
 8005736:	d80c      	bhi.n	8005752 <__multiply+0x9e>
 8005738:	2e00      	cmp	r6, #0
 800573a:	dd03      	ble.n	8005744 <__multiply+0x90>
 800573c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05b      	beq.n	80057fc <__multiply+0x148>
 8005744:	6106      	str	r6, [r0, #16]
 8005746:	b005      	add	sp, #20
 8005748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574c:	f843 2b04 	str.w	r2, [r3], #4
 8005750:	e7d8      	b.n	8005704 <__multiply+0x50>
 8005752:	f8b1 a000 	ldrh.w	sl, [r1]
 8005756:	f1ba 0f00 	cmp.w	sl, #0
 800575a:	d024      	beq.n	80057a6 <__multiply+0xf2>
 800575c:	f104 0e14 	add.w	lr, r4, #20
 8005760:	46a9      	mov	r9, r5
 8005762:	f04f 0c00 	mov.w	ip, #0
 8005766:	f85e 7b04 	ldr.w	r7, [lr], #4
 800576a:	f8d9 3000 	ldr.w	r3, [r9]
 800576e:	fa1f fb87 	uxth.w	fp, r7
 8005772:	b29b      	uxth	r3, r3
 8005774:	fb0a 330b 	mla	r3, sl, fp, r3
 8005778:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800577c:	f8d9 7000 	ldr.w	r7, [r9]
 8005780:	4463      	add	r3, ip
 8005782:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005786:	fb0a c70b 	mla	r7, sl, fp, ip
 800578a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005794:	4572      	cmp	r2, lr
 8005796:	f849 3b04 	str.w	r3, [r9], #4
 800579a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800579e:	d8e2      	bhi.n	8005766 <__multiply+0xb2>
 80057a0:	9b01      	ldr	r3, [sp, #4]
 80057a2:	f845 c003 	str.w	ip, [r5, r3]
 80057a6:	9b03      	ldr	r3, [sp, #12]
 80057a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80057ac:	3104      	adds	r1, #4
 80057ae:	f1b9 0f00 	cmp.w	r9, #0
 80057b2:	d021      	beq.n	80057f8 <__multiply+0x144>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	f104 0c14 	add.w	ip, r4, #20
 80057ba:	46ae      	mov	lr, r5
 80057bc:	f04f 0a00 	mov.w	sl, #0
 80057c0:	f8bc b000 	ldrh.w	fp, [ip]
 80057c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80057c8:	fb09 770b 	mla	r7, r9, fp, r7
 80057cc:	4457      	add	r7, sl
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057d4:	f84e 3b04 	str.w	r3, [lr], #4
 80057d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057e0:	f8be 3000 	ldrh.w	r3, [lr]
 80057e4:	fb09 330a 	mla	r3, r9, sl, r3
 80057e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80057ec:	4562      	cmp	r2, ip
 80057ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057f2:	d8e5      	bhi.n	80057c0 <__multiply+0x10c>
 80057f4:	9f01      	ldr	r7, [sp, #4]
 80057f6:	51eb      	str	r3, [r5, r7]
 80057f8:	3504      	adds	r5, #4
 80057fa:	e799      	b.n	8005730 <__multiply+0x7c>
 80057fc:	3e01      	subs	r6, #1
 80057fe:	e79b      	b.n	8005738 <__multiply+0x84>
 8005800:	080067a8 	.word	0x080067a8
 8005804:	080067b9 	.word	0x080067b9

08005808 <__pow5mult>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	4615      	mov	r5, r2
 800580e:	f012 0203 	ands.w	r2, r2, #3
 8005812:	4607      	mov	r7, r0
 8005814:	460e      	mov	r6, r1
 8005816:	d007      	beq.n	8005828 <__pow5mult+0x20>
 8005818:	4c25      	ldr	r4, [pc, #148]	@ (80058b0 <__pow5mult+0xa8>)
 800581a:	3a01      	subs	r2, #1
 800581c:	2300      	movs	r3, #0
 800581e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005822:	f7ff fe9f 	bl	8005564 <__multadd>
 8005826:	4606      	mov	r6, r0
 8005828:	10ad      	asrs	r5, r5, #2
 800582a:	d03d      	beq.n	80058a8 <__pow5mult+0xa0>
 800582c:	69fc      	ldr	r4, [r7, #28]
 800582e:	b97c      	cbnz	r4, 8005850 <__pow5mult+0x48>
 8005830:	2010      	movs	r0, #16
 8005832:	f7ff fd7f 	bl	8005334 <malloc>
 8005836:	4602      	mov	r2, r0
 8005838:	61f8      	str	r0, [r7, #28]
 800583a:	b928      	cbnz	r0, 8005848 <__pow5mult+0x40>
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <__pow5mult+0xac>)
 800583e:	481e      	ldr	r0, [pc, #120]	@ (80058b8 <__pow5mult+0xb0>)
 8005840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005844:	f000 fbea 	bl	800601c <__assert_func>
 8005848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800584c:	6004      	str	r4, [r0, #0]
 800584e:	60c4      	str	r4, [r0, #12]
 8005850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005858:	b94c      	cbnz	r4, 800586e <__pow5mult+0x66>
 800585a:	f240 2171 	movw	r1, #625	@ 0x271
 800585e:	4638      	mov	r0, r7
 8005860:	f7ff ff12 	bl	8005688 <__i2b>
 8005864:	2300      	movs	r3, #0
 8005866:	f8c8 0008 	str.w	r0, [r8, #8]
 800586a:	4604      	mov	r4, r0
 800586c:	6003      	str	r3, [r0, #0]
 800586e:	f04f 0900 	mov.w	r9, #0
 8005872:	07eb      	lsls	r3, r5, #31
 8005874:	d50a      	bpl.n	800588c <__pow5mult+0x84>
 8005876:	4631      	mov	r1, r6
 8005878:	4622      	mov	r2, r4
 800587a:	4638      	mov	r0, r7
 800587c:	f7ff ff1a 	bl	80056b4 <__multiply>
 8005880:	4631      	mov	r1, r6
 8005882:	4680      	mov	r8, r0
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff fe4b 	bl	8005520 <_Bfree>
 800588a:	4646      	mov	r6, r8
 800588c:	106d      	asrs	r5, r5, #1
 800588e:	d00b      	beq.n	80058a8 <__pow5mult+0xa0>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	b938      	cbnz	r0, 80058a4 <__pow5mult+0x9c>
 8005894:	4622      	mov	r2, r4
 8005896:	4621      	mov	r1, r4
 8005898:	4638      	mov	r0, r7
 800589a:	f7ff ff0b 	bl	80056b4 <__multiply>
 800589e:	6020      	str	r0, [r4, #0]
 80058a0:	f8c0 9000 	str.w	r9, [r0]
 80058a4:	4604      	mov	r4, r0
 80058a6:	e7e4      	b.n	8005872 <__pow5mult+0x6a>
 80058a8:	4630      	mov	r0, r6
 80058aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ae:	bf00      	nop
 80058b0:	08006814 	.word	0x08006814
 80058b4:	08006739 	.word	0x08006739
 80058b8:	080067b9 	.word	0x080067b9

080058bc <__lshift>:
 80058bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058ca:	68a3      	ldr	r3, [r4, #8]
 80058cc:	4607      	mov	r7, r0
 80058ce:	4691      	mov	r9, r2
 80058d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058d4:	f108 0601 	add.w	r6, r8, #1
 80058d8:	42b3      	cmp	r3, r6
 80058da:	db0b      	blt.n	80058f4 <__lshift+0x38>
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff fddf 	bl	80054a0 <_Balloc>
 80058e2:	4605      	mov	r5, r0
 80058e4:	b948      	cbnz	r0, 80058fa <__lshift+0x3e>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b28      	ldr	r3, [pc, #160]	@ (800598c <__lshift+0xd0>)
 80058ea:	4829      	ldr	r0, [pc, #164]	@ (8005990 <__lshift+0xd4>)
 80058ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80058f0:	f000 fb94 	bl	800601c <__assert_func>
 80058f4:	3101      	adds	r1, #1
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	e7ee      	b.n	80058d8 <__lshift+0x1c>
 80058fa:	2300      	movs	r3, #0
 80058fc:	f100 0114 	add.w	r1, r0, #20
 8005900:	f100 0210 	add.w	r2, r0, #16
 8005904:	4618      	mov	r0, r3
 8005906:	4553      	cmp	r3, sl
 8005908:	db33      	blt.n	8005972 <__lshift+0xb6>
 800590a:	6920      	ldr	r0, [r4, #16]
 800590c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005910:	f104 0314 	add.w	r3, r4, #20
 8005914:	f019 091f 	ands.w	r9, r9, #31
 8005918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800591c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005920:	d02b      	beq.n	800597a <__lshift+0xbe>
 8005922:	f1c9 0e20 	rsb	lr, r9, #32
 8005926:	468a      	mov	sl, r1
 8005928:	2200      	movs	r2, #0
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	fa00 f009 	lsl.w	r0, r0, r9
 8005930:	4310      	orrs	r0, r2
 8005932:	f84a 0b04 	str.w	r0, [sl], #4
 8005936:	f853 2b04 	ldr.w	r2, [r3], #4
 800593a:	459c      	cmp	ip, r3
 800593c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005940:	d8f3      	bhi.n	800592a <__lshift+0x6e>
 8005942:	ebac 0304 	sub.w	r3, ip, r4
 8005946:	3b15      	subs	r3, #21
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	3304      	adds	r3, #4
 800594e:	f104 0015 	add.w	r0, r4, #21
 8005952:	4584      	cmp	ip, r0
 8005954:	bf38      	it	cc
 8005956:	2304      	movcc	r3, #4
 8005958:	50ca      	str	r2, [r1, r3]
 800595a:	b10a      	cbz	r2, 8005960 <__lshift+0xa4>
 800595c:	f108 0602 	add.w	r6, r8, #2
 8005960:	3e01      	subs	r6, #1
 8005962:	4638      	mov	r0, r7
 8005964:	612e      	str	r6, [r5, #16]
 8005966:	4621      	mov	r1, r4
 8005968:	f7ff fdda 	bl	8005520 <_Bfree>
 800596c:	4628      	mov	r0, r5
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	f842 0f04 	str.w	r0, [r2, #4]!
 8005976:	3301      	adds	r3, #1
 8005978:	e7c5      	b.n	8005906 <__lshift+0x4a>
 800597a:	3904      	subs	r1, #4
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	f841 2f04 	str.w	r2, [r1, #4]!
 8005984:	459c      	cmp	ip, r3
 8005986:	d8f9      	bhi.n	800597c <__lshift+0xc0>
 8005988:	e7ea      	b.n	8005960 <__lshift+0xa4>
 800598a:	bf00      	nop
 800598c:	080067a8 	.word	0x080067a8
 8005990:	080067b9 	.word	0x080067b9

08005994 <__mcmp>:
 8005994:	690a      	ldr	r2, [r1, #16]
 8005996:	4603      	mov	r3, r0
 8005998:	6900      	ldr	r0, [r0, #16]
 800599a:	1a80      	subs	r0, r0, r2
 800599c:	b530      	push	{r4, r5, lr}
 800599e:	d10e      	bne.n	80059be <__mcmp+0x2a>
 80059a0:	3314      	adds	r3, #20
 80059a2:	3114      	adds	r1, #20
 80059a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059b4:	4295      	cmp	r5, r2
 80059b6:	d003      	beq.n	80059c0 <__mcmp+0x2c>
 80059b8:	d205      	bcs.n	80059c6 <__mcmp+0x32>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	bd30      	pop	{r4, r5, pc}
 80059c0:	42a3      	cmp	r3, r4
 80059c2:	d3f3      	bcc.n	80059ac <__mcmp+0x18>
 80059c4:	e7fb      	b.n	80059be <__mcmp+0x2a>
 80059c6:	2001      	movs	r0, #1
 80059c8:	e7f9      	b.n	80059be <__mcmp+0x2a>
	...

080059cc <__mdiff>:
 80059cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	4689      	mov	r9, r1
 80059d2:	4606      	mov	r6, r0
 80059d4:	4611      	mov	r1, r2
 80059d6:	4648      	mov	r0, r9
 80059d8:	4614      	mov	r4, r2
 80059da:	f7ff ffdb 	bl	8005994 <__mcmp>
 80059de:	1e05      	subs	r5, r0, #0
 80059e0:	d112      	bne.n	8005a08 <__mdiff+0x3c>
 80059e2:	4629      	mov	r1, r5
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff fd5b 	bl	80054a0 <_Balloc>
 80059ea:	4602      	mov	r2, r0
 80059ec:	b928      	cbnz	r0, 80059fa <__mdiff+0x2e>
 80059ee:	4b3f      	ldr	r3, [pc, #252]	@ (8005aec <__mdiff+0x120>)
 80059f0:	f240 2137 	movw	r1, #567	@ 0x237
 80059f4:	483e      	ldr	r0, [pc, #248]	@ (8005af0 <__mdiff+0x124>)
 80059f6:	f000 fb11 	bl	800601c <__assert_func>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a00:	4610      	mov	r0, r2
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	bfbc      	itt	lt
 8005a0a:	464b      	movlt	r3, r9
 8005a0c:	46a1      	movlt	r9, r4
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a14:	bfba      	itte	lt
 8005a16:	461c      	movlt	r4, r3
 8005a18:	2501      	movlt	r5, #1
 8005a1a:	2500      	movge	r5, #0
 8005a1c:	f7ff fd40 	bl	80054a0 <_Balloc>
 8005a20:	4602      	mov	r2, r0
 8005a22:	b918      	cbnz	r0, 8005a2c <__mdiff+0x60>
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <__mdiff+0x120>)
 8005a26:	f240 2145 	movw	r1, #581	@ 0x245
 8005a2a:	e7e3      	b.n	80059f4 <__mdiff+0x28>
 8005a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a30:	6926      	ldr	r6, [r4, #16]
 8005a32:	60c5      	str	r5, [r0, #12]
 8005a34:	f109 0310 	add.w	r3, r9, #16
 8005a38:	f109 0514 	add.w	r5, r9, #20
 8005a3c:	f104 0e14 	add.w	lr, r4, #20
 8005a40:	f100 0b14 	add.w	fp, r0, #20
 8005a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	46d9      	mov	r9, fp
 8005a50:	f04f 0c00 	mov.w	ip, #0
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	fa1f f38a 	uxth.w	r3, sl
 8005a64:	4619      	mov	r1, r3
 8005a66:	b283      	uxth	r3, r0
 8005a68:	1acb      	subs	r3, r1, r3
 8005a6a:	0c00      	lsrs	r0, r0, #16
 8005a6c:	4463      	add	r3, ip
 8005a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a7c:	4576      	cmp	r6, lr
 8005a7e:	f849 3b04 	str.w	r3, [r9], #4
 8005a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a86:	d8e5      	bhi.n	8005a54 <__mdiff+0x88>
 8005a88:	1b33      	subs	r3, r6, r4
 8005a8a:	3b15      	subs	r3, #21
 8005a8c:	f023 0303 	bic.w	r3, r3, #3
 8005a90:	3415      	adds	r4, #21
 8005a92:	3304      	adds	r3, #4
 8005a94:	42a6      	cmp	r6, r4
 8005a96:	bf38      	it	cc
 8005a98:	2304      	movcc	r3, #4
 8005a9a:	441d      	add	r5, r3
 8005a9c:	445b      	add	r3, fp
 8005a9e:	461e      	mov	r6, r3
 8005aa0:	462c      	mov	r4, r5
 8005aa2:	4544      	cmp	r4, r8
 8005aa4:	d30e      	bcc.n	8005ac4 <__mdiff+0xf8>
 8005aa6:	f108 0103 	add.w	r1, r8, #3
 8005aaa:	1b49      	subs	r1, r1, r5
 8005aac:	f021 0103 	bic.w	r1, r1, #3
 8005ab0:	3d03      	subs	r5, #3
 8005ab2:	45a8      	cmp	r8, r5
 8005ab4:	bf38      	it	cc
 8005ab6:	2100      	movcc	r1, #0
 8005ab8:	440b      	add	r3, r1
 8005aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005abe:	b191      	cbz	r1, 8005ae6 <__mdiff+0x11a>
 8005ac0:	6117      	str	r7, [r2, #16]
 8005ac2:	e79d      	b.n	8005a00 <__mdiff+0x34>
 8005ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ac8:	46e6      	mov	lr, ip
 8005aca:	0c08      	lsrs	r0, r1, #16
 8005acc:	fa1c fc81 	uxtah	ip, ip, r1
 8005ad0:	4471      	add	r1, lr
 8005ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ad6:	b289      	uxth	r1, r1
 8005ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005adc:	f846 1b04 	str.w	r1, [r6], #4
 8005ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ae4:	e7dd      	b.n	8005aa2 <__mdiff+0xd6>
 8005ae6:	3f01      	subs	r7, #1
 8005ae8:	e7e7      	b.n	8005aba <__mdiff+0xee>
 8005aea:	bf00      	nop
 8005aec:	080067a8 	.word	0x080067a8
 8005af0:	080067b9 	.word	0x080067b9

08005af4 <__d2b>:
 8005af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	460f      	mov	r7, r1
 8005afa:	2101      	movs	r1, #1
 8005afc:	ec59 8b10 	vmov	r8, r9, d0
 8005b00:	4616      	mov	r6, r2
 8005b02:	f7ff fccd 	bl	80054a0 <_Balloc>
 8005b06:	4604      	mov	r4, r0
 8005b08:	b930      	cbnz	r0, 8005b18 <__d2b+0x24>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <__d2b+0xa8>)
 8005b0e:	4824      	ldr	r0, [pc, #144]	@ (8005ba0 <__d2b+0xac>)
 8005b10:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b14:	f000 fa82 	bl	800601c <__assert_func>
 8005b18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b20:	b10d      	cbz	r5, 8005b26 <__d2b+0x32>
 8005b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	f1b8 0300 	subs.w	r3, r8, #0
 8005b2c:	d023      	beq.n	8005b76 <__d2b+0x82>
 8005b2e:	4668      	mov	r0, sp
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f7ff fd7c 	bl	800562e <__lo0bits>
 8005b36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b3a:	b1d0      	cbz	r0, 8005b72 <__d2b+0x7e>
 8005b3c:	f1c0 0320 	rsb	r3, r0, #32
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	430b      	orrs	r3, r1
 8005b46:	40c2      	lsrs	r2, r0
 8005b48:	6163      	str	r3, [r4, #20]
 8005b4a:	9201      	str	r2, [sp, #4]
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	61a3      	str	r3, [r4, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf0c      	ite	eq
 8005b54:	2201      	moveq	r2, #1
 8005b56:	2202      	movne	r2, #2
 8005b58:	6122      	str	r2, [r4, #16]
 8005b5a:	b1a5      	cbz	r5, 8005b86 <__d2b+0x92>
 8005b5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b60:	4405      	add	r5, r0
 8005b62:	603d      	str	r5, [r7, #0]
 8005b64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b68:	6030      	str	r0, [r6, #0]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	b003      	add	sp, #12
 8005b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b72:	6161      	str	r1, [r4, #20]
 8005b74:	e7ea      	b.n	8005b4c <__d2b+0x58>
 8005b76:	a801      	add	r0, sp, #4
 8005b78:	f7ff fd59 	bl	800562e <__lo0bits>
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	3020      	adds	r0, #32
 8005b82:	2201      	movs	r2, #1
 8005b84:	e7e8      	b.n	8005b58 <__d2b+0x64>
 8005b86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b8e:	6038      	str	r0, [r7, #0]
 8005b90:	6918      	ldr	r0, [r3, #16]
 8005b92:	f7ff fd2d 	bl	80055f0 <__hi0bits>
 8005b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b9a:	e7e5      	b.n	8005b68 <__d2b+0x74>
 8005b9c:	080067a8 	.word	0x080067a8
 8005ba0:	080067b9 	.word	0x080067b9

08005ba4 <__ssputs_r>:
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	688e      	ldr	r6, [r1, #8]
 8005baa:	461f      	mov	r7, r3
 8005bac:	42be      	cmp	r6, r7
 8005bae:	680b      	ldr	r3, [r1, #0]
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	4690      	mov	r8, r2
 8005bb6:	d82d      	bhi.n	8005c14 <__ssputs_r+0x70>
 8005bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bc0:	d026      	beq.n	8005c10 <__ssputs_r+0x6c>
 8005bc2:	6965      	ldr	r5, [r4, #20]
 8005bc4:	6909      	ldr	r1, [r1, #16]
 8005bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bca:	eba3 0901 	sub.w	r9, r3, r1
 8005bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd2:	1c7b      	adds	r3, r7, #1
 8005bd4:	444b      	add	r3, r9
 8005bd6:	106d      	asrs	r5, r5, #1
 8005bd8:	429d      	cmp	r5, r3
 8005bda:	bf38      	it	cc
 8005bdc:	461d      	movcc	r5, r3
 8005bde:	0553      	lsls	r3, r2, #21
 8005be0:	d527      	bpl.n	8005c32 <__ssputs_r+0x8e>
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7ff fbd0 	bl	8005388 <_malloc_r>
 8005be8:	4606      	mov	r6, r0
 8005bea:	b360      	cbz	r0, 8005c46 <__ssputs_r+0xa2>
 8005bec:	6921      	ldr	r1, [r4, #16]
 8005bee:	464a      	mov	r2, r9
 8005bf0:	f000 fa06 	bl	8006000 <memcpy>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	6126      	str	r6, [r4, #16]
 8005c02:	6165      	str	r5, [r4, #20]
 8005c04:	444e      	add	r6, r9
 8005c06:	eba5 0509 	sub.w	r5, r5, r9
 8005c0a:	6026      	str	r6, [r4, #0]
 8005c0c:	60a5      	str	r5, [r4, #8]
 8005c0e:	463e      	mov	r6, r7
 8005c10:	42be      	cmp	r6, r7
 8005c12:	d900      	bls.n	8005c16 <__ssputs_r+0x72>
 8005c14:	463e      	mov	r6, r7
 8005c16:	6820      	ldr	r0, [r4, #0]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	f000 f9c6 	bl	8005fac <memmove>
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	1b9b      	subs	r3, r3, r6
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	4433      	add	r3, r6
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c32:	462a      	mov	r2, r5
 8005c34:	f000 fa36 	bl	80060a4 <_realloc_r>
 8005c38:	4606      	mov	r6, r0
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d1e0      	bne.n	8005c00 <__ssputs_r+0x5c>
 8005c3e:	6921      	ldr	r1, [r4, #16]
 8005c40:	4650      	mov	r0, sl
 8005c42:	f7ff fb2d 	bl	80052a0 <_free_r>
 8005c46:	230c      	movs	r3, #12
 8005c48:	f8ca 3000 	str.w	r3, [sl]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	e7e9      	b.n	8005c2e <__ssputs_r+0x8a>
	...

08005c5c <_svfiprintf_r>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	4698      	mov	r8, r3
 8005c62:	898b      	ldrh	r3, [r1, #12]
 8005c64:	061b      	lsls	r3, r3, #24
 8005c66:	b09d      	sub	sp, #116	@ 0x74
 8005c68:	4607      	mov	r7, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	d510      	bpl.n	8005c92 <_svfiprintf_r+0x36>
 8005c70:	690b      	ldr	r3, [r1, #16]
 8005c72:	b973      	cbnz	r3, 8005c92 <_svfiprintf_r+0x36>
 8005c74:	2140      	movs	r1, #64	@ 0x40
 8005c76:	f7ff fb87 	bl	8005388 <_malloc_r>
 8005c7a:	6028      	str	r0, [r5, #0]
 8005c7c:	6128      	str	r0, [r5, #16]
 8005c7e:	b930      	cbnz	r0, 8005c8e <_svfiprintf_r+0x32>
 8005c80:	230c      	movs	r3, #12
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b01d      	add	sp, #116	@ 0x74
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	2340      	movs	r3, #64	@ 0x40
 8005c90:	616b      	str	r3, [r5, #20]
 8005c92:	2300      	movs	r3, #0
 8005c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c96:	2320      	movs	r3, #32
 8005c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca0:	2330      	movs	r3, #48	@ 0x30
 8005ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e40 <_svfiprintf_r+0x1e4>
 8005ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005caa:	f04f 0901 	mov.w	r9, #1
 8005cae:	4623      	mov	r3, r4
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb6:	b10a      	cbz	r2, 8005cbc <_svfiprintf_r+0x60>
 8005cb8:	2a25      	cmp	r2, #37	@ 0x25
 8005cba:	d1f9      	bne.n	8005cb0 <_svfiprintf_r+0x54>
 8005cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc0:	d00b      	beq.n	8005cda <_svfiprintf_r+0x7e>
 8005cc2:	465b      	mov	r3, fp
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff ff6b 	bl	8005ba4 <__ssputs_r>
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f000 80a7 	beq.w	8005e22 <_svfiprintf_r+0x1c6>
 8005cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cd6:	445a      	add	r2, fp
 8005cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cda:	f89a 3000 	ldrb.w	r3, [sl]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 809f 	beq.w	8005e22 <_svfiprintf_r+0x1c6>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cee:	f10a 0a01 	add.w	sl, sl, #1
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	9307      	str	r3, [sp, #28]
 8005cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cfc:	4654      	mov	r4, sl
 8005cfe:	2205      	movs	r2, #5
 8005d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d04:	484e      	ldr	r0, [pc, #312]	@ (8005e40 <_svfiprintf_r+0x1e4>)
 8005d06:	f7fa fa83 	bl	8000210 <memchr>
 8005d0a:	9a04      	ldr	r2, [sp, #16]
 8005d0c:	b9d8      	cbnz	r0, 8005d46 <_svfiprintf_r+0xea>
 8005d0e:	06d0      	lsls	r0, r2, #27
 8005d10:	bf44      	itt	mi
 8005d12:	2320      	movmi	r3, #32
 8005d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d18:	0711      	lsls	r1, r2, #28
 8005d1a:	bf44      	itt	mi
 8005d1c:	232b      	movmi	r3, #43	@ 0x2b
 8005d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d22:	f89a 3000 	ldrb.w	r3, [sl]
 8005d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d28:	d015      	beq.n	8005d56 <_svfiprintf_r+0xfa>
 8005d2a:	9a07      	ldr	r2, [sp, #28]
 8005d2c:	4654      	mov	r4, sl
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f04f 0c0a 	mov.w	ip, #10
 8005d34:	4621      	mov	r1, r4
 8005d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3a:	3b30      	subs	r3, #48	@ 0x30
 8005d3c:	2b09      	cmp	r3, #9
 8005d3e:	d94b      	bls.n	8005dd8 <_svfiprintf_r+0x17c>
 8005d40:	b1b0      	cbz	r0, 8005d70 <_svfiprintf_r+0x114>
 8005d42:	9207      	str	r2, [sp, #28]
 8005d44:	e014      	b.n	8005d70 <_svfiprintf_r+0x114>
 8005d46:	eba0 0308 	sub.w	r3, r0, r8
 8005d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	46a2      	mov	sl, r4
 8005d54:	e7d2      	b.n	8005cfc <_svfiprintf_r+0xa0>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1d19      	adds	r1, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9103      	str	r1, [sp, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfbb      	ittet	lt
 8005d62:	425b      	neglt	r3, r3
 8005d64:	f042 0202 	orrlt.w	r2, r2, #2
 8005d68:	9307      	strge	r3, [sp, #28]
 8005d6a:	9307      	strlt	r3, [sp, #28]
 8005d6c:	bfb8      	it	lt
 8005d6e:	9204      	strlt	r2, [sp, #16]
 8005d70:	7823      	ldrb	r3, [r4, #0]
 8005d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d74:	d10a      	bne.n	8005d8c <_svfiprintf_r+0x130>
 8005d76:	7863      	ldrb	r3, [r4, #1]
 8005d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d7a:	d132      	bne.n	8005de2 <_svfiprintf_r+0x186>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	9203      	str	r2, [sp, #12]
 8005d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d88:	3402      	adds	r4, #2
 8005d8a:	9305      	str	r3, [sp, #20]
 8005d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e50 <_svfiprintf_r+0x1f4>
 8005d90:	7821      	ldrb	r1, [r4, #0]
 8005d92:	2203      	movs	r2, #3
 8005d94:	4650      	mov	r0, sl
 8005d96:	f7fa fa3b 	bl	8000210 <memchr>
 8005d9a:	b138      	cbz	r0, 8005dac <_svfiprintf_r+0x150>
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	eba0 000a 	sub.w	r0, r0, sl
 8005da2:	2240      	movs	r2, #64	@ 0x40
 8005da4:	4082      	lsls	r2, r0
 8005da6:	4313      	orrs	r3, r2
 8005da8:	3401      	adds	r4, #1
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db0:	4824      	ldr	r0, [pc, #144]	@ (8005e44 <_svfiprintf_r+0x1e8>)
 8005db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005db6:	2206      	movs	r2, #6
 8005db8:	f7fa fa2a 	bl	8000210 <memchr>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d036      	beq.n	8005e2e <_svfiprintf_r+0x1d2>
 8005dc0:	4b21      	ldr	r3, [pc, #132]	@ (8005e48 <_svfiprintf_r+0x1ec>)
 8005dc2:	bb1b      	cbnz	r3, 8005e0c <_svfiprintf_r+0x1b0>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	3307      	adds	r3, #7
 8005dc8:	f023 0307 	bic.w	r3, r3, #7
 8005dcc:	3308      	adds	r3, #8
 8005dce:	9303      	str	r3, [sp, #12]
 8005dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd2:	4433      	add	r3, r6
 8005dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd6:	e76a      	b.n	8005cae <_svfiprintf_r+0x52>
 8005dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ddc:	460c      	mov	r4, r1
 8005dde:	2001      	movs	r0, #1
 8005de0:	e7a8      	b.n	8005d34 <_svfiprintf_r+0xd8>
 8005de2:	2300      	movs	r3, #0
 8005de4:	3401      	adds	r4, #1
 8005de6:	9305      	str	r3, [sp, #20]
 8005de8:	4619      	mov	r1, r3
 8005dea:	f04f 0c0a 	mov.w	ip, #10
 8005dee:	4620      	mov	r0, r4
 8005df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df4:	3a30      	subs	r2, #48	@ 0x30
 8005df6:	2a09      	cmp	r2, #9
 8005df8:	d903      	bls.n	8005e02 <_svfiprintf_r+0x1a6>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0c6      	beq.n	8005d8c <_svfiprintf_r+0x130>
 8005dfe:	9105      	str	r1, [sp, #20]
 8005e00:	e7c4      	b.n	8005d8c <_svfiprintf_r+0x130>
 8005e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e06:	4604      	mov	r4, r0
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e7f0      	b.n	8005dee <_svfiprintf_r+0x192>
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	462a      	mov	r2, r5
 8005e12:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <_svfiprintf_r+0x1f0>)
 8005e14:	a904      	add	r1, sp, #16
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7fd fe98 	bl	8003b4c <_printf_float>
 8005e1c:	1c42      	adds	r2, r0, #1
 8005e1e:	4606      	mov	r6, r0
 8005e20:	d1d6      	bne.n	8005dd0 <_svfiprintf_r+0x174>
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	065b      	lsls	r3, r3, #25
 8005e26:	f53f af2d 	bmi.w	8005c84 <_svfiprintf_r+0x28>
 8005e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e2c:	e72c      	b.n	8005c88 <_svfiprintf_r+0x2c>
 8005e2e:	ab03      	add	r3, sp, #12
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	462a      	mov	r2, r5
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <_svfiprintf_r+0x1f0>)
 8005e36:	a904      	add	r1, sp, #16
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f7fe f91f 	bl	800407c <_printf_i>
 8005e3e:	e7ed      	b.n	8005e1c <_svfiprintf_r+0x1c0>
 8005e40:	08006910 	.word	0x08006910
 8005e44:	0800691a 	.word	0x0800691a
 8005e48:	08003b4d 	.word	0x08003b4d
 8005e4c:	08005ba5 	.word	0x08005ba5
 8005e50:	08006916 	.word	0x08006916

08005e54 <__sflush_r>:
 8005e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5c:	0716      	lsls	r6, r2, #28
 8005e5e:	4605      	mov	r5, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	d454      	bmi.n	8005f0e <__sflush_r+0xba>
 8005e64:	684b      	ldr	r3, [r1, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dc02      	bgt.n	8005e70 <__sflush_r+0x1c>
 8005e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd48      	ble.n	8005f02 <__sflush_r+0xae>
 8005e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	d045      	beq.n	8005f02 <__sflush_r+0xae>
 8005e76:	2300      	movs	r3, #0
 8005e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e7c:	682f      	ldr	r7, [r5, #0]
 8005e7e:	6a21      	ldr	r1, [r4, #32]
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	d030      	beq.n	8005ee6 <__sflush_r+0x92>
 8005e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	0759      	lsls	r1, r3, #29
 8005e8a:	d505      	bpl.n	8005e98 <__sflush_r+0x44>
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e92:	b10b      	cbz	r3, 8005e98 <__sflush_r+0x44>
 8005e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e9c:	6a21      	ldr	r1, [r4, #32]
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b0      	blx	r6
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	d106      	bne.n	8005eb6 <__sflush_r+0x62>
 8005ea8:	6829      	ldr	r1, [r5, #0]
 8005eaa:	291d      	cmp	r1, #29
 8005eac:	d82b      	bhi.n	8005f06 <__sflush_r+0xb2>
 8005eae:	4a2a      	ldr	r2, [pc, #168]	@ (8005f58 <__sflush_r+0x104>)
 8005eb0:	410a      	asrs	r2, r1
 8005eb2:	07d6      	lsls	r6, r2, #31
 8005eb4:	d427      	bmi.n	8005f06 <__sflush_r+0xb2>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6062      	str	r2, [r4, #4]
 8005eba:	04d9      	lsls	r1, r3, #19
 8005ebc:	6922      	ldr	r2, [r4, #16]
 8005ebe:	6022      	str	r2, [r4, #0]
 8005ec0:	d504      	bpl.n	8005ecc <__sflush_r+0x78>
 8005ec2:	1c42      	adds	r2, r0, #1
 8005ec4:	d101      	bne.n	8005eca <__sflush_r+0x76>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	b903      	cbnz	r3, 8005ecc <__sflush_r+0x78>
 8005eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ece:	602f      	str	r7, [r5, #0]
 8005ed0:	b1b9      	cbz	r1, 8005f02 <__sflush_r+0xae>
 8005ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d002      	beq.n	8005ee0 <__sflush_r+0x8c>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7ff f9e0 	bl	80052a0 <_free_r>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ee4:	e00d      	b.n	8005f02 <__sflush_r+0xae>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b0      	blx	r6
 8005eec:	4602      	mov	r2, r0
 8005eee:	1c50      	adds	r0, r2, #1
 8005ef0:	d1c9      	bne.n	8005e86 <__sflush_r+0x32>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0c6      	beq.n	8005e86 <__sflush_r+0x32>
 8005ef8:	2b1d      	cmp	r3, #29
 8005efa:	d001      	beq.n	8005f00 <__sflush_r+0xac>
 8005efc:	2b16      	cmp	r3, #22
 8005efe:	d11e      	bne.n	8005f3e <__sflush_r+0xea>
 8005f00:	602f      	str	r7, [r5, #0]
 8005f02:	2000      	movs	r0, #0
 8005f04:	e022      	b.n	8005f4c <__sflush_r+0xf8>
 8005f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	e01b      	b.n	8005f46 <__sflush_r+0xf2>
 8005f0e:	690f      	ldr	r7, [r1, #16]
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	d0f6      	beq.n	8005f02 <__sflush_r+0xae>
 8005f14:	0793      	lsls	r3, r2, #30
 8005f16:	680e      	ldr	r6, [r1, #0]
 8005f18:	bf08      	it	eq
 8005f1a:	694b      	ldreq	r3, [r1, #20]
 8005f1c:	600f      	str	r7, [r1, #0]
 8005f1e:	bf18      	it	ne
 8005f20:	2300      	movne	r3, #0
 8005f22:	eba6 0807 	sub.w	r8, r6, r7
 8005f26:	608b      	str	r3, [r1, #8]
 8005f28:	f1b8 0f00 	cmp.w	r8, #0
 8005f2c:	dde9      	ble.n	8005f02 <__sflush_r+0xae>
 8005f2e:	6a21      	ldr	r1, [r4, #32]
 8005f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f32:	4643      	mov	r3, r8
 8005f34:	463a      	mov	r2, r7
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b0      	blx	r6
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	dc08      	bgt.n	8005f50 <__sflush_r+0xfc>
 8005f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	4407      	add	r7, r0
 8005f52:	eba8 0800 	sub.w	r8, r8, r0
 8005f56:	e7e7      	b.n	8005f28 <__sflush_r+0xd4>
 8005f58:	dfbffffe 	.word	0xdfbffffe

08005f5c <_fflush_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	690b      	ldr	r3, [r1, #16]
 8005f60:	4605      	mov	r5, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	b913      	cbnz	r3, 8005f6c <_fflush_r+0x10>
 8005f66:	2500      	movs	r5, #0
 8005f68:	4628      	mov	r0, r5
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	b118      	cbz	r0, 8005f76 <_fflush_r+0x1a>
 8005f6e:	6a03      	ldr	r3, [r0, #32]
 8005f70:	b90b      	cbnz	r3, 8005f76 <_fflush_r+0x1a>
 8005f72:	f7fe fa2f 	bl	80043d4 <__sinit>
 8005f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f3      	beq.n	8005f66 <_fflush_r+0xa>
 8005f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f80:	07d0      	lsls	r0, r2, #31
 8005f82:	d404      	bmi.n	8005f8e <_fflush_r+0x32>
 8005f84:	0599      	lsls	r1, r3, #22
 8005f86:	d402      	bmi.n	8005f8e <_fflush_r+0x32>
 8005f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f8a:	f7fe fb3a 	bl	8004602 <__retarget_lock_acquire_recursive>
 8005f8e:	4628      	mov	r0, r5
 8005f90:	4621      	mov	r1, r4
 8005f92:	f7ff ff5f 	bl	8005e54 <__sflush_r>
 8005f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f98:	07da      	lsls	r2, r3, #31
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	d4e4      	bmi.n	8005f68 <_fflush_r+0xc>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	059b      	lsls	r3, r3, #22
 8005fa2:	d4e1      	bmi.n	8005f68 <_fflush_r+0xc>
 8005fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa6:	f7fe fb2d 	bl	8004604 <__retarget_lock_release_recursive>
 8005faa:	e7dd      	b.n	8005f68 <_fflush_r+0xc>

08005fac <memmove>:
 8005fac:	4288      	cmp	r0, r1
 8005fae:	b510      	push	{r4, lr}
 8005fb0:	eb01 0402 	add.w	r4, r1, r2
 8005fb4:	d902      	bls.n	8005fbc <memmove+0x10>
 8005fb6:	4284      	cmp	r4, r0
 8005fb8:	4623      	mov	r3, r4
 8005fba:	d807      	bhi.n	8005fcc <memmove+0x20>
 8005fbc:	1e43      	subs	r3, r0, #1
 8005fbe:	42a1      	cmp	r1, r4
 8005fc0:	d008      	beq.n	8005fd4 <memmove+0x28>
 8005fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fca:	e7f8      	b.n	8005fbe <memmove+0x12>
 8005fcc:	4402      	add	r2, r0
 8005fce:	4601      	mov	r1, r0
 8005fd0:	428a      	cmp	r2, r1
 8005fd2:	d100      	bne.n	8005fd6 <memmove+0x2a>
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fde:	e7f7      	b.n	8005fd0 <memmove+0x24>

08005fe0 <_sbrk_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	@ (8005ffc <_sbrk_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fb fd08 	bl	8001a00 <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_sbrk_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_sbrk_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	200003e8 	.word	0x200003e8

08006000 <memcpy>:
 8006000:	440a      	add	r2, r1
 8006002:	4291      	cmp	r1, r2
 8006004:	f100 33ff 	add.w	r3, r0, #4294967295
 8006008:	d100      	bne.n	800600c <memcpy+0xc>
 800600a:	4770      	bx	lr
 800600c:	b510      	push	{r4, lr}
 800600e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006016:	4291      	cmp	r1, r2
 8006018:	d1f9      	bne.n	800600e <memcpy+0xe>
 800601a:	bd10      	pop	{r4, pc}

0800601c <__assert_func>:
 800601c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800601e:	4614      	mov	r4, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4b09      	ldr	r3, [pc, #36]	@ (8006048 <__assert_func+0x2c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4605      	mov	r5, r0
 8006028:	68d8      	ldr	r0, [r3, #12]
 800602a:	b954      	cbnz	r4, 8006042 <__assert_func+0x26>
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <__assert_func+0x30>)
 800602e:	461c      	mov	r4, r3
 8006030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006034:	9100      	str	r1, [sp, #0]
 8006036:	462b      	mov	r3, r5
 8006038:	4905      	ldr	r1, [pc, #20]	@ (8006050 <__assert_func+0x34>)
 800603a:	f000 f86f 	bl	800611c <fiprintf>
 800603e:	f000 f87f 	bl	8006140 <abort>
 8006042:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <__assert_func+0x38>)
 8006044:	e7f4      	b.n	8006030 <__assert_func+0x14>
 8006046:	bf00      	nop
 8006048:	20000018 	.word	0x20000018
 800604c:	08006966 	.word	0x08006966
 8006050:	08006938 	.word	0x08006938
 8006054:	0800692b 	.word	0x0800692b

08006058 <_calloc_r>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	fba1 5402 	umull	r5, r4, r1, r2
 800605e:	b93c      	cbnz	r4, 8006070 <_calloc_r+0x18>
 8006060:	4629      	mov	r1, r5
 8006062:	f7ff f991 	bl	8005388 <_malloc_r>
 8006066:	4606      	mov	r6, r0
 8006068:	b928      	cbnz	r0, 8006076 <_calloc_r+0x1e>
 800606a:	2600      	movs	r6, #0
 800606c:	4630      	mov	r0, r6
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	220c      	movs	r2, #12
 8006072:	6002      	str	r2, [r0, #0]
 8006074:	e7f9      	b.n	800606a <_calloc_r+0x12>
 8006076:	462a      	mov	r2, r5
 8006078:	4621      	mov	r1, r4
 800607a:	f7fe fa44 	bl	8004506 <memset>
 800607e:	e7f5      	b.n	800606c <_calloc_r+0x14>

08006080 <__ascii_mbtowc>:
 8006080:	b082      	sub	sp, #8
 8006082:	b901      	cbnz	r1, 8006086 <__ascii_mbtowc+0x6>
 8006084:	a901      	add	r1, sp, #4
 8006086:	b142      	cbz	r2, 800609a <__ascii_mbtowc+0x1a>
 8006088:	b14b      	cbz	r3, 800609e <__ascii_mbtowc+0x1e>
 800608a:	7813      	ldrb	r3, [r2, #0]
 800608c:	600b      	str	r3, [r1, #0]
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	1e10      	subs	r0, r2, #0
 8006092:	bf18      	it	ne
 8006094:	2001      	movne	r0, #1
 8006096:	b002      	add	sp, #8
 8006098:	4770      	bx	lr
 800609a:	4610      	mov	r0, r2
 800609c:	e7fb      	b.n	8006096 <__ascii_mbtowc+0x16>
 800609e:	f06f 0001 	mvn.w	r0, #1
 80060a2:	e7f8      	b.n	8006096 <__ascii_mbtowc+0x16>

080060a4 <_realloc_r>:
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	4680      	mov	r8, r0
 80060aa:	4615      	mov	r5, r2
 80060ac:	460c      	mov	r4, r1
 80060ae:	b921      	cbnz	r1, 80060ba <_realloc_r+0x16>
 80060b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b4:	4611      	mov	r1, r2
 80060b6:	f7ff b967 	b.w	8005388 <_malloc_r>
 80060ba:	b92a      	cbnz	r2, 80060c8 <_realloc_r+0x24>
 80060bc:	f7ff f8f0 	bl	80052a0 <_free_r>
 80060c0:	2400      	movs	r4, #0
 80060c2:	4620      	mov	r0, r4
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c8:	f000 f841 	bl	800614e <_malloc_usable_size_r>
 80060cc:	4285      	cmp	r5, r0
 80060ce:	4606      	mov	r6, r0
 80060d0:	d802      	bhi.n	80060d8 <_realloc_r+0x34>
 80060d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060d6:	d8f4      	bhi.n	80060c2 <_realloc_r+0x1e>
 80060d8:	4629      	mov	r1, r5
 80060da:	4640      	mov	r0, r8
 80060dc:	f7ff f954 	bl	8005388 <_malloc_r>
 80060e0:	4607      	mov	r7, r0
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0ec      	beq.n	80060c0 <_realloc_r+0x1c>
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	462a      	mov	r2, r5
 80060ea:	4621      	mov	r1, r4
 80060ec:	bf28      	it	cs
 80060ee:	4632      	movcs	r2, r6
 80060f0:	f7ff ff86 	bl	8006000 <memcpy>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4640      	mov	r0, r8
 80060f8:	f7ff f8d2 	bl	80052a0 <_free_r>
 80060fc:	463c      	mov	r4, r7
 80060fe:	e7e0      	b.n	80060c2 <_realloc_r+0x1e>

08006100 <__ascii_wctomb>:
 8006100:	4603      	mov	r3, r0
 8006102:	4608      	mov	r0, r1
 8006104:	b141      	cbz	r1, 8006118 <__ascii_wctomb+0x18>
 8006106:	2aff      	cmp	r2, #255	@ 0xff
 8006108:	d904      	bls.n	8006114 <__ascii_wctomb+0x14>
 800610a:	228a      	movs	r2, #138	@ 0x8a
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f04f 30ff 	mov.w	r0, #4294967295
 8006112:	4770      	bx	lr
 8006114:	700a      	strb	r2, [r1, #0]
 8006116:	2001      	movs	r0, #1
 8006118:	4770      	bx	lr
	...

0800611c <fiprintf>:
 800611c:	b40e      	push	{r1, r2, r3}
 800611e:	b503      	push	{r0, r1, lr}
 8006120:	4601      	mov	r1, r0
 8006122:	ab03      	add	r3, sp, #12
 8006124:	4805      	ldr	r0, [pc, #20]	@ (800613c <fiprintf+0x20>)
 8006126:	f853 2b04 	ldr.w	r2, [r3], #4
 800612a:	6800      	ldr	r0, [r0, #0]
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	f000 f83f 	bl	80061b0 <_vfiprintf_r>
 8006132:	b002      	add	sp, #8
 8006134:	f85d eb04 	ldr.w	lr, [sp], #4
 8006138:	b003      	add	sp, #12
 800613a:	4770      	bx	lr
 800613c:	20000018 	.word	0x20000018

08006140 <abort>:
 8006140:	b508      	push	{r3, lr}
 8006142:	2006      	movs	r0, #6
 8006144:	f000 fa08 	bl	8006558 <raise>
 8006148:	2001      	movs	r0, #1
 800614a:	f7fb fbe0 	bl	800190e <_exit>

0800614e <_malloc_usable_size_r>:
 800614e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006152:	1f18      	subs	r0, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfbc      	itt	lt
 8006158:	580b      	ldrlt	r3, [r1, r0]
 800615a:	18c0      	addlt	r0, r0, r3
 800615c:	4770      	bx	lr

0800615e <__sfputc_r>:
 800615e:	6893      	ldr	r3, [r2, #8]
 8006160:	3b01      	subs	r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	b410      	push	{r4}
 8006166:	6093      	str	r3, [r2, #8]
 8006168:	da08      	bge.n	800617c <__sfputc_r+0x1e>
 800616a:	6994      	ldr	r4, [r2, #24]
 800616c:	42a3      	cmp	r3, r4
 800616e:	db01      	blt.n	8006174 <__sfputc_r+0x16>
 8006170:	290a      	cmp	r1, #10
 8006172:	d103      	bne.n	800617c <__sfputc_r+0x1e>
 8006174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006178:	f000 b932 	b.w	80063e0 <__swbuf_r>
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	1c58      	adds	r0, r3, #1
 8006180:	6010      	str	r0, [r2, #0]
 8006182:	7019      	strb	r1, [r3, #0]
 8006184:	4608      	mov	r0, r1
 8006186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800618a:	4770      	bx	lr

0800618c <__sfputs_r>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	4614      	mov	r4, r2
 8006194:	18d5      	adds	r5, r2, r3
 8006196:	42ac      	cmp	r4, r5
 8006198:	d101      	bne.n	800619e <__sfputs_r+0x12>
 800619a:	2000      	movs	r0, #0
 800619c:	e007      	b.n	80061ae <__sfputs_r+0x22>
 800619e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a2:	463a      	mov	r2, r7
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffda 	bl	800615e <__sfputc_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d1f3      	bne.n	8006196 <__sfputs_r+0xa>
 80061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061b0 <_vfiprintf_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	460d      	mov	r5, r1
 80061b6:	b09d      	sub	sp, #116	@ 0x74
 80061b8:	4614      	mov	r4, r2
 80061ba:	4698      	mov	r8, r3
 80061bc:	4606      	mov	r6, r0
 80061be:	b118      	cbz	r0, 80061c8 <_vfiprintf_r+0x18>
 80061c0:	6a03      	ldr	r3, [r0, #32]
 80061c2:	b90b      	cbnz	r3, 80061c8 <_vfiprintf_r+0x18>
 80061c4:	f7fe f906 	bl	80043d4 <__sinit>
 80061c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061ca:	07d9      	lsls	r1, r3, #31
 80061cc:	d405      	bmi.n	80061da <_vfiprintf_r+0x2a>
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	059a      	lsls	r2, r3, #22
 80061d2:	d402      	bmi.n	80061da <_vfiprintf_r+0x2a>
 80061d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061d6:	f7fe fa14 	bl	8004602 <__retarget_lock_acquire_recursive>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	d501      	bpl.n	80061e4 <_vfiprintf_r+0x34>
 80061e0:	692b      	ldr	r3, [r5, #16]
 80061e2:	b99b      	cbnz	r3, 800620c <_vfiprintf_r+0x5c>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 f938 	bl	800645c <__swsetup_r>
 80061ec:	b170      	cbz	r0, 800620c <_vfiprintf_r+0x5c>
 80061ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061f0:	07dc      	lsls	r4, r3, #31
 80061f2:	d504      	bpl.n	80061fe <_vfiprintf_r+0x4e>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	b01d      	add	sp, #116	@ 0x74
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	0598      	lsls	r0, r3, #22
 8006202:	d4f7      	bmi.n	80061f4 <_vfiprintf_r+0x44>
 8006204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006206:	f7fe f9fd 	bl	8004604 <__retarget_lock_release_recursive>
 800620a:	e7f3      	b.n	80061f4 <_vfiprintf_r+0x44>
 800620c:	2300      	movs	r3, #0
 800620e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006210:	2320      	movs	r3, #32
 8006212:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006216:	f8cd 800c 	str.w	r8, [sp, #12]
 800621a:	2330      	movs	r3, #48	@ 0x30
 800621c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063cc <_vfiprintf_r+0x21c>
 8006220:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006224:	f04f 0901 	mov.w	r9, #1
 8006228:	4623      	mov	r3, r4
 800622a:	469a      	mov	sl, r3
 800622c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006230:	b10a      	cbz	r2, 8006236 <_vfiprintf_r+0x86>
 8006232:	2a25      	cmp	r2, #37	@ 0x25
 8006234:	d1f9      	bne.n	800622a <_vfiprintf_r+0x7a>
 8006236:	ebba 0b04 	subs.w	fp, sl, r4
 800623a:	d00b      	beq.n	8006254 <_vfiprintf_r+0xa4>
 800623c:	465b      	mov	r3, fp
 800623e:	4622      	mov	r2, r4
 8006240:	4629      	mov	r1, r5
 8006242:	4630      	mov	r0, r6
 8006244:	f7ff ffa2 	bl	800618c <__sfputs_r>
 8006248:	3001      	adds	r0, #1
 800624a:	f000 80a7 	beq.w	800639c <_vfiprintf_r+0x1ec>
 800624e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006250:	445a      	add	r2, fp
 8006252:	9209      	str	r2, [sp, #36]	@ 0x24
 8006254:	f89a 3000 	ldrb.w	r3, [sl]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 809f 	beq.w	800639c <_vfiprintf_r+0x1ec>
 800625e:	2300      	movs	r3, #0
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006268:	f10a 0a01 	add.w	sl, sl, #1
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006274:	931a      	str	r3, [sp, #104]	@ 0x68
 8006276:	4654      	mov	r4, sl
 8006278:	2205      	movs	r2, #5
 800627a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627e:	4853      	ldr	r0, [pc, #332]	@ (80063cc <_vfiprintf_r+0x21c>)
 8006280:	f7f9 ffc6 	bl	8000210 <memchr>
 8006284:	9a04      	ldr	r2, [sp, #16]
 8006286:	b9d8      	cbnz	r0, 80062c0 <_vfiprintf_r+0x110>
 8006288:	06d1      	lsls	r1, r2, #27
 800628a:	bf44      	itt	mi
 800628c:	2320      	movmi	r3, #32
 800628e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006292:	0713      	lsls	r3, r2, #28
 8006294:	bf44      	itt	mi
 8006296:	232b      	movmi	r3, #43	@ 0x2b
 8006298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a2:	d015      	beq.n	80062d0 <_vfiprintf_r+0x120>
 80062a4:	9a07      	ldr	r2, [sp, #28]
 80062a6:	4654      	mov	r4, sl
 80062a8:	2000      	movs	r0, #0
 80062aa:	f04f 0c0a 	mov.w	ip, #10
 80062ae:	4621      	mov	r1, r4
 80062b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b4:	3b30      	subs	r3, #48	@ 0x30
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	d94b      	bls.n	8006352 <_vfiprintf_r+0x1a2>
 80062ba:	b1b0      	cbz	r0, 80062ea <_vfiprintf_r+0x13a>
 80062bc:	9207      	str	r2, [sp, #28]
 80062be:	e014      	b.n	80062ea <_vfiprintf_r+0x13a>
 80062c0:	eba0 0308 	sub.w	r3, r0, r8
 80062c4:	fa09 f303 	lsl.w	r3, r9, r3
 80062c8:	4313      	orrs	r3, r2
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	46a2      	mov	sl, r4
 80062ce:	e7d2      	b.n	8006276 <_vfiprintf_r+0xc6>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	1d19      	adds	r1, r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	9103      	str	r1, [sp, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bfbb      	ittet	lt
 80062dc:	425b      	neglt	r3, r3
 80062de:	f042 0202 	orrlt.w	r2, r2, #2
 80062e2:	9307      	strge	r3, [sp, #28]
 80062e4:	9307      	strlt	r3, [sp, #28]
 80062e6:	bfb8      	it	lt
 80062e8:	9204      	strlt	r2, [sp, #16]
 80062ea:	7823      	ldrb	r3, [r4, #0]
 80062ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ee:	d10a      	bne.n	8006306 <_vfiprintf_r+0x156>
 80062f0:	7863      	ldrb	r3, [r4, #1]
 80062f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f4:	d132      	bne.n	800635c <_vfiprintf_r+0x1ac>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9203      	str	r2, [sp, #12]
 80062fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006302:	3402      	adds	r4, #2
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063dc <_vfiprintf_r+0x22c>
 800630a:	7821      	ldrb	r1, [r4, #0]
 800630c:	2203      	movs	r2, #3
 800630e:	4650      	mov	r0, sl
 8006310:	f7f9 ff7e 	bl	8000210 <memchr>
 8006314:	b138      	cbz	r0, 8006326 <_vfiprintf_r+0x176>
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	eba0 000a 	sub.w	r0, r0, sl
 800631c:	2240      	movs	r2, #64	@ 0x40
 800631e:	4082      	lsls	r2, r0
 8006320:	4313      	orrs	r3, r2
 8006322:	3401      	adds	r4, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632a:	4829      	ldr	r0, [pc, #164]	@ (80063d0 <_vfiprintf_r+0x220>)
 800632c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006330:	2206      	movs	r2, #6
 8006332:	f7f9 ff6d 	bl	8000210 <memchr>
 8006336:	2800      	cmp	r0, #0
 8006338:	d03f      	beq.n	80063ba <_vfiprintf_r+0x20a>
 800633a:	4b26      	ldr	r3, [pc, #152]	@ (80063d4 <_vfiprintf_r+0x224>)
 800633c:	bb1b      	cbnz	r3, 8006386 <_vfiprintf_r+0x1d6>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	3307      	adds	r3, #7
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	3308      	adds	r3, #8
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634c:	443b      	add	r3, r7
 800634e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006350:	e76a      	b.n	8006228 <_vfiprintf_r+0x78>
 8006352:	fb0c 3202 	mla	r2, ip, r2, r3
 8006356:	460c      	mov	r4, r1
 8006358:	2001      	movs	r0, #1
 800635a:	e7a8      	b.n	80062ae <_vfiprintf_r+0xfe>
 800635c:	2300      	movs	r3, #0
 800635e:	3401      	adds	r4, #1
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0c0a 	mov.w	ip, #10
 8006368:	4620      	mov	r0, r4
 800636a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800636e:	3a30      	subs	r2, #48	@ 0x30
 8006370:	2a09      	cmp	r2, #9
 8006372:	d903      	bls.n	800637c <_vfiprintf_r+0x1cc>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0c6      	beq.n	8006306 <_vfiprintf_r+0x156>
 8006378:	9105      	str	r1, [sp, #20]
 800637a:	e7c4      	b.n	8006306 <_vfiprintf_r+0x156>
 800637c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006380:	4604      	mov	r4, r0
 8006382:	2301      	movs	r3, #1
 8006384:	e7f0      	b.n	8006368 <_vfiprintf_r+0x1b8>
 8006386:	ab03      	add	r3, sp, #12
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	462a      	mov	r2, r5
 800638c:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <_vfiprintf_r+0x228>)
 800638e:	a904      	add	r1, sp, #16
 8006390:	4630      	mov	r0, r6
 8006392:	f7fd fbdb 	bl	8003b4c <_printf_float>
 8006396:	4607      	mov	r7, r0
 8006398:	1c78      	adds	r0, r7, #1
 800639a:	d1d6      	bne.n	800634a <_vfiprintf_r+0x19a>
 800639c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800639e:	07d9      	lsls	r1, r3, #31
 80063a0:	d405      	bmi.n	80063ae <_vfiprintf_r+0x1fe>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	059a      	lsls	r2, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_vfiprintf_r+0x1fe>
 80063a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063aa:	f7fe f92b 	bl	8004604 <__retarget_lock_release_recursive>
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	065b      	lsls	r3, r3, #25
 80063b2:	f53f af1f 	bmi.w	80061f4 <_vfiprintf_r+0x44>
 80063b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b8:	e71e      	b.n	80061f8 <_vfiprintf_r+0x48>
 80063ba:	ab03      	add	r3, sp, #12
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	462a      	mov	r2, r5
 80063c0:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <_vfiprintf_r+0x228>)
 80063c2:	a904      	add	r1, sp, #16
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7fd fe59 	bl	800407c <_printf_i>
 80063ca:	e7e4      	b.n	8006396 <_vfiprintf_r+0x1e6>
 80063cc:	08006910 	.word	0x08006910
 80063d0:	0800691a 	.word	0x0800691a
 80063d4:	08003b4d 	.word	0x08003b4d
 80063d8:	0800618d 	.word	0x0800618d
 80063dc:	08006916 	.word	0x08006916

080063e0 <__swbuf_r>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	460e      	mov	r6, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	4605      	mov	r5, r0
 80063e8:	b118      	cbz	r0, 80063f2 <__swbuf_r+0x12>
 80063ea:	6a03      	ldr	r3, [r0, #32]
 80063ec:	b90b      	cbnz	r3, 80063f2 <__swbuf_r+0x12>
 80063ee:	f7fd fff1 	bl	80043d4 <__sinit>
 80063f2:	69a3      	ldr	r3, [r4, #24]
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	071a      	lsls	r2, r3, #28
 80063fa:	d501      	bpl.n	8006400 <__swbuf_r+0x20>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	b943      	cbnz	r3, 8006412 <__swbuf_r+0x32>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f82a 	bl	800645c <__swsetup_r>
 8006408:	b118      	cbz	r0, 8006412 <__swbuf_r+0x32>
 800640a:	f04f 37ff 	mov.w	r7, #4294967295
 800640e:	4638      	mov	r0, r7
 8006410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	1a98      	subs	r0, r3, r2
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	b2f6      	uxtb	r6, r6
 800641c:	4283      	cmp	r3, r0
 800641e:	4637      	mov	r7, r6
 8006420:	dc05      	bgt.n	800642e <__swbuf_r+0x4e>
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f7ff fd99 	bl	8005f5c <_fflush_r>
 800642a:	2800      	cmp	r0, #0
 800642c:	d1ed      	bne.n	800640a <__swbuf_r+0x2a>
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	3b01      	subs	r3, #1
 8006432:	60a3      	str	r3, [r4, #8]
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	6022      	str	r2, [r4, #0]
 800643a:	701e      	strb	r6, [r3, #0]
 800643c:	6962      	ldr	r2, [r4, #20]
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	429a      	cmp	r2, r3
 8006442:	d004      	beq.n	800644e <__swbuf_r+0x6e>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	07db      	lsls	r3, r3, #31
 8006448:	d5e1      	bpl.n	800640e <__swbuf_r+0x2e>
 800644a:	2e0a      	cmp	r6, #10
 800644c:	d1df      	bne.n	800640e <__swbuf_r+0x2e>
 800644e:	4621      	mov	r1, r4
 8006450:	4628      	mov	r0, r5
 8006452:	f7ff fd83 	bl	8005f5c <_fflush_r>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0d9      	beq.n	800640e <__swbuf_r+0x2e>
 800645a:	e7d6      	b.n	800640a <__swbuf_r+0x2a>

0800645c <__swsetup_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4b29      	ldr	r3, [pc, #164]	@ (8006504 <__swsetup_r+0xa8>)
 8006460:	4605      	mov	r5, r0
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	460c      	mov	r4, r1
 8006466:	b118      	cbz	r0, 8006470 <__swsetup_r+0x14>
 8006468:	6a03      	ldr	r3, [r0, #32]
 800646a:	b90b      	cbnz	r3, 8006470 <__swsetup_r+0x14>
 800646c:	f7fd ffb2 	bl	80043d4 <__sinit>
 8006470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006474:	0719      	lsls	r1, r3, #28
 8006476:	d422      	bmi.n	80064be <__swsetup_r+0x62>
 8006478:	06da      	lsls	r2, r3, #27
 800647a:	d407      	bmi.n	800648c <__swsetup_r+0x30>
 800647c:	2209      	movs	r2, #9
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	e033      	b.n	80064f4 <__swsetup_r+0x98>
 800648c:	0758      	lsls	r0, r3, #29
 800648e:	d512      	bpl.n	80064b6 <__swsetup_r+0x5a>
 8006490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006492:	b141      	cbz	r1, 80064a6 <__swsetup_r+0x4a>
 8006494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <__swsetup_r+0x46>
 800649c:	4628      	mov	r0, r5
 800649e:	f7fe feff 	bl	80052a0 <_free_r>
 80064a2:	2300      	movs	r3, #0
 80064a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064ac:	81a3      	strh	r3, [r4, #12]
 80064ae:	2300      	movs	r3, #0
 80064b0:	6063      	str	r3, [r4, #4]
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	b94b      	cbnz	r3, 80064d6 <__swsetup_r+0x7a>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064cc:	d003      	beq.n	80064d6 <__swsetup_r+0x7a>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f883 	bl	80065dc <__smakebuf_r>
 80064d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064da:	f013 0201 	ands.w	r2, r3, #1
 80064de:	d00a      	beq.n	80064f6 <__swsetup_r+0x9a>
 80064e0:	2200      	movs	r2, #0
 80064e2:	60a2      	str	r2, [r4, #8]
 80064e4:	6962      	ldr	r2, [r4, #20]
 80064e6:	4252      	negs	r2, r2
 80064e8:	61a2      	str	r2, [r4, #24]
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	b942      	cbnz	r2, 8006500 <__swsetup_r+0xa4>
 80064ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064f2:	d1c5      	bne.n	8006480 <__swsetup_r+0x24>
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	0799      	lsls	r1, r3, #30
 80064f8:	bf58      	it	pl
 80064fa:	6962      	ldrpl	r2, [r4, #20]
 80064fc:	60a2      	str	r2, [r4, #8]
 80064fe:	e7f4      	b.n	80064ea <__swsetup_r+0x8e>
 8006500:	2000      	movs	r0, #0
 8006502:	e7f7      	b.n	80064f4 <__swsetup_r+0x98>
 8006504:	20000018 	.word	0x20000018

08006508 <_raise_r>:
 8006508:	291f      	cmp	r1, #31
 800650a:	b538      	push	{r3, r4, r5, lr}
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	d904      	bls.n	800651c <_raise_r+0x14>
 8006512:	2316      	movs	r3, #22
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800651e:	b112      	cbz	r2, 8006526 <_raise_r+0x1e>
 8006520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006524:	b94b      	cbnz	r3, 800653a <_raise_r+0x32>
 8006526:	4628      	mov	r0, r5
 8006528:	f000 f830 	bl	800658c <_getpid_r>
 800652c:	4622      	mov	r2, r4
 800652e:	4601      	mov	r1, r0
 8006530:	4628      	mov	r0, r5
 8006532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006536:	f000 b817 	b.w	8006568 <_kill_r>
 800653a:	2b01      	cmp	r3, #1
 800653c:	d00a      	beq.n	8006554 <_raise_r+0x4c>
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	d103      	bne.n	800654a <_raise_r+0x42>
 8006542:	2316      	movs	r3, #22
 8006544:	6003      	str	r3, [r0, #0]
 8006546:	2001      	movs	r0, #1
 8006548:	e7e7      	b.n	800651a <_raise_r+0x12>
 800654a:	2100      	movs	r1, #0
 800654c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006550:	4620      	mov	r0, r4
 8006552:	4798      	blx	r3
 8006554:	2000      	movs	r0, #0
 8006556:	e7e0      	b.n	800651a <_raise_r+0x12>

08006558 <raise>:
 8006558:	4b02      	ldr	r3, [pc, #8]	@ (8006564 <raise+0xc>)
 800655a:	4601      	mov	r1, r0
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f7ff bfd3 	b.w	8006508 <_raise_r>
 8006562:	bf00      	nop
 8006564:	20000018 	.word	0x20000018

08006568 <_kill_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	@ (8006588 <_kill_r+0x20>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	f7fb f9ba 	bl	80018ee <_kill>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d102      	bne.n	8006584 <_kill_r+0x1c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	b103      	cbz	r3, 8006584 <_kill_r+0x1c>
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	200003e8 	.word	0x200003e8

0800658c <_getpid_r>:
 800658c:	f7fb b9a7 	b.w	80018de <_getpid>

08006590 <__swhatbuf_r>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	460c      	mov	r4, r1
 8006594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006598:	2900      	cmp	r1, #0
 800659a:	b096      	sub	sp, #88	@ 0x58
 800659c:	4615      	mov	r5, r2
 800659e:	461e      	mov	r6, r3
 80065a0:	da0d      	bge.n	80065be <__swhatbuf_r+0x2e>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2340      	movne	r3, #64	@ 0x40
 80065b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065b4:	2000      	movs	r0, #0
 80065b6:	6031      	str	r1, [r6, #0]
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	b016      	add	sp, #88	@ 0x58
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	466a      	mov	r2, sp
 80065c0:	f000 f848 	bl	8006654 <_fstat_r>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	dbec      	blt.n	80065a2 <__swhatbuf_r+0x12>
 80065c8:	9901      	ldr	r1, [sp, #4]
 80065ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065d2:	4259      	negs	r1, r3
 80065d4:	4159      	adcs	r1, r3
 80065d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065da:	e7eb      	b.n	80065b4 <__swhatbuf_r+0x24>

080065dc <__smakebuf_r>:
 80065dc:	898b      	ldrh	r3, [r1, #12]
 80065de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e0:	079d      	lsls	r5, r3, #30
 80065e2:	4606      	mov	r6, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	d507      	bpl.n	80065f8 <__smakebuf_r+0x1c>
 80065e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	2301      	movs	r3, #1
 80065f2:	6163      	str	r3, [r4, #20]
 80065f4:	b003      	add	sp, #12
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f8:	ab01      	add	r3, sp, #4
 80065fa:	466a      	mov	r2, sp
 80065fc:	f7ff ffc8 	bl	8006590 <__swhatbuf_r>
 8006600:	9f00      	ldr	r7, [sp, #0]
 8006602:	4605      	mov	r5, r0
 8006604:	4639      	mov	r1, r7
 8006606:	4630      	mov	r0, r6
 8006608:	f7fe febe 	bl	8005388 <_malloc_r>
 800660c:	b948      	cbnz	r0, 8006622 <__smakebuf_r+0x46>
 800660e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006612:	059a      	lsls	r2, r3, #22
 8006614:	d4ee      	bmi.n	80065f4 <__smakebuf_r+0x18>
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0302 	orr.w	r3, r3, #2
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	e7e2      	b.n	80065e8 <__smakebuf_r+0xc>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	6020      	str	r0, [r4, #0]
 8006626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006632:	b15b      	cbz	r3, 800664c <__smakebuf_r+0x70>
 8006634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006638:	4630      	mov	r0, r6
 800663a:	f000 f81d 	bl	8006678 <_isatty_r>
 800663e:	b128      	cbz	r0, 800664c <__smakebuf_r+0x70>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	81a3      	strh	r3, [r4, #12]
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	431d      	orrs	r5, r3
 8006650:	81a5      	strh	r5, [r4, #12]
 8006652:	e7cf      	b.n	80065f4 <__smakebuf_r+0x18>

08006654 <_fstat_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	@ (8006674 <_fstat_r+0x20>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f7fb f9a4 	bl	80019ae <_fstat>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d102      	bne.n	8006670 <_fstat_r+0x1c>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b103      	cbz	r3, 8006670 <_fstat_r+0x1c>
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	bf00      	nop
 8006674:	200003e8 	.word	0x200003e8

08006678 <_isatty_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	@ (8006694 <_isatty_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fb f9a3 	bl	80019ce <_isatty>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_isatty_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_isatty_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200003e8 	.word	0x200003e8

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
