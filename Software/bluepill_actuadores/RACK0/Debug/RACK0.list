
RACK0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ecc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008fe0  08008fe0  00009fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009448  08009448  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009450  08009450  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009450  08009450  0000a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009454  08009454  0000a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009458  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  0800962c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800962c  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea45  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002636  00000000  00000000  00019c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b89  00000000  00000000  0001d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194ab  00000000  00000000  0001dcd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ff  00000000  00000000  00037184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eaf0  00000000  00000000  00048583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  000d70b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dc350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fc4 	.word	0x08008fc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008fc4 	.word	0x08008fc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f000 fe30 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f8b2 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 fae4 	bl	80011ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8000be4:	f000 f9a2 	bl	8000f2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000be8:	f000 fa20 	bl	800102c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 fab4 	bl	8001158 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000bf0:	f000 f906 	bl	8000e00 <MX_RTC_Init>
  MX_TIM2_Init();
 8000bf4:	f000 f94e 	bl	8000e94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /********************
   * INITILIZE ACTUATOR
   ********************/
  TIM3->CCR3 = 0;
 8000bf8:	4b45      	ldr	r3, [pc, #276]	@ (8000d10 <main+0x13c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = 0;
 8000bfe:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <main+0x13c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM4->CCR1 = 0;
 8000c04:	4b43      	ldr	r3, [pc, #268]	@ (8000d14 <main+0x140>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2 = 0;
 8000c0a:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <main+0x140>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3 = 0;
 8000c10:	4b40      	ldr	r3, [pc, #256]	@ (8000d14 <main+0x140>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR4 = 0;
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <main+0x140>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	483e      	ldr	r0, [pc, #248]	@ (8000d18 <main+0x144>)
 8000c20:	f002 fb98 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c24:	210c      	movs	r1, #12
 8000c26:	483c      	ldr	r0, [pc, #240]	@ (8000d18 <main+0x144>)
 8000c28:	f002 fb94 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	483b      	ldr	r0, [pc, #236]	@ (8000d1c <main+0x148>)
 8000c30:	f002 fb90 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c34:	2104      	movs	r1, #4
 8000c36:	4839      	ldr	r0, [pc, #228]	@ (8000d1c <main+0x148>)
 8000c38:	f002 fb8c 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	4837      	ldr	r0, [pc, #220]	@ (8000d1c <main+0x148>)
 8000c40:	f002 fb88 	bl	8003354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c44:	210c      	movs	r1, #12
 8000c46:	4835      	ldr	r0, [pc, #212]	@ (8000d1c <main+0x148>)
 8000c48:	f002 fb84 	bl	8003354 <HAL_TIM_PWM_Start>

  /** Communications */
  HAL_UART_Receive_IT(&huart1, temp, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4934      	ldr	r1, [pc, #208]	@ (8000d20 <main+0x14c>)
 8000c50:	4834      	ldr	r0, [pc, #208]	@ (8000d24 <main+0x150>)
 8000c52:	f003 f909 	bl	8003e68 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (temp[0] == '\n')
 8000c56:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <main+0x14c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d1fb      	bne.n	8000c56 <main+0x82>
	{
		// Copy received data into Final_Data and reset the index
		memcpy(Final_Data, RxData, indx);
 8000c5e:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <main+0x154>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4931      	ldr	r1, [pc, #196]	@ (8000d2c <main+0x158>)
 8000c66:	4832      	ldr	r0, [pc, #200]	@ (8000d30 <main+0x15c>)
 8000c68:	f005 fcff 	bl	800666a <memcpy>
		indx = 0;
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <main+0x154>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]

		// Locate the delimiters '*' and '\r' in the data
		posAstk = strchr((char*)Final_Data, '*');  // Position of '*'
 8000c72:	212a      	movs	r1, #42	@ 0x2a
 8000c74:	482e      	ldr	r0, [pc, #184]	@ (8000d30 <main+0x15c>)
 8000c76:	f005 fc54 	bl	8006522 <strchr>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d34 <main+0x160>)
 8000c7e:	6013      	str	r3, [r2, #0]
		posCarrun = strchr((char*)Final_Data, '\r'); // Position of '\r'
 8000c80:	210d      	movs	r1, #13
 8000c82:	482b      	ldr	r0, [pc, #172]	@ (8000d30 <main+0x15c>)
 8000c84:	f005 fc4d 	bl	8006522 <strchr>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d38 <main+0x164>)
 8000c8c:	6013      	str	r3, [r2, #0]

		// Validate the data format
		if (posAstk && posCarrun && posCarrun > posAstk)
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <main+0x160>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0df      	beq.n	8000c56 <main+0x82>
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <main+0x164>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0db      	beq.n	8000c56 <main+0x82>
 8000c9e:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <main+0x164>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <main+0x160>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d9d5      	bls.n	8000c56 <main+0x82>
		{
			// Replace '*' and '\r' with null terminators to split the string
			*posAstk = '\0'; // Terminate the ID string at '*'
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <main+0x160>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
			*posCarrun = '\0'; // Terminate the VALUE string at '\r'
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x164>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]

			// Convert the ID and VALUE substrings to integers
			ID = atoi((char*)Final_Data);          // ID is before '*'
 8000cba:	481d      	ldr	r0, [pc, #116]	@ (8000d30 <main+0x15c>)
 8000cbc:	f003 fe0c 	bl	80048d8 <atoi>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <main+0x168>)
 8000cc4:	6013      	str	r3, [r2, #0]
			VAL = atoi(posAstk + 1);        // VALUE is after '*'
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <main+0x160>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fe03 	bl	80048d8 <atoi>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d40 <main+0x16c>)
 8000cd6:	6013      	str	r3, [r2, #0]

			// Ensure the ID and VALUE are within valid ranges
			if (ID >= 0 && ID <= 99 && VAL >= 0 && VAL <= 100)
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x168>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dbba      	blt.n	8000c56 <main+0x82>
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <main+0x168>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b63      	cmp	r3, #99	@ 0x63
 8000ce6:	dcb6      	bgt.n	8000c56 <main+0x82>
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x16c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dbb2      	blt.n	8000c56 <main+0x82>
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <main+0x16c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b64      	cmp	r3, #100	@ 0x64
 8000cf6:	dcae      	bgt.n	8000c56 <main+0x82>
			{
				// Update the actuator states using the extracted ID and VALUE
				actuatorMotorsHandler(ID, VAL);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <main+0x168>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <main+0x16c>)
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fd18 	bl	800173c <actuatorMotorsHandler>
	if (temp[0] == '\n')
 8000d0c:	e7a3      	b.n	8000c56 <main+0x82>
 8000d0e:	bf00      	nop
 8000d10:	40000400 	.word	0x40000400
 8000d14:	40000800 	.word	0x40000800
 8000d18:	2000024c 	.word	0x2000024c
 8000d1c:	20000294 	.word	0x20000294
 8000d20:	20000334 	.word	0x20000334
 8000d24:	200002dc 	.word	0x200002dc
 8000d28:	20000338 	.word	0x20000338
 8000d2c:	2000032c 	.word	0x2000032c
 8000d30:	20000324 	.word	0x20000324
 8000d34:	2000033c 	.word	0x2000033c
 8000d38:	20000340 	.word	0x20000340
 8000d3c:	20000344 	.word	0x20000344
 8000d40:	20000348 	.word	0x20000348

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	@ 0x50
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d4e:	2228      	movs	r2, #40	@ 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 fbdd 	bl	8006512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d74:	2309      	movs	r3, #9
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d82:	2301      	movs	r3, #1
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d94:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f930 	bl	8002004 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000daa:	f000 fa81 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fb9c 	bl	8002508 <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dd6:	f000 fa6b 	bl	80012b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fd1c 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000df2:	f000 fa5d 	bl	80012b0 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	@ 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2100      	movs	r1, #0
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	801a      	strh	r2, [r3, #0]
 8000e0e:	460a      	mov	r2, r1
 8000e10:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <MX_RTC_Init+0x90>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e22:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e2a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e2c:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e2e:	f001 fe65 	bl	8002afc <HAL_RTC_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000e38:	f000 fa3a 	bl	80012b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e50:	f001 fee0 	bl	8002c14 <HAL_RTC_SetTime>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000e5a:	f000 fa29 	bl	80012b0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e62:	2301      	movs	r3, #1
 8000e64:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2201      	movs	r2, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_RTC_Init+0x8c>)
 8000e76:	f001 ff65 	bl	8002d44 <HAL_RTC_SetDate>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000e80:	f000 fa16 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001f0 	.word	0x200001f0
 8000e90:	40002800 	.word	0x40002800

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000eba:	2247      	movs	r2, #71	@ 0x47
 8000ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000eda:	f002 f993 	bl	8003204 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f9e4 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000ef6:	f002 fb91 	bl	800361c <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f9d6 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_TIM2_Init+0x94>)
 8000f12:	f002 fefb 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f9c8 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000204 	.word	0x20000204

08000f2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	@ 0x38
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f5e:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <MX_TIM3_Init+0xfc>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000f62:	4b30      	ldr	r3, [pc, #192]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f64:	2247      	movs	r2, #71	@ 0x47
 8000f66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f70:	2263      	movs	r2, #99	@ 0x63
 8000f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f80:	4828      	ldr	r0, [pc, #160]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f82:	f002 f93f 	bl	8003204 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f8c:	f000 f990 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000f9e:	f002 fb3d 	bl	800361c <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000fa8:	f000 f982 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fac:	481d      	ldr	r0, [pc, #116]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000fae:	f002 f978 	bl	80032a2 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fb8:	f000 f97a 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4816      	ldr	r0, [pc, #88]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000fcc:	f002 fe9e 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000fd6:	f000 f96b 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	@ 0x60
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8000ff2:	f002 fa51 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ffc:	f000 f958 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	220c      	movs	r2, #12
 8001004:	4619      	mov	r1, r3
 8001006:	4807      	ldr	r0, [pc, #28]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8001008:	f002 fa46 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001012:	f000 f94d 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001016:	4803      	ldr	r0, [pc, #12]	@ (8001024 <MX_TIM3_Init+0xf8>)
 8001018:	f000 f9ea 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800101c:	bf00      	nop
 800101e:	3738      	adds	r7, #56	@ 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000024c 	.word	0x2000024c
 8001028:	40000400 	.word	0x40000400

0800102c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105c:	4b3c      	ldr	r3, [pc, #240]	@ (8001150 <MX_TIM4_Init+0x124>)
 800105e:	4a3d      	ldr	r2, [pc, #244]	@ (8001154 <MX_TIM4_Init+0x128>)
 8001060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001062:	4b3b      	ldr	r3, [pc, #236]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001064:	2247      	movs	r2, #71	@ 0x47
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <MX_TIM4_Init+0x124>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001070:	2263      	movs	r2, #99	@ 0x63
 8001072:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b36      	ldr	r3, [pc, #216]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b35      	ldr	r3, [pc, #212]	@ (8001150 <MX_TIM4_Init+0x124>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001080:	4833      	ldr	r0, [pc, #204]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001082:	f002 f8bf 	bl	8003204 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800108c:	f000 f910 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109a:	4619      	mov	r1, r3
 800109c:	482c      	ldr	r0, [pc, #176]	@ (8001150 <MX_TIM4_Init+0x124>)
 800109e:	f002 fabd 	bl	800361c <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80010a8:	f000 f902 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <MX_TIM4_Init+0x124>)
 80010ae:	f002 f8f8 	bl	80032a2 <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 f8fa 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4619      	mov	r1, r3
 80010ca:	4821      	ldr	r0, [pc, #132]	@ (8001150 <MX_TIM4_Init+0x124>)
 80010cc:	f002 fe1e 	bl	8003d0c <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80010d6:	f000 f8eb 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010da:	2360      	movs	r3, #96	@ 0x60
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010e2:	2302      	movs	r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <MX_TIM4_Init+0x124>)
 80010f2:	f002 f9d1 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80010fc:	f000 f8d8 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2204      	movs	r2, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4812      	ldr	r0, [pc, #72]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001108:	f002 f9c6 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001112:	f000 f8cd 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2208      	movs	r2, #8
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_TIM4_Init+0x124>)
 800111e:	f002 f9bb 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001128:	f000 f8c2 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	220c      	movs	r2, #12
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001134:	f002 f9b0 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800113e:	f000 f8b7 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001142:	4803      	ldr	r0, [pc, #12]	@ (8001150 <MX_TIM4_Init+0x124>)
 8001144:	f000 f954 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	@ 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000294 	.word	0x20000294
 8001154:	40000800 	.word	0x40000800

08001158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <MX_USART1_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001190:	f002 fe1a 	bl	8003dc8 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f889 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002dc 	.word	0x200002dc
 80011a8:	40013800 	.word	0x40013800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b21      	ldr	r3, [pc, #132]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011de:	f043 0320 	orr.w	r3, r3, #32
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_GPIO_Init+0xa8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_GPIO_Init+0xa8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <MX_GPIO_Init+0xa8>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_GPIO_Init+0xa8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HUMgpio_Pin|WATgpio_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001226:	480c      	ldr	r0, [pc, #48]	@ (8001258 <MX_GPIO_Init+0xac>)
 8001228:	f000 feae 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HUMgpio_Pin WATgpio_Pin */
  GPIO_InitStruct.Pin = HUMgpio_Pin|WATgpio_Pin;
 800122c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_GPIO_Init+0xac>)
 8001246:	f000 fd1b 	bl	8001c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00

0800125c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	memcpy(RxData+indx,temp,1);
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_UART_RxCpltCallback+0x44>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_UART_RxCpltCallback+0x48>)
 800126c:	4413      	add	r3, r2
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_UART_RxCpltCallback+0x4c>)
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	701a      	strb	r2, [r3, #0]
	if (++indx >= dataFomatL) indx = 0;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_UART_RxCpltCallback+0x44>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <HAL_UART_RxCpltCallback+0x44>)
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_UART_RxCpltCallback+0x44>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b07      	cmp	r3, #7
 8001284:	dd02      	ble.n	800128c <HAL_UART_RxCpltCallback+0x30>
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_UART_RxCpltCallback+0x44>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1,temp,1); //start next data receive interrupt
 800128c:	2201      	movs	r2, #1
 800128e:	4906      	ldr	r1, [pc, #24]	@ (80012a8 <HAL_UART_RxCpltCallback+0x4c>)
 8001290:	4806      	ldr	r0, [pc, #24]	@ (80012ac <HAL_UART_RxCpltCallback+0x50>)
 8001292:	f002 fde9 	bl	8003e68 <HAL_UART_Receive_IT>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000338 	.word	0x20000338
 80012a4:	2000032c 	.word	0x2000032c
 80012a8:	20000334 	.word	0x20000334
 80012ac:	200002dc 	.word	0x200002dc

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <HAL_MspInit+0x5c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_MspInit+0x5c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <HAL_MspInit+0x5c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <HAL_MspInit+0x5c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_MspInit+0x60>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_MspInit+0x60>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000

08001320 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_RTC_MspInit+0x3c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d110      	bne.n	8001354 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001332:	f000 fe5b 	bl	8001fec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_RTC_MspInit+0x40>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_RTC_MspInit+0x40>)
 800133c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_RTC_MspInit+0x40>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_RTC_MspInit+0x44>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40002800 	.word	0x40002800
 8001360:	40021000 	.word	0x40021000
 8001364:	4242043c 	.word	0x4242043c

08001368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001378:	d10c      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001392:	e022      	b.n	80013da <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <HAL_TIM_Base_MspInit+0x80>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10c      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
}
 80013b6:	e010      	b.n	80013da <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_TIM_Base_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_TIM_Base_MspInit+0x7c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40000800 	.word	0x40000800

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <HAL_TIM_MspPostInit+0x98>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d118      	bne.n	8001442 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001428:	2303      	movs	r3, #3
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <HAL_TIM_MspPostInit+0xa0>)
 800143c:	f000 fc20 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001440:	e01d      	b.n	800147e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_TIM_MspPostInit+0xa4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d118      	bne.n	800147e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_TIM_MspPostInit+0x9c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001464:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_TIM_MspPostInit+0xa0>)
 800147a:	f000 fc01 	bl	8001c80 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40000400 	.word	0x40000400
 800148c:	40021000 	.word	0x40021000
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40000800 	.word	0x40000800

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a20      	ldr	r2, [pc, #128]	@ (8001534 <HAL_UART_MspInit+0x9c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d139      	bne.n	800152c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a18      	ldr	r2, [pc, #96]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_UART_MspInit+0xa0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480f      	ldr	r0, [pc, #60]	@ (800153c <HAL_UART_MspInit+0xa4>)
 80014fe:	f000 fbbf 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	4809      	ldr	r0, [pc, #36]	@ (800153c <HAL_UART_MspInit+0xa4>)
 8001518:	f000 fbb2 	bl	8001c80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2025      	movs	r0, #37	@ 0x25
 8001522:	f000 fac4 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001526:	2025      	movs	r0, #37	@ 0x25
 8001528:	f000 fadd 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	40010800 	.word	0x40010800

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f99a 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <USART1_IRQHandler+0x10>)
 800159e:	f002 fc89 	bl	8003eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002dc 	.word	0x200002dc

080015ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_kill>:

int _kill(int pid, int sig)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c4:	f005 f816 	bl	80065f4 <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2216      	movs	r2, #22
 80015cc:	601a      	str	r2, [r3, #0]
  return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_exit>:

void _exit (int status)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e2:	f04f 31ff 	mov.w	r1, #4294967295
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffe7 	bl	80015ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <_exit+0x12>

080015f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e00a      	b.n	8001618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001602:	f3af 8000 	nop.w
 8001606:	4601      	mov	r1, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf0      	blt.n	8001602 <_read+0x12>
  }

  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e009      	b.n	8001650 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	dbf1      	blt.n	800163c <_write+0x12>
  }
  return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_close>:

int _close(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001688:	605a      	str	r2, [r3, #4]
  return 0;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f004 ff7e 	bl	80065f4 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20005000 	.word	0x20005000
 8001724:	00000400 	.word	0x00000400
 8001728:	2000034c 	.word	0x2000034c
 800172c:	200004a0 	.word	0x200004a0

08001730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <actuatorMotorsHandler>:
// Using a STM32F4 as a DAQ
#elif defined(ACT)
// Using a STM32F1 as an ACTU

ERROR_CODE actuatorMotorsHandler(uint8_t actu, uint8_t val)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	460a      	mov	r2, r1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	4613      	mov	r3, r2
 800174a:	71bb      	strb	r3, [r7, #6]
	switch (actu) {
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d840      	bhi.n	80017d4 <actuatorMotorsHandler+0x98>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <actuatorMotorsHandler+0x1c>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001779 	.word	0x08001779
 800175c:	0800179b 	.word	0x0800179b
 8001760:	080017a3 	.word	0x080017a3
 8001764:	080017ab 	.word	0x080017ab
 8001768:	080017b3 	.word	0x080017b3
 800176c:	080017bb 	.word	0x080017bb
 8001770:	080017c3 	.word	0x080017c3
 8001774:	080017cb 	.word	0x080017cb
	    case WATERING:
	        if (val) {  // PUMP IS ON
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <actuatorMotorsHandler+0x50>
	            HAL_GPIO_WritePin(WATgpio_GPIO_Port, WATgpio_Pin, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <actuatorMotorsHandler+0xa8>)
 8001786:	f000 fbff 	bl	8001f88 <HAL_GPIO_WritePin>
	        } else {  // PUMP IS OFF
	            HAL_GPIO_WritePin(WATgpio_GPIO_Port, WATgpio_Pin, 1);
	        }
	        break;
 800178a:	e026      	b.n	80017da <actuatorMotorsHandler+0x9e>
	            HAL_GPIO_WritePin(WATgpio_GPIO_Port, WATgpio_Pin, 1);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <actuatorMotorsHandler+0xa8>)
 8001794:	f000 fbf8 	bl	8001f88 <HAL_GPIO_WritePin>
	        break;
 8001798:	e01f      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case DOSE_PUMP0:
	        TIM3->CCR3 = val;  // Set PWM for dose pump 0
 800179a:	4a13      	ldr	r2, [pc, #76]	@ (80017e8 <actuatorMotorsHandler+0xac>)
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	63d3      	str	r3, [r2, #60]	@ 0x3c
	        break;
 80017a0:	e01b      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case DOSE_PUMP1:
	        TIM3->CCR4 = val;  // Set PWM for dose pump 1
 80017a2:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <actuatorMotorsHandler+0xac>)
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	6413      	str	r3, [r2, #64]	@ 0x40
	        break;
 80017a8:	e017      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case DOSE_PUMP2:
	        TIM4->CCR1 = val;  // Set PWM for dose pump 2
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <actuatorMotorsHandler+0xb0>)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	6353      	str	r3, [r2, #52]	@ 0x34
	        break;
 80017b0:	e013      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case LIGHT_CONTROL:
	        TIM4->CCR2 = val;  // Set PWM for light control
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <actuatorMotorsHandler+0xb0>)
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	6393      	str	r3, [r2, #56]	@ 0x38
	        break;
 80017b8:	e00f      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case FAN_CONTROL0:
	        TIM4->CCR3 = val;  // Set PWM for fan 0
 80017ba:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <actuatorMotorsHandler+0xb0>)
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	63d3      	str	r3, [r2, #60]	@ 0x3c
	        break;
 80017c0:	e00b      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case FAN_CONTROL1:
	        TIM4->CCR4 = val;  // Set PWM for fan 1
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <actuatorMotorsHandler+0xb0>)
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
	        break;
 80017c8:	e007      	b.n	80017da <actuatorMotorsHandler+0x9e>

	    case HUMIDIFIER: 	   // Send pulse to Humidifier
	        HAL_GPIO_TogglePin(HUMgpio_GPIO_Port, HUMgpio_Pin);
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <actuatorMotorsHandler+0xa8>)
 80017d0:	f000 fbf2 	bl	8001fb8 <HAL_GPIO_TogglePin>
	    default:
	        return UNKNOWN_ACTUATOR;  // Invalid actuator
 80017d4:	f06f 0303 	mvn.w	r3, #3
 80017d8:	e000      	b.n	80017dc <actuatorMotorsHandler+0xa0>
	}
    return SUCCESS;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40000400 	.word	0x40000400
 80017ec:	40000800 	.word	0x40000800

080017f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ff9e 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	@ (8001824 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017f6:	490c      	ldr	r1, [pc, #48]	@ (8001828 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f8:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800180c:	4c09      	ldr	r4, [pc, #36]	@ (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f004 fef1 	bl	8006600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff f9d9 	bl	8000bd4 <main>
  bx lr
 8001822:	4770      	bx	lr
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800182c:	08009458 	.word	0x08009458
  ldr r2, =_sbss
 8001830:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001834:	200004a0 	.word	0x200004a0

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_Init+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_Init+0x28>)
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f923 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fd30 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f93b 	bl	8001b02 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f903 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_IncTick+0x20>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a03      	ldr	r2, [pc, #12]	@ (80018e8 <HAL_IncTick+0x20>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000350 	.word	0x20000350

080018ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b02      	ldr	r3, [pc, #8]	@ (80018fc <HAL_GetTick+0x10>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000350 	.word	0x20000350

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	@ (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff2d 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e020      	b.n	8001b86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 020e 	bic.w	r2, r2, #14
 8001b52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e051      	b.n	8001c58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 020e 	bic.w	r2, r2, #14
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <HAL_DMA_Abort_IT+0xd4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d029      	beq.n	8001c32 <HAL_DMA_Abort_IT+0xa2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <HAL_DMA_Abort_IT+0xd8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_Abort_IT+0x9e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_DMA_Abort_IT+0xdc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01a      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x98>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <HAL_DMA_Abort_IT+0xe0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d012      	beq.n	8001c22 <HAL_DMA_Abort_IT+0x92>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <HAL_DMA_Abort_IT+0xe4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00a      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x8c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <HAL_DMA_Abort_IT+0xe8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d102      	bne.n	8001c16 <HAL_DMA_Abort_IT+0x86>
 8001c10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c14:	e00e      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c1a:	e00b      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c20:	e008      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c26:	e005      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c2c:	e002      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c2e:	2310      	movs	r3, #16
 8001c30:	e000      	b.n	8001c34 <HAL_DMA_Abort_IT+0xa4>
 8001c32:	2301      	movs	r3, #1
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_DMA_Abort_IT+0xec>)
 8001c36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
    } 
  }
  return status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020008 	.word	0x40020008
 8001c68:	4002001c 	.word	0x4002001c
 8001c6c:	40020030 	.word	0x40020030
 8001c70:	40020044 	.word	0x40020044
 8001c74:	40020058 	.word	0x40020058
 8001c78:	4002006c 	.word	0x4002006c
 8001c7c:	40020000 	.word	0x40020000

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b08b      	sub	sp, #44	@ 0x2c
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e169      	b.n	8001f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c94:	2201      	movs	r2, #1
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8158 	bne.w	8001f62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f20 <HAL_GPIO_Init+0x2a0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d05e      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a98      	ldr	r2, [pc, #608]	@ (8001f20 <HAL_GPIO_Init+0x2a0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d875      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cc2:	4a98      	ldr	r2, [pc, #608]	@ (8001f24 <HAL_GPIO_Init+0x2a4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d058      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cc8:	4a96      	ldr	r2, [pc, #600]	@ (8001f24 <HAL_GPIO_Init+0x2a4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d86f      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cce:	4a96      	ldr	r2, [pc, #600]	@ (8001f28 <HAL_GPIO_Init+0x2a8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d052      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cd4:	4a94      	ldr	r2, [pc, #592]	@ (8001f28 <HAL_GPIO_Init+0x2a8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d869      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cda:	4a94      	ldr	r2, [pc, #592]	@ (8001f2c <HAL_GPIO_Init+0x2ac>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d04c      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001ce0:	4a92      	ldr	r2, [pc, #584]	@ (8001f2c <HAL_GPIO_Init+0x2ac>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d863      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001ce6:	4a92      	ldr	r2, [pc, #584]	@ (8001f30 <HAL_GPIO_Init+0x2b0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d046      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cec:	4a90      	ldr	r2, [pc, #576]	@ (8001f30 <HAL_GPIO_Init+0x2b0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d85d      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d82a      	bhi.n	8001d4c <HAL_GPIO_Init+0xcc>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d859      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <HAL_GPIO_Init+0x80>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001d67 	.word	0x08001d67
 8001d0c:	08001da9 	.word	0x08001da9
 8001d10:	08001daf 	.word	0x08001daf
 8001d14:	08001daf 	.word	0x08001daf
 8001d18:	08001daf 	.word	0x08001daf
 8001d1c:	08001daf 	.word	0x08001daf
 8001d20:	08001daf 	.word	0x08001daf
 8001d24:	08001daf 	.word	0x08001daf
 8001d28:	08001daf 	.word	0x08001daf
 8001d2c:	08001daf 	.word	0x08001daf
 8001d30:	08001daf 	.word	0x08001daf
 8001d34:	08001daf 	.word	0x08001daf
 8001d38:	08001daf 	.word	0x08001daf
 8001d3c:	08001daf 	.word	0x08001daf
 8001d40:	08001daf 	.word	0x08001daf
 8001d44:	08001d5d 	.word	0x08001d5d
 8001d48:	08001d71 	.word	0x08001d71
 8001d4c:	4a79      	ldr	r2, [pc, #484]	@ (8001f34 <HAL_GPIO_Init+0x2b4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d52:	e02c      	b.n	8001dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e029      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	3304      	adds	r3, #4
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e024      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e01f      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	330c      	adds	r3, #12
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e01a      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d82:	2304      	movs	r3, #4
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e013      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d90:	2308      	movs	r3, #8
 8001d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	611a      	str	r2, [r3, #16]
          break;
 8001d9a:	e009      	b.n	8001db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	615a      	str	r2, [r3, #20]
          break;
 8001da6:	e003      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          break;
 8001dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d801      	bhi.n	8001dba <HAL_GPIO_Init+0x13a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	e001      	b.n	8001dbe <HAL_GPIO_Init+0x13e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2bff      	cmp	r3, #255	@ 0xff
 8001dc4:	d802      	bhi.n	8001dcc <HAL_GPIO_Init+0x14c>
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	e002      	b.n	8001dd2 <HAL_GPIO_Init+0x152>
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	3b08      	subs	r3, #8
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	210f      	movs	r1, #15
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	6a39      	ldr	r1, [r7, #32]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80b1 	beq.w	8001f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e00:	4b4d      	ldr	r3, [pc, #308]	@ (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e18:	4a48      	ldr	r2, [pc, #288]	@ (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a40      	ldr	r2, [pc, #256]	@ (8001f40 <HAL_GPIO_Init+0x2c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_GPIO_Init+0x1ec>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3f      	ldr	r2, [pc, #252]	@ (8001f44 <HAL_GPIO_Init+0x2c4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <HAL_GPIO_Init+0x1e8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f48 <HAL_GPIO_Init+0x2c8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_Init+0x1e4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3d      	ldr	r2, [pc, #244]	@ (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e006      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e004      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e7e:	492f      	ldr	r1, [pc, #188]	@ (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	492c      	ldr	r1, [pc, #176]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4928      	ldr	r1, [pc, #160]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec0:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4922      	ldr	r1, [pc, #136]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	491e      	ldr	r1, [pc, #120]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4918      	ldr	r1, [pc, #96]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4914      	ldr	r1, [pc, #80]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d021      	beq.n	8001f54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	490e      	ldr	r1, [pc, #56]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e021      	b.n	8001f62 <HAL_GPIO_Init+0x2e2>
 8001f1e:	bf00      	nop
 8001f20:	10320000 	.word	0x10320000
 8001f24:	10310000 	.word	0x10310000
 8001f28:	10220000 	.word	0x10220000
 8001f2c:	10210000 	.word	0x10210000
 8001f30:	10120000 	.word	0x10120000
 8001f34:	10110000 	.word	0x10110000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40011400 	.word	0x40011400
 8001f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_GPIO_Init+0x304>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4909      	ldr	r1, [pc, #36]	@ (8001f84 <HAL_GPIO_Init+0x304>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	3301      	adds	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae8e 	bne.w	8001c94 <HAL_GPIO_Init+0x14>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	372c      	adds	r7, #44	@ 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43d9      	mvns	r1, r3
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	611a      	str	r2, [r3, #16]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	420e0020 	.word	0x420e0020

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e272      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8087 	beq.w	8002132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002024:	4b92      	ldr	r3, [pc, #584]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b04      	cmp	r3, #4
 800202e:	d00c      	beq.n	800204a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002030:	4b8f      	ldr	r3, [pc, #572]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d112      	bne.n	8002062 <HAL_RCC_OscConfig+0x5e>
 800203c:	4b8c      	ldr	r3, [pc, #560]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b89      	ldr	r3, [pc, #548]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d06c      	beq.n	8002130 <HAL_RCC_OscConfig+0x12c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d168      	bne.n	8002130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e24c      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x76>
 800206c:	4b80      	ldr	r3, [pc, #512]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a7f      	ldr	r2, [pc, #508]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e02e      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b7b      	ldr	r3, [pc, #492]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7a      	ldr	r2, [pc, #488]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b78      	ldr	r3, [pc, #480]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a77      	ldr	r2, [pc, #476]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0xbc>
 80020a6:	4b72      	ldr	r3, [pc, #456]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a71      	ldr	r2, [pc, #452]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xd4>
 80020c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b68      	ldr	r3, [pc, #416]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a67      	ldr	r2, [pc, #412]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fc04 	bl	80018ec <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fc00 	bl	80018ec <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e200      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe4>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fbf0 	bl	80018ec <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fbec 	bl	80018ec <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1ec      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b53      	ldr	r3, [pc, #332]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x10c>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	4b4c      	ldr	r3, [pc, #304]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214a:	4b49      	ldr	r3, [pc, #292]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x18c>
 8002156:	4b46      	ldr	r3, [pc, #280]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x176>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c0      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4939      	ldr	r1, [pc, #228]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <HAL_RCC_OscConfig+0x270>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff fba5 	bl	80018ec <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff fba1 	bl	80018ec <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a1      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4927      	ldr	r1, [pc, #156]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <HAL_RCC_OscConfig+0x270>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fb84 	bl	80018ec <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff fb80 	bl	80018ec <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e180      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03a      	beq.n	8002288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d019      	beq.n	800224e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_RCC_OscConfig+0x274>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff fb64 	bl	80018ec <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fb60 	bl	80018ec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e160      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_RCC_OscConfig+0x26c>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 face 	bl	80027e8 <RCC_Delay>
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_RCC_OscConfig+0x274>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7ff fb4a 	bl	80018ec <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225a:	e00f      	b.n	800227c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff fb46 	bl	80018ec <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d908      	bls.n	800227c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e146      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	42420000 	.word	0x42420000
 8002278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b92      	ldr	r3, [pc, #584]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e9      	bne.n	800225c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a6 	beq.w	80023e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b8b      	ldr	r3, [pc, #556]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b88      	ldr	r3, [pc, #544]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a87      	ldr	r2, [pc, #540]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b82      	ldr	r3, [pc, #520]	@ (80024cc <HAL_RCC_OscConfig+0x4c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b7f      	ldr	r3, [pc, #508]	@ (80024cc <HAL_RCC_OscConfig+0x4c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7e      	ldr	r2, [pc, #504]	@ (80024cc <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7ff fb07 	bl	80018ec <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7ff fb03 	bl	80018ec <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	@ 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e103      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <HAL_RCC_OscConfig+0x4c8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x312>
 8002308:	4b6f      	ldr	r3, [pc, #444]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a6e      	ldr	r2, [pc, #440]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e02d      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x334>
 800231e:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a69      	ldr	r2, [pc, #420]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b67      	ldr	r3, [pc, #412]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a66      	ldr	r2, [pc, #408]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	e01c      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x356>
 8002340:	4b61      	ldr	r3, [pc, #388]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a60      	ldr	r2, [pc, #384]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	4b5e      	ldr	r3, [pc, #376]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a5d      	ldr	r2, [pc, #372]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	e00b      	b.n	8002372 <HAL_RCC_OscConfig+0x36e>
 800235a:	4b5b      	ldr	r3, [pc, #364]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a5a      	ldr	r2, [pc, #360]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4b58      	ldr	r3, [pc, #352]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a57      	ldr	r2, [pc, #348]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fab7 	bl	80018ec <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff fab3 	bl	80018ec <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0b1      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <HAL_RCC_OscConfig+0x37e>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff faa1 	bl	80018ec <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fa9d 	bl	80018ec <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e09b      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a3b      	ldr	r2, [pc, #236]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d061      	beq.n	80024bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d146      	bne.n	800248e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002400:	4b33      	ldr	r3, [pc, #204]	@ (80024d0 <HAL_RCC_OscConfig+0x4cc>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fa71 	bl	80018ec <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7ff fa6d 	bl	80018ec <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e06d      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d108      	bne.n	8002448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4921      	ldr	r1, [pc, #132]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a19      	ldr	r1, [r3, #32]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	430b      	orrs	r3, r1
 800245a:	491b      	ldr	r1, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fa41 	bl	80018ec <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff fa3d 	bl	80018ec <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03d      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x46a>
 800248c:	e035      	b.n	80024fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_RCC_OscConfig+0x4cc>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fa2a 	bl	80018ec <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7ff fa26 	bl	80018ec <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e026      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x498>
 80024ba:	e01e      	b.n	80024fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e019      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
 80024d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_OscConfig+0x500>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	4965      	ldr	r1, [pc, #404]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a58      	ldr	r2, [pc, #352]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800256e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a52      	ldr	r2, [pc, #328]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff f978 	bl	80018ec <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f974 	bl	80018ec <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4922      	ldr	r1, [pc, #136]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f8d6 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08008fe0 	.word	0x08008fe0
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x30>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x36>
 800270a:	e027      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	613b      	str	r3, [r7, #16]
      break;
 8002710:	e027      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0c5b      	lsrs	r3, r3, #17
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	4a11      	ldr	r2, [pc, #68]	@ (800277c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	fb03 f202 	mul.w	r2, r3, r2
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e004      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0c      	ldr	r2, [pc, #48]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	613b      	str	r3, [r7, #16]
      break;
 800275a:	e002      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800275e:	613b      	str	r3, [r7, #16]
      break;
 8002760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002762:	693b      	ldr	r3, [r7, #16]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	08008ff8 	.word	0x08008ff8
 800277c:	08009008 	.word	0x08009008
 8002780:	003d0900 	.word	0x003d0900

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b02      	ldr	r3, [pc, #8]	@ (8002794 <HAL_RCC_GetHCLKFreq+0x10>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff2 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08008ff0 	.word	0x08008ff0

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffde 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08008ff0 	.word	0x08008ff0

080027e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <RCC_Delay+0x34>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <RCC_Delay+0x38>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a5b      	lsrs	r3, r3, #9
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002804:	bf00      	nop
  }
  while (Delay --);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	60fa      	str	r2, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f9      	bne.n	8002804 <RCC_Delay+0x1c>
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000000 	.word	0x20000000
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d07d      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002844:	4b4f      	ldr	r3, [pc, #316]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	61d3      	str	r3, [r2, #28]
 800285c:	4b49      	ldr	r3, [pc, #292]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b46      	ldr	r3, [pc, #280]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d118      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002878:	4b43      	ldr	r3, [pc, #268]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a42      	ldr	r2, [pc, #264]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002884:	f7ff f832 	bl	80018ec <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	e008      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7ff f82e 	bl	80018ec <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e06d      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028aa:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02e      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d027      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d2:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028de:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe fffd 	bl	80018ec <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fff9 	bl	80018ec <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e036      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ee      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4917      	ldr	r1, [pc, #92]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	4313      	orrs	r3, r2
 8002928:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800293a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	490b      	ldr	r1, [pc, #44]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	4904      	ldr	r1, [pc, #16]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	42420440 	.word	0x42420440

08002990 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	f200 808a 	bhi.w	8002ace <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d045      	beq.n	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80029c6:	e082      	b.n	8002ace <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80029c8:	4b46      	ldr	r3, [pc, #280]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029ce:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d07b      	beq.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a41      	ldr	r2, [pc, #260]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0c5b      	lsrs	r3, r3, #17
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	4a3b      	ldr	r2, [pc, #236]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a0c:	4a38      	ldr	r2, [pc, #224]	@ (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e004      	b.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4a34      	ldr	r2, [pc, #208]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a34:	d102      	bne.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	61bb      	str	r3, [r7, #24]
      break;
 8002a3a:	e04a      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4a2d      	ldr	r2, [pc, #180]	@ (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
      break;
 8002a4a:	e042      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e01f      	b.n	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a88:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a9a:	d11c      	bne.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002aa8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002aac:	61bb      	str	r3, [r7, #24]
      break;
 8002aae:	e012      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ab2:	f7ff fe85 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0b9b      	lsrs	r3, r3, #14
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	61bb      	str	r3, [r7, #24]
      break;
 8002acc:	e004      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ad6:	bf00      	nop
    }
  }
  return (frequency);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	0800900c 	.word	0x0800900c
 8002aec:	0800901c 	.word	0x0800901c
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	003d0900 	.word	0x003d0900
 8002af8:	aaaaaaab 	.word	0xaaaaaaab

08002afc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07a      	b.n	8002c08 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7c5b      	ldrb	r3, [r3, #17]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe fbfc 	bl	8001320 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9be 	bl	8002eb0 <HAL_RTC_WaitForSynchro>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e061      	b.n	8002c08 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa77 	bl	8003038 <RTC_EnterInitMode>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2204      	movs	r2, #4
 8002b54:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e056      	b.n	8002c08 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0207 	bic.w	r2, r2, #7
 8002b68:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002b72:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <HAL_RTC_Init+0x114>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <HAL_RTC_Init+0x114>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RTC_Init+0x114>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4921      	ldr	r1, [pc, #132]	@ (8002c10 <HAL_RTC_Init+0x114>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d003      	beq.n	8002ba2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7ff fef4 	bl	8002990 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ba8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e026      	b.n	8002c08 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0c1a      	lsrs	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 020f 	and.w	r2, r2, #15
 8002bcc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa55 	bl	8003088 <RTC_ExitInitMode>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2204      	movs	r2, #4
 8002be8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00c      	b.n	8002c08 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40006c00 	.word	0x40006c00

08002c14 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_RTC_SetTime+0x20>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e080      	b.n	8002d3a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	7c1b      	ldrb	r3, [r3, #16]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_RTC_SetTime+0x30>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e07a      	b.n	8002d3a <HAL_RTC_SetTime+0x126>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002c60:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a5b      	subs	r3, r3, r1
 8002c70:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c72:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002c78:	4413      	add	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e01e      	b.n	8002cbc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa28 	bl	80030d8 <RTC_Bcd2ToByte>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002c90:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fa1d 	bl	80030d8 <RTC_Bcd2ToByte>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002caa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	789b      	ldrb	r3, [r3, #2]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fa11 	bl	80030d8 <RTC_Bcd2ToByte>
 8002cb6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002cb8:	4423      	add	r3, r4
 8002cba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002cbc:	6979      	ldr	r1, [r7, #20]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f953 	bl	8002f6a <RTC_WriteTimeCounter>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e02f      	b.n	8002d3a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0205 	bic.w	r2, r2, #5
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f964 	bl	8002fb8 <RTC_ReadAlarmCounter>
 8002cf0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d018      	beq.n	8002d2c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d214      	bcs.n	8002d2c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002d08:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002d0c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f96a 	bl	8002fea <RTC_WriteAlarmCounter>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e006      	b.n	8002d3a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}
	...

08002d44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_RTC_SetDate+0x24>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e097      	b.n	8002e9c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	7c1b      	ldrb	r3, [r3, #16]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_RTC_SetDate+0x34>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e091      	b.n	8002e9c <HAL_RTC_SetDate+0x158>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2202      	movs	r2, #2
 8002d82:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	78da      	ldrb	r2, [r3, #3]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785a      	ldrb	r2, [r3, #1]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	789a      	ldrb	r2, [r3, #2]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	739a      	strb	r2, [r3, #14]
 8002da2:	e01a      	b.n	8002dda <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f995 	bl	80030d8 <RTC_Bcd2ToByte>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	785b      	ldrb	r3, [r3, #1]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f98c 	bl	80030d8 <RTC_Bcd2ToByte>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	789b      	ldrb	r3, [r3, #2]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f983 	bl	80030d8 <RTC_Bcd2ToByte>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	7bdb      	ldrb	r3, [r3, #15]
 8002dde:	4618      	mov	r0, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	7b59      	ldrb	r1, [r3, #13]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	7b9b      	ldrb	r3, [r3, #14]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f000 f993 	bl	8003114 <RTC_WeekDayNum>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	7b1a      	ldrb	r2, [r3, #12]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f883 	bl	8002f0a <RTC_ReadTimeCounter>
 8002e04:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_RTC_SetDate+0x160>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0adb      	lsrs	r3, r3, #11
 8002e10:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b18      	cmp	r3, #24
 8002e16:	d93a      	bls.n	8002e8e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_RTC_SetDate+0x164>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_RTC_SetDate+0x168>)
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002e2e:	69f9      	ldr	r1, [r7, #28]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f89a 	bl	8002f6a <RTC_WriteTimeCounter>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e027      	b.n	8002e9c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f8b3 	bl	8002fb8 <RTC_ReadAlarmCounter>
 8002e52:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d018      	beq.n	8002e8e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d214      	bcs.n	8002e8e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002e6a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002e6e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8b9 	bl	8002fea <RTC_WriteAlarmCounter>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2204      	movs	r2, #4
 8002e82:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e006      	b.n	8002e9c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	91a2b3c5 	.word	0x91a2b3c5
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	00015180 	.word	0x00015180

08002eb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e01d      	b.n	8002f02 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ed6:	f7fe fd09 	bl	80018ec <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002edc:	e009      	b.n	8002ef2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ede:	f7fe fd05 	bl	80018ec <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eec:	d901      	bls.n	8002ef2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e007      	b.n	8002f02 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	827b      	strh	r3, [r7, #18]
 8002f16:	2300      	movs	r3, #0
 8002f18:	823b      	strh	r3, [r7, #16]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002f3a:	8a7a      	ldrh	r2, [r7, #18]
 8002f3c:	8a3b      	ldrh	r3, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d008      	beq.n	8002f54 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002f42:	8a3b      	ldrh	r3, [r7, #16]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e004      	b.n	8002f5e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002f54:	8a7b      	ldrh	r3, [r7, #18]
 8002f56:	041a      	lsls	r2, r3, #16
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002f5e:	697b      	ldr	r3, [r7, #20]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f85d 	bl	8003038 <RTC_EnterInitMode>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e011      	b.n	8002fae <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	0c12      	lsrs	r2, r2, #16
 8002f92:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f872 	bl	8003088 <RTC_ExitInitMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	81fb      	strh	r3, [r7, #14]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	041a      	lsls	r2, r3, #16
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f81d 	bl	8003038 <RTC_EnterInitMode>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e011      	b.n	800302e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	0c12      	lsrs	r2, r2, #16
 8003012:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	b292      	uxth	r2, r2
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f832 	bl	8003088 <RTC_ExitInitMode>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003044:	f7fe fc52 	bl	80018ec <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800304a:	e009      	b.n	8003060 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800304c:	f7fe fc4e 	bl	80018ec <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800305a:	d901      	bls.n	8003060 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e00f      	b.n	8003080 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0210 	orr.w	r2, r2, #16
 800307c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0210 	bic.w	r2, r2, #16
 80030a2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030a4:	f7fe fc22 	bl	80018ec <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030aa:	e009      	b.n	80030c0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030ac:	f7fe fc1e 	bl	80018ec <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030ba:	d901      	bls.n	80030c0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e007      	b.n	80030d0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4413      	add	r3, r2
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
 8003120:	4613      	mov	r3, r2
 8003122:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003132:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d82d      	bhi.n	8003196 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <RTC_WeekDayNum+0xe4>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	085a      	lsrs	r2, r3, #1
 800314e:	78bb      	ldrb	r3, [r7, #2]
 8003150:	441a      	add	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	441a      	add	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3b01      	subs	r3, #1
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3b01      	subs	r3, #1
 8003162:	4926      	ldr	r1, [pc, #152]	@ (80031fc <RTC_WeekDayNum+0xe8>)
 8003164:	fba1 1303 	umull	r1, r3, r1, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	3b01      	subs	r3, #1
 8003170:	4922      	ldr	r1, [pc, #136]	@ (80031fc <RTC_WeekDayNum+0xe8>)
 8003172:	fba1 1303 	umull	r1, r3, r1, r3
 8003176:	09db      	lsrs	r3, r3, #7
 8003178:	4413      	add	r3, r2
 800317a:	1d1a      	adds	r2, r3, #4
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <RTC_WeekDayNum+0xec>)
 800317e:	fba3 1302 	umull	r1, r3, r3, r2
 8003182:	1ad1      	subs	r1, r2, r3
 8003184:	0849      	lsrs	r1, r1, #1
 8003186:	440b      	add	r3, r1
 8003188:	0899      	lsrs	r1, r3, #2
 800318a:	460b      	mov	r3, r1
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a5b      	subs	r3, r3, r1
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e029      	b.n	80031ea <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <RTC_WeekDayNum+0xe4>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	085a      	lsrs	r2, r3, #1
 80031aa:	78bb      	ldrb	r3, [r7, #2]
 80031ac:	441a      	add	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	441a      	add	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4910      	ldr	r1, [pc, #64]	@ (80031fc <RTC_WeekDayNum+0xe8>)
 80031bc:	fba1 1303 	umull	r1, r3, r1, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	490d      	ldr	r1, [pc, #52]	@ (80031fc <RTC_WeekDayNum+0xe8>)
 80031c8:	fba1 1303 	umull	r1, r3, r1, r3
 80031cc:	09db      	lsrs	r3, r3, #7
 80031ce:	4413      	add	r3, r2
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <RTC_WeekDayNum+0xec>)
 80031d4:	fba3 1302 	umull	r1, r3, r3, r2
 80031d8:	1ad1      	subs	r1, r2, r3
 80031da:	0849      	lsrs	r1, r1, #1
 80031dc:	440b      	add	r3, r1
 80031de:	0899      	lsrs	r1, r3, #2
 80031e0:	460b      	mov	r3, r1
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a5b      	subs	r3, r3, r1
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	b2db      	uxtb	r3, r3
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	38e38e39 	.word	0x38e38e39
 80031fc:	51eb851f 	.word	0x51eb851f
 8003200:	24924925 	.word	0x24924925

08003204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e041      	b.n	800329a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe f89c 	bl	8001368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fab2 	bl	80037ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e041      	b.n	8003338 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f839 	bl	8003340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f000 fa63 	bl	80037ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_TIM_PWM_Start+0x24>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e022      	b.n	80033be <HAL_TIM_PWM_Start+0x6a>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d109      	bne.n	8003392 <HAL_TIM_PWM_Start+0x3e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e015      	b.n	80033be <HAL_TIM_PWM_Start+0x6a>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d109      	bne.n	80033ac <HAL_TIM_PWM_Start+0x58>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e008      	b.n	80033be <HAL_TIM_PWM_Start+0x6a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e05e      	b.n	8003484 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x82>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	e013      	b.n	80033fe <HAL_TIM_PWM_Start+0xaa>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x92>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033e4:	e00b      	b.n	80033fe <HAL_TIM_PWM_Start+0xaa>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_PWM_Start+0xa2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f4:	e003      	b.n	80033fe <HAL_TIM_PWM_Start+0xaa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2201      	movs	r2, #1
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc5c 	bl	8003cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	@ (800348c <HAL_TIM_PWM_Start+0x138>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d107      	bne.n	8003426 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a18      	ldr	r2, [pc, #96]	@ (800348c <HAL_TIM_PWM_Start+0x138>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_TIM_PWM_Start+0xfa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d009      	beq.n	800344e <HAL_TIM_PWM_Start+0xfa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <HAL_TIM_PWM_Start+0x13c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIM_PWM_Start+0xfa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_TIM_PWM_Start+0x140>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d010      	beq.n	8003482 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	e007      	b.n	8003482 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800

08003498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0ae      	b.n	8003614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	f200 809f 	bhi.w	8003604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034c6:	a201      	add	r2, pc, #4	@ (adr r2, 80034cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	08003501 	.word	0x08003501
 80034d0:	08003605 	.word	0x08003605
 80034d4:	08003605 	.word	0x08003605
 80034d8:	08003605 	.word	0x08003605
 80034dc:	08003541 	.word	0x08003541
 80034e0:	08003605 	.word	0x08003605
 80034e4:	08003605 	.word	0x08003605
 80034e8:	08003605 	.word	0x08003605
 80034ec:	08003583 	.word	0x08003583
 80034f0:	08003605 	.word	0x08003605
 80034f4:	08003605 	.word	0x08003605
 80034f8:	08003605 	.word	0x08003605
 80034fc:	080035c3 	.word	0x080035c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f9be 	bl	8003888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6999      	ldr	r1, [r3, #24]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	619a      	str	r2, [r3, #24]
      break;
 800353e:	e064      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa04 	bl	8003954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800355a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6999      	ldr	r1, [r3, #24]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	619a      	str	r2, [r3, #24]
      break;
 8003580:	e043      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fa4d 	bl	8003a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0208 	orr.w	r2, r2, #8
 800359c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0204 	bic.w	r2, r2, #4
 80035ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69d9      	ldr	r1, [r3, #28]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
      break;
 80035c0:	e023      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fa97 	bl	8003afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69d9      	ldr	r1, [r3, #28]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	021a      	lsls	r2, r3, #8
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	61da      	str	r2, [r3, #28]
      break;
 8003602:	e002      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
      break;
 8003608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_ConfigClockSource+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e0b4      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x186>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800365e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003670:	d03e      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003676:	f200 8087 	bhi.w	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800367e:	f000 8086 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x172>
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003686:	d87f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b70      	cmp	r3, #112	@ 0x70
 800368a:	d01a      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xa6>
 800368c:	2b70      	cmp	r3, #112	@ 0x70
 800368e:	d87b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003690:	2b60      	cmp	r3, #96	@ 0x60
 8003692:	d050      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x11a>
 8003694:	2b60      	cmp	r3, #96	@ 0x60
 8003696:	d877      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b50      	cmp	r3, #80	@ 0x50
 800369a:	d03c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0xfa>
 800369c:	2b50      	cmp	r3, #80	@ 0x50
 800369e:	d873      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b40      	cmp	r3, #64	@ 0x40
 80036a2:	d058      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x13a>
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d86f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b30      	cmp	r3, #48	@ 0x30
 80036aa:	d064      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d86b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d060      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d867      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05c      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d05a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	e062      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d2:	f000 fad8 	bl	8003c86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e04f      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003700:	f000 fac1 	bl	8003c86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003712:	609a      	str	r2, [r3, #8]
      break;
 8003714:	e03c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	461a      	mov	r2, r3
 8003724:	f000 fa38 	bl	8003b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2150      	movs	r1, #80	@ 0x50
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa8f 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003734:	e02c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	461a      	mov	r2, r3
 8003744:	f000 fa56 	bl	8003bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2160      	movs	r1, #96	@ 0x60
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fa7f 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003754:	e01c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	461a      	mov	r2, r3
 8003764:	f000 fa18 	bl	8003b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2140      	movs	r1, #64	@ 0x40
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa6f 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003774:	e00c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f000 fa66 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003786:	e003      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e000      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800378e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a2f      	ldr	r2, [pc, #188]	@ (800387c <TIM_Base_SetConfig+0xd0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_Base_SetConfig+0x30>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ca:	d007      	beq.n	80037dc <TIM_Base_SetConfig+0x30>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003880 <TIM_Base_SetConfig+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0x30>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <TIM_Base_SetConfig+0xd8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d108      	bne.n	80037ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a22      	ldr	r2, [pc, #136]	@ (800387c <TIM_Base_SetConfig+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_Base_SetConfig+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fc:	d007      	beq.n	800380e <TIM_Base_SetConfig+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <TIM_Base_SetConfig+0xd4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x62>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <TIM_Base_SetConfig+0xd8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0d      	ldr	r2, [pc, #52]	@ (800387c <TIM_Base_SetConfig+0xd0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
  }
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800

08003888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0201 	bic.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 0302 	bic.w	r3, r3, #2
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1c      	ldr	r2, [pc, #112]	@ (8003950 <TIM_OC1_SetConfig+0xc8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10c      	bne.n	80038fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0308 	bic.w	r3, r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <TIM_OC1_SetConfig+0xc8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d111      	bne.n	800392a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00

08003954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 0210 	bic.w	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <TIM_OC2_SetConfig+0xd0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10d      	bne.n	80039d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <TIM_OC2_SetConfig+0xd0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d113      	bne.n	8003a00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00

08003a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <TIM_OC3_SetConfig+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10d      	bne.n	8003aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <TIM_OC3_SetConfig+0xd0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00

08003afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <TIM_OC4_SetConfig+0x98>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d109      	bne.n	8003b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40012c00 	.word	0x40012c00

08003b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f023 030a 	bic.w	r3, r3, #10
 8003bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0210 	bic.w	r2, r3, #16
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	031b      	lsls	r3, r3, #12
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 0307 	orr.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b087      	sub	sp, #28
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	609a      	str	r2, [r3, #8]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e046      	b.n	8003db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d70:	d009      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a12      	ldr	r2, [pc, #72]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a10      	ldr	r2, [pc, #64]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10c      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800

08003dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e042      	b.n	8003e60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd fb52 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fcd5 	bl	80047bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d112      	bne.n	8003ea8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_UART_Receive_IT+0x26>
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00b      	b.n	8003eaa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fab7 	bl	8004412 <UART_Start_Receive_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_UART_IRQHandler+0x66>
 8003f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fb93 	bl	800463e <UART_Receive_IT>
      return;
 8003f18:	e25b      	b.n	80043d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80de 	beq.w	80040e0 <HAL_UART_IRQHandler+0x22c>
 8003f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80d1 	beq.w	80040e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_UART_IRQHandler+0xae>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xd2>
 8003f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xf6>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0204 	orr.w	r2, r3, #4
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d011      	beq.n	8003fda <HAL_UART_IRQHandler+0x126>
 8003fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f043 0208 	orr.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 81f2 	beq.w	80043c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_UART_IRQHandler+0x14e>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fb1e 	bl	800463e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_UART_IRQHandler+0x17a>
 8004026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d04f      	beq.n	80040ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa28 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d041      	beq.n	80040c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800405c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800406e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800407a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1d9      	bne.n	8004042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409a:	4a7e      	ldr	r2, [pc, #504]	@ (8004294 <HAL_UART_IRQHandler+0x3e0>)
 800409c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fd74 	bl	8001b90 <HAL_DMA_Abort_IT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040b8:	4610      	mov	r0, r2
 80040ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e00e      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f993 	bl	80043ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e00a      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f98f 	bl	80043ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	e006      	b.n	80040dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f98b 	bl	80043ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040da:	e175      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	bf00      	nop
    return;
 80040de:	e173      	b.n	80043c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 814f 	bne.w	8004388 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8148 	beq.w	8004388 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8141 	beq.w	8004388 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80b6 	beq.w	8004298 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8145 	beq.w	80043cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800414a:	429a      	cmp	r2, r3
 800414c:	f080 813e 	bcs.w	80043cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004156:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b20      	cmp	r3, #32
 8004160:	f000 8088 	beq.w	8004274 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800417a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800417e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004182:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004190:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800419c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1d9      	bne.n	8004164 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e1      	bne.n	80041b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004210:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004212:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004216:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800421e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e3      	bne.n	80041ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004244:	f023 0310 	bic.w	r3, r3, #16
 8004248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004256:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004258:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800425c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e3      	bne.n	8004232 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd fc53 	bl	8001b1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004282:	b29b      	uxth	r3, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8b6 	bl	80043fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004290:	e09c      	b.n	80043cc <HAL_UART_IRQHandler+0x518>
 8004292:	bf00      	nop
 8004294:	08004549 	.word	0x08004549
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 808e 	beq.w	80043d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8089 	beq.w	80043d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e3      	bne.n	80042be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	623b      	str	r3, [r7, #32]
   return(result);
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800431a:	633a      	str	r2, [r7, #48]	@ 0x30
 800431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e3      	bne.n	80042f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60fb      	str	r3, [r7, #12]
   return(result);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004360:	61fa      	str	r2, [r7, #28]
 8004362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	69b9      	ldr	r1, [r7, #24]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	617b      	str	r3, [r7, #20]
   return(result);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f83b 	bl	80043fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004386:	e023      	b.n	80043d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <HAL_UART_IRQHandler+0x4f4>
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8e5 	bl	8004570 <UART_Transmit_IT>
    return;
 80043a6:	e014      	b.n	80043d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00e      	beq.n	80043d2 <HAL_UART_IRQHandler+0x51e>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f924 	bl	800460e <UART_EndTransmit_IT>
    return;
 80043c6:	e004      	b.n	80043d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80043c8:	bf00      	nop
 80043ca:	e002      	b.n	80043d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043d0:	bf00      	nop
  }
}
 80043d2:	37e8      	adds	r7, #232	@ 0xe8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	88fa      	ldrh	r2, [r7, #6]
 800442a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2222      	movs	r2, #34	@ 0x22
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004456:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0220 	orr.w	r2, r2, #32
 8004476:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b095      	sub	sp, #84	@ 0x54
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d119      	bne.n	8004530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60bb      	str	r3, [r7, #8]
   return(result);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	647b      	str	r3, [r7, #68]	@ 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451c:	61ba      	str	r2, [r7, #24]
 800451e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	@ 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff ff41 	bl	80043ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b21      	cmp	r3, #33	@ 0x21
 8004582:	d13e      	bne.n	8004602 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d114      	bne.n	80045b8 <UART_Transmit_IT+0x48>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d110      	bne.n	80045b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]
 80045b6:	e008      	b.n	80045ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6211      	str	r1, [r2, #32]
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4619      	mov	r1, r3
 80045d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fed2 	bl	80043d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08c      	sub	sp, #48	@ 0x30
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b22      	cmp	r3, #34	@ 0x22
 8004650:	f040 80ae 	bne.w	80047b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465c:	d117      	bne.n	800468e <UART_Receive_IT+0x50>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	b29a      	uxth	r2, r3
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28
 800468c:	e026      	b.n	80046dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a0:	d007      	beq.n	80046b2 <UART_Receive_IT+0x74>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <UART_Receive_IT+0x82>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e008      	b.n	80046d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4619      	mov	r1, r3
 80046ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d15d      	bne.n	80047ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0220 	bic.w	r2, r2, #32
 80046fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	2b01      	cmp	r3, #1
 8004734:	d135      	bne.n	80047a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	613b      	str	r3, [r7, #16]
   return(result);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475c:	623a      	str	r2, [r7, #32]
 800475e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	69f9      	ldr	r1, [r7, #28]
 8004762:	6a3a      	ldr	r2, [r7, #32]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	61bb      	str	r3, [r7, #24]
   return(result);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b10      	cmp	r3, #16
 800477c:	d10a      	bne.n	8004794 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fe2e 	bl	80043fc <HAL_UARTEx_RxEventCallback>
 80047a0:	e002      	b.n	80047a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc fd5a 	bl	800125c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e002      	b.n	80047b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3730      	adds	r7, #48	@ 0x30
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047f6:	f023 030c 	bic.w	r3, r3, #12
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	430b      	orrs	r3, r1
 8004802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <UART_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fd ffcc 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	e002      	b.n	8004832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fd ffb4 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8004830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009a      	lsls	r2, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	0119      	lsls	r1, r3, #4
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009a      	lsls	r2, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fbb2 f2f3 	udiv	r2, r2, r3
 8004868:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <UART_SetConfig+0x118>)
 800486a:	fba3 0302 	umull	r0, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2064      	movs	r0, #100	@ 0x64
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	@ 0x32
 800487c:	4a15      	ldr	r2, [pc, #84]	@ (80048d4 <UART_SetConfig+0x118>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	4419      	add	r1, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009a      	lsls	r2, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a0:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <UART_SetConfig+0x118>)
 80048a2:	fba3 0302 	umull	r0, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2064      	movs	r0, #100	@ 0x64
 80048aa:	fb00 f303 	mul.w	r3, r0, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	@ 0x32
 80048b4:	4a07      	ldr	r2, [pc, #28]	@ (80048d4 <UART_SetConfig+0x118>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	440a      	add	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40013800 	.word	0x40013800
 80048d4:	51eb851f 	.word	0x51eb851f

080048d8 <atoi>:
 80048d8:	220a      	movs	r2, #10
 80048da:	2100      	movs	r1, #0
 80048dc:	f000 be7e 	b.w	80055dc <strtol>

080048e0 <sulp>:
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	460f      	mov	r7, r1
 80048e6:	4690      	mov	r8, r2
 80048e8:	f003 fce6 	bl	80082b8 <__ulp>
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
 80048f0:	f1b8 0f00 	cmp.w	r8, #0
 80048f4:	d011      	beq.n	800491a <sulp+0x3a>
 80048f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80048fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80048fe:	2b00      	cmp	r3, #0
 8004900:	dd0b      	ble.n	800491a <sulp+0x3a>
 8004902:	2400      	movs	r4, #0
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800490a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	f7fb fde1 	bl	80004d8 <__aeabi_dmul>
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004922:	0000      	movs	r0, r0
 8004924:	0000      	movs	r0, r0
	...

08004928 <_strtod_l>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	b09f      	sub	sp, #124	@ 0x7c
 800492e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004930:	2200      	movs	r2, #0
 8004932:	460c      	mov	r4, r1
 8004934:	921a      	str	r2, [sp, #104]	@ 0x68
 8004936:	f04f 0a00 	mov.w	sl, #0
 800493a:	f04f 0b00 	mov.w	fp, #0
 800493e:	460a      	mov	r2, r1
 8004940:	9005      	str	r0, [sp, #20]
 8004942:	9219      	str	r2, [sp, #100]	@ 0x64
 8004944:	7811      	ldrb	r1, [r2, #0]
 8004946:	292b      	cmp	r1, #43	@ 0x2b
 8004948:	d048      	beq.n	80049dc <_strtod_l+0xb4>
 800494a:	d836      	bhi.n	80049ba <_strtod_l+0x92>
 800494c:	290d      	cmp	r1, #13
 800494e:	d830      	bhi.n	80049b2 <_strtod_l+0x8a>
 8004950:	2908      	cmp	r1, #8
 8004952:	d830      	bhi.n	80049b6 <_strtod_l+0x8e>
 8004954:	2900      	cmp	r1, #0
 8004956:	d039      	beq.n	80049cc <_strtod_l+0xa4>
 8004958:	2200      	movs	r2, #0
 800495a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800495c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800495e:	782a      	ldrb	r2, [r5, #0]
 8004960:	2a30      	cmp	r2, #48	@ 0x30
 8004962:	f040 80b1 	bne.w	8004ac8 <_strtod_l+0x1a0>
 8004966:	786a      	ldrb	r2, [r5, #1]
 8004968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800496c:	2a58      	cmp	r2, #88	@ 0x58
 800496e:	d16c      	bne.n	8004a4a <_strtod_l+0x122>
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004974:	4a8e      	ldr	r2, [pc, #568]	@ (8004bb0 <_strtod_l+0x288>)
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	ab1a      	add	r3, sp, #104	@ 0x68
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	9805      	ldr	r0, [sp, #20]
 800497e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004980:	a919      	add	r1, sp, #100	@ 0x64
 8004982:	f002 fd8d 	bl	80074a0 <__gethex>
 8004986:	f010 060f 	ands.w	r6, r0, #15
 800498a:	4604      	mov	r4, r0
 800498c:	d005      	beq.n	800499a <_strtod_l+0x72>
 800498e:	2e06      	cmp	r6, #6
 8004990:	d126      	bne.n	80049e0 <_strtod_l+0xb8>
 8004992:	2300      	movs	r3, #0
 8004994:	3501      	adds	r5, #1
 8004996:	9519      	str	r5, [sp, #100]	@ 0x64
 8004998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800499a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8584 	bne.w	80054aa <_strtod_l+0xb82>
 80049a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049a4:	b1bb      	cbz	r3, 80049d6 <_strtod_l+0xae>
 80049a6:	4650      	mov	r0, sl
 80049a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80049ac:	b01f      	add	sp, #124	@ 0x7c
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	2920      	cmp	r1, #32
 80049b4:	d1d0      	bne.n	8004958 <_strtod_l+0x30>
 80049b6:	3201      	adds	r2, #1
 80049b8:	e7c3      	b.n	8004942 <_strtod_l+0x1a>
 80049ba:	292d      	cmp	r1, #45	@ 0x2d
 80049bc:	d1cc      	bne.n	8004958 <_strtod_l+0x30>
 80049be:	2101      	movs	r1, #1
 80049c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80049c2:	1c51      	adds	r1, r2, #1
 80049c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80049c6:	7852      	ldrb	r2, [r2, #1]
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d1c7      	bne.n	800495c <_strtod_l+0x34>
 80049cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80049ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 8568 	bne.w	80054a6 <_strtod_l+0xb7e>
 80049d6:	4650      	mov	r0, sl
 80049d8:	4659      	mov	r1, fp
 80049da:	e7e7      	b.n	80049ac <_strtod_l+0x84>
 80049dc:	2100      	movs	r1, #0
 80049de:	e7ef      	b.n	80049c0 <_strtod_l+0x98>
 80049e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80049e2:	b13a      	cbz	r2, 80049f4 <_strtod_l+0xcc>
 80049e4:	2135      	movs	r1, #53	@ 0x35
 80049e6:	a81c      	add	r0, sp, #112	@ 0x70
 80049e8:	f003 fd56 	bl	8008498 <__copybits>
 80049ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80049ee:	9805      	ldr	r0, [sp, #20]
 80049f0:	f003 f930 	bl	8007c54 <_Bfree>
 80049f4:	3e01      	subs	r6, #1
 80049f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80049f8:	2e04      	cmp	r6, #4
 80049fa:	d806      	bhi.n	8004a0a <_strtod_l+0xe2>
 80049fc:	e8df f006 	tbb	[pc, r6]
 8004a00:	201d0314 	.word	0x201d0314
 8004a04:	14          	.byte	0x14
 8004a05:	00          	.byte	0x00
 8004a06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004a0a:	05e1      	lsls	r1, r4, #23
 8004a0c:	bf48      	it	mi
 8004a0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004a12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004a16:	0d1b      	lsrs	r3, r3, #20
 8004a18:	051b      	lsls	r3, r3, #20
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1bd      	bne.n	800499a <_strtod_l+0x72>
 8004a1e:	f001 fde9 	bl	80065f4 <__errno>
 8004a22:	2322      	movs	r3, #34	@ 0x22
 8004a24:	6003      	str	r3, [r0, #0]
 8004a26:	e7b8      	b.n	800499a <_strtod_l+0x72>
 8004a28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004a30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004a38:	e7e7      	b.n	8004a0a <_strtod_l+0xe2>
 8004a3a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004bb4 <_strtod_l+0x28c>
 8004a3e:	e7e4      	b.n	8004a0a <_strtod_l+0xe2>
 8004a40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004a44:	f04f 3aff 	mov.w	sl, #4294967295
 8004a48:	e7df      	b.n	8004a0a <_strtod_l+0xe2>
 8004a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	2b30      	cmp	r3, #48	@ 0x30
 8004a54:	d0f9      	beq.n	8004a4a <_strtod_l+0x122>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d09f      	beq.n	800499a <_strtod_l+0x72>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004a60:	220a      	movs	r2, #10
 8004a62:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a64:	2300      	movs	r3, #0
 8004a66:	461f      	mov	r7, r3
 8004a68:	9308      	str	r3, [sp, #32]
 8004a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a6c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004a6e:	7805      	ldrb	r5, [r0, #0]
 8004a70:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	2909      	cmp	r1, #9
 8004a78:	d928      	bls.n	8004acc <_strtod_l+0x1a4>
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	494e      	ldr	r1, [pc, #312]	@ (8004bb8 <_strtod_l+0x290>)
 8004a7e:	f001 fd5d 	bl	800653c <strncmp>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d032      	beq.n	8004aec <_strtod_l+0x1c4>
 8004a86:	2000      	movs	r0, #0
 8004a88:	462a      	mov	r2, r5
 8004a8a:	4681      	mov	r9, r0
 8004a8c:	463d      	mov	r5, r7
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2a65      	cmp	r2, #101	@ 0x65
 8004a92:	d001      	beq.n	8004a98 <_strtod_l+0x170>
 8004a94:	2a45      	cmp	r2, #69	@ 0x45
 8004a96:	d114      	bne.n	8004ac2 <_strtod_l+0x19a>
 8004a98:	b91d      	cbnz	r5, 8004aa2 <_strtod_l+0x17a>
 8004a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a9c:	4302      	orrs	r2, r0
 8004a9e:	d095      	beq.n	80049cc <_strtod_l+0xa4>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004aa4:	1c62      	adds	r2, r4, #1
 8004aa6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004aa8:	7862      	ldrb	r2, [r4, #1]
 8004aaa:	2a2b      	cmp	r2, #43	@ 0x2b
 8004aac:	d077      	beq.n	8004b9e <_strtod_l+0x276>
 8004aae:	2a2d      	cmp	r2, #45	@ 0x2d
 8004ab0:	d07b      	beq.n	8004baa <_strtod_l+0x282>
 8004ab2:	f04f 0c00 	mov.w	ip, #0
 8004ab6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004aba:	2909      	cmp	r1, #9
 8004abc:	f240 8082 	bls.w	8004bc4 <_strtod_l+0x29c>
 8004ac0:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ac2:	f04f 0800 	mov.w	r8, #0
 8004ac6:	e0a2      	b.n	8004c0e <_strtod_l+0x2e6>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e7c7      	b.n	8004a5c <_strtod_l+0x134>
 8004acc:	2f08      	cmp	r7, #8
 8004ace:	bfd5      	itete	le
 8004ad0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004ad2:	9908      	ldrgt	r1, [sp, #32]
 8004ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ad8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004adc:	f100 0001 	add.w	r0, r0, #1
 8004ae0:	bfd4      	ite	le
 8004ae2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004ae4:	9308      	strgt	r3, [sp, #32]
 8004ae6:	3701      	adds	r7, #1
 8004ae8:	9019      	str	r0, [sp, #100]	@ 0x64
 8004aea:	e7bf      	b.n	8004a6c <_strtod_l+0x144>
 8004aec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8004af2:	785a      	ldrb	r2, [r3, #1]
 8004af4:	b37f      	cbz	r7, 8004b56 <_strtod_l+0x22e>
 8004af6:	4681      	mov	r9, r0
 8004af8:	463d      	mov	r5, r7
 8004afa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004afe:	2b09      	cmp	r3, #9
 8004b00:	d912      	bls.n	8004b28 <_strtod_l+0x200>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e7c4      	b.n	8004a90 <_strtod_l+0x168>
 8004b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b08:	3001      	adds	r0, #1
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b0e:	785a      	ldrb	r2, [r3, #1]
 8004b10:	2a30      	cmp	r2, #48	@ 0x30
 8004b12:	d0f8      	beq.n	8004b06 <_strtod_l+0x1de>
 8004b14:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	f200 84cb 	bhi.w	80054b4 <_strtod_l+0xb8c>
 8004b1e:	4681      	mov	r9, r0
 8004b20:	2000      	movs	r0, #0
 8004b22:	4605      	mov	r5, r0
 8004b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b26:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b28:	3a30      	subs	r2, #48	@ 0x30
 8004b2a:	f100 0301 	add.w	r3, r0, #1
 8004b2e:	d02a      	beq.n	8004b86 <_strtod_l+0x25e>
 8004b30:	4499      	add	r9, r3
 8004b32:	210a      	movs	r1, #10
 8004b34:	462b      	mov	r3, r5
 8004b36:	eb00 0c05 	add.w	ip, r0, r5
 8004b3a:	4563      	cmp	r3, ip
 8004b3c:	d10d      	bne.n	8004b5a <_strtod_l+0x232>
 8004b3e:	1c69      	adds	r1, r5, #1
 8004b40:	4401      	add	r1, r0
 8004b42:	4428      	add	r0, r5
 8004b44:	2808      	cmp	r0, #8
 8004b46:	dc16      	bgt.n	8004b76 <_strtod_l+0x24e>
 8004b48:	230a      	movs	r3, #10
 8004b4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b4c:	fb03 2300 	mla	r3, r3, r0, r2
 8004b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b52:	2300      	movs	r3, #0
 8004b54:	e018      	b.n	8004b88 <_strtod_l+0x260>
 8004b56:	4638      	mov	r0, r7
 8004b58:	e7da      	b.n	8004b10 <_strtod_l+0x1e8>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	f103 0301 	add.w	r3, r3, #1
 8004b60:	dc03      	bgt.n	8004b6a <_strtod_l+0x242>
 8004b62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004b64:	434e      	muls	r6, r1
 8004b66:	960a      	str	r6, [sp, #40]	@ 0x28
 8004b68:	e7e7      	b.n	8004b3a <_strtod_l+0x212>
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	bfde      	ittt	le
 8004b6e:	9e08      	ldrle	r6, [sp, #32]
 8004b70:	434e      	mulle	r6, r1
 8004b72:	9608      	strle	r6, [sp, #32]
 8004b74:	e7e1      	b.n	8004b3a <_strtod_l+0x212>
 8004b76:	280f      	cmp	r0, #15
 8004b78:	dceb      	bgt.n	8004b52 <_strtod_l+0x22a>
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	9808      	ldr	r0, [sp, #32]
 8004b7e:	fb03 2300 	mla	r3, r3, r0, r2
 8004b82:	9308      	str	r3, [sp, #32]
 8004b84:	e7e5      	b.n	8004b52 <_strtod_l+0x22a>
 8004b86:	4629      	mov	r1, r5
 8004b88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	1c50      	adds	r0, r2, #1
 8004b8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8004b90:	7852      	ldrb	r2, [r2, #1]
 8004b92:	4618      	mov	r0, r3
 8004b94:	e7b1      	b.n	8004afa <_strtod_l+0x1d2>
 8004b96:	f04f 0900 	mov.w	r9, #0
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e77d      	b.n	8004a9a <_strtod_l+0x172>
 8004b9e:	f04f 0c00 	mov.w	ip, #0
 8004ba2:	1ca2      	adds	r2, r4, #2
 8004ba4:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ba6:	78a2      	ldrb	r2, [r4, #2]
 8004ba8:	e785      	b.n	8004ab6 <_strtod_l+0x18e>
 8004baa:	f04f 0c01 	mov.w	ip, #1
 8004bae:	e7f8      	b.n	8004ba2 <_strtod_l+0x27a>
 8004bb0:	08009034 	.word	0x08009034
 8004bb4:	7ff00000 	.word	0x7ff00000
 8004bb8:	0800901e 	.word	0x0800901e
 8004bbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bbe:	1c51      	adds	r1, r2, #1
 8004bc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8004bc2:	7852      	ldrb	r2, [r2, #1]
 8004bc4:	2a30      	cmp	r2, #48	@ 0x30
 8004bc6:	d0f9      	beq.n	8004bbc <_strtod_l+0x294>
 8004bc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004bcc:	2908      	cmp	r1, #8
 8004bce:	f63f af78 	bhi.w	8004ac2 <_strtod_l+0x19a>
 8004bd2:	f04f 080a 	mov.w	r8, #10
 8004bd6:	3a30      	subs	r2, #48	@ 0x30
 8004bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004bda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004bdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004bde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004be0:	1c56      	adds	r6, r2, #1
 8004be2:	9619      	str	r6, [sp, #100]	@ 0x64
 8004be4:	7852      	ldrb	r2, [r2, #1]
 8004be6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004bea:	f1be 0f09 	cmp.w	lr, #9
 8004bee:	d939      	bls.n	8004c64 <_strtod_l+0x33c>
 8004bf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004bf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004bf6:	1a76      	subs	r6, r6, r1
 8004bf8:	2e08      	cmp	r6, #8
 8004bfa:	dc03      	bgt.n	8004c04 <_strtod_l+0x2dc>
 8004bfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004bfe:	4588      	cmp	r8, r1
 8004c00:	bfa8      	it	ge
 8004c02:	4688      	movge	r8, r1
 8004c04:	f1bc 0f00 	cmp.w	ip, #0
 8004c08:	d001      	beq.n	8004c0e <_strtod_l+0x2e6>
 8004c0a:	f1c8 0800 	rsb	r8, r8, #0
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	d14e      	bne.n	8004cb0 <_strtod_l+0x388>
 8004c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c14:	4308      	orrs	r0, r1
 8004c16:	f47f aec0 	bne.w	800499a <_strtod_l+0x72>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f47f aed6 	bne.w	80049cc <_strtod_l+0xa4>
 8004c20:	2a69      	cmp	r2, #105	@ 0x69
 8004c22:	d028      	beq.n	8004c76 <_strtod_l+0x34e>
 8004c24:	dc25      	bgt.n	8004c72 <_strtod_l+0x34a>
 8004c26:	2a49      	cmp	r2, #73	@ 0x49
 8004c28:	d025      	beq.n	8004c76 <_strtod_l+0x34e>
 8004c2a:	2a4e      	cmp	r2, #78	@ 0x4e
 8004c2c:	f47f aece 	bne.w	80049cc <_strtod_l+0xa4>
 8004c30:	499a      	ldr	r1, [pc, #616]	@ (8004e9c <_strtod_l+0x574>)
 8004c32:	a819      	add	r0, sp, #100	@ 0x64
 8004c34:	f002 fe56 	bl	80078e4 <__match>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f aec7 	beq.w	80049cc <_strtod_l+0xa4>
 8004c3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b28      	cmp	r3, #40	@ 0x28
 8004c44:	d12e      	bne.n	8004ca4 <_strtod_l+0x37c>
 8004c46:	4996      	ldr	r1, [pc, #600]	@ (8004ea0 <_strtod_l+0x578>)
 8004c48:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c4a:	a819      	add	r0, sp, #100	@ 0x64
 8004c4c:	f002 fe5e 	bl	800790c <__hexnan>
 8004c50:	2805      	cmp	r0, #5
 8004c52:	d127      	bne.n	8004ca4 <_strtod_l+0x37c>
 8004c54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004c5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004c5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004c62:	e69a      	b.n	800499a <_strtod_l+0x72>
 8004c64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004c66:	fb08 2101 	mla	r1, r8, r1, r2
 8004c6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c70:	e7b5      	b.n	8004bde <_strtod_l+0x2b6>
 8004c72:	2a6e      	cmp	r2, #110	@ 0x6e
 8004c74:	e7da      	b.n	8004c2c <_strtod_l+0x304>
 8004c76:	498b      	ldr	r1, [pc, #556]	@ (8004ea4 <_strtod_l+0x57c>)
 8004c78:	a819      	add	r0, sp, #100	@ 0x64
 8004c7a:	f002 fe33 	bl	80078e4 <__match>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	f43f aea4 	beq.w	80049cc <_strtod_l+0xa4>
 8004c84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c86:	4988      	ldr	r1, [pc, #544]	@ (8004ea8 <_strtod_l+0x580>)
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	a819      	add	r0, sp, #100	@ 0x64
 8004c8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c8e:	f002 fe29 	bl	80078e4 <__match>
 8004c92:	b910      	cbnz	r0, 8004c9a <_strtod_l+0x372>
 8004c94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c96:	3301      	adds	r3, #1
 8004c98:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c9a:	f04f 0a00 	mov.w	sl, #0
 8004c9e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8004eac <_strtod_l+0x584>
 8004ca2:	e67a      	b.n	800499a <_strtod_l+0x72>
 8004ca4:	4882      	ldr	r0, [pc, #520]	@ (8004eb0 <_strtod_l+0x588>)
 8004ca6:	f001 fcef 	bl	8006688 <nan>
 8004caa:	4682      	mov	sl, r0
 8004cac:	468b      	mov	fp, r1
 8004cae:	e674      	b.n	800499a <_strtod_l+0x72>
 8004cb0:	eba8 0309 	sub.w	r3, r8, r9
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	bf08      	it	eq
 8004cb8:	462f      	moveq	r7, r5
 8004cba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004cbc:	2d10      	cmp	r5, #16
 8004cbe:	462c      	mov	r4, r5
 8004cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc2:	bfa8      	it	ge
 8004cc4:	2410      	movge	r4, #16
 8004cc6:	f7fb fb8d 	bl	80003e4 <__aeabi_ui2d>
 8004cca:	2d09      	cmp	r5, #9
 8004ccc:	4682      	mov	sl, r0
 8004cce:	468b      	mov	fp, r1
 8004cd0:	dc11      	bgt.n	8004cf6 <_strtod_l+0x3ce>
 8004cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f43f ae60 	beq.w	800499a <_strtod_l+0x72>
 8004cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cdc:	dd76      	ble.n	8004dcc <_strtod_l+0x4a4>
 8004cde:	2b16      	cmp	r3, #22
 8004ce0:	dc5d      	bgt.n	8004d9e <_strtod_l+0x476>
 8004ce2:	4974      	ldr	r1, [pc, #464]	@ (8004eb4 <_strtod_l+0x58c>)
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004cea:	465b      	mov	r3, fp
 8004cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cf0:	f7fb fbf2 	bl	80004d8 <__aeabi_dmul>
 8004cf4:	e7d9      	b.n	8004caa <_strtod_l+0x382>
 8004cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb4 <_strtod_l+0x58c>)
 8004cf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004d00:	f7fb fbea 	bl	80004d8 <__aeabi_dmul>
 8004d04:	4682      	mov	sl, r0
 8004d06:	9808      	ldr	r0, [sp, #32]
 8004d08:	468b      	mov	fp, r1
 8004d0a:	f7fb fb6b 	bl	80003e4 <__aeabi_ui2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4650      	mov	r0, sl
 8004d14:	4659      	mov	r1, fp
 8004d16:	f7fb fa29 	bl	800016c <__adddf3>
 8004d1a:	2d0f      	cmp	r5, #15
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	468b      	mov	fp, r1
 8004d20:	ddd7      	ble.n	8004cd2 <_strtod_l+0x3aa>
 8004d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d24:	1b2c      	subs	r4, r5, r4
 8004d26:	441c      	add	r4, r3
 8004d28:	2c00      	cmp	r4, #0
 8004d2a:	f340 8096 	ble.w	8004e5a <_strtod_l+0x532>
 8004d2e:	f014 030f 	ands.w	r3, r4, #15
 8004d32:	d00a      	beq.n	8004d4a <_strtod_l+0x422>
 8004d34:	495f      	ldr	r1, [pc, #380]	@ (8004eb4 <_strtod_l+0x58c>)
 8004d36:	4652      	mov	r2, sl
 8004d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	465b      	mov	r3, fp
 8004d42:	f7fb fbc9 	bl	80004d8 <__aeabi_dmul>
 8004d46:	4682      	mov	sl, r0
 8004d48:	468b      	mov	fp, r1
 8004d4a:	f034 040f 	bics.w	r4, r4, #15
 8004d4e:	d073      	beq.n	8004e38 <_strtod_l+0x510>
 8004d50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004d54:	dd48      	ble.n	8004de8 <_strtod_l+0x4c0>
 8004d56:	2400      	movs	r4, #0
 8004d58:	46a0      	mov	r8, r4
 8004d5a:	46a1      	mov	r9, r4
 8004d5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8004d5e:	2322      	movs	r3, #34	@ 0x22
 8004d60:	f04f 0a00 	mov.w	sl, #0
 8004d64:	9a05      	ldr	r2, [sp, #20]
 8004d66:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8004eac <_strtod_l+0x584>
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f43f ae13 	beq.w	800499a <_strtod_l+0x72>
 8004d74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d76:	9805      	ldr	r0, [sp, #20]
 8004d78:	f002 ff6c 	bl	8007c54 <_Bfree>
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	9805      	ldr	r0, [sp, #20]
 8004d80:	f002 ff68 	bl	8007c54 <_Bfree>
 8004d84:	4641      	mov	r1, r8
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	f002 ff64 	bl	8007c54 <_Bfree>
 8004d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d8e:	9805      	ldr	r0, [sp, #20]
 8004d90:	f002 ff60 	bl	8007c54 <_Bfree>
 8004d94:	4621      	mov	r1, r4
 8004d96:	9805      	ldr	r0, [sp, #20]
 8004d98:	f002 ff5c 	bl	8007c54 <_Bfree>
 8004d9c:	e5fd      	b.n	800499a <_strtod_l+0x72>
 8004d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004da0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004da4:	4293      	cmp	r3, r2
 8004da6:	dbbc      	blt.n	8004d22 <_strtod_l+0x3fa>
 8004da8:	4c42      	ldr	r4, [pc, #264]	@ (8004eb4 <_strtod_l+0x58c>)
 8004daa:	f1c5 050f 	rsb	r5, r5, #15
 8004dae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004db2:	4652      	mov	r2, sl
 8004db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db8:	465b      	mov	r3, fp
 8004dba:	f7fb fb8d 	bl	80004d8 <__aeabi_dmul>
 8004dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc0:	1b5d      	subs	r5, r3, r5
 8004dc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004dc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004dca:	e791      	b.n	8004cf0 <_strtod_l+0x3c8>
 8004dcc:	3316      	adds	r3, #22
 8004dce:	dba8      	blt.n	8004d22 <_strtod_l+0x3fa>
 8004dd0:	4b38      	ldr	r3, [pc, #224]	@ (8004eb4 <_strtod_l+0x58c>)
 8004dd2:	eba9 0808 	sub.w	r8, r9, r8
 8004dd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004dda:	4650      	mov	r0, sl
 8004ddc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004de0:	4659      	mov	r1, fp
 8004de2:	f7fb fca3 	bl	800072c <__aeabi_ddiv>
 8004de6:	e760      	b.n	8004caa <_strtod_l+0x382>
 8004de8:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <_strtod_l+0x590>)
 8004dea:	4650      	mov	r0, sl
 8004dec:	9308      	str	r3, [sp, #32]
 8004dee:	2300      	movs	r3, #0
 8004df0:	4659      	mov	r1, fp
 8004df2:	461e      	mov	r6, r3
 8004df4:	1124      	asrs	r4, r4, #4
 8004df6:	2c01      	cmp	r4, #1
 8004df8:	dc21      	bgt.n	8004e3e <_strtod_l+0x516>
 8004dfa:	b10b      	cbz	r3, 8004e00 <_strtod_l+0x4d8>
 8004dfc:	4682      	mov	sl, r0
 8004dfe:	468b      	mov	fp, r1
 8004e00:	492d      	ldr	r1, [pc, #180]	@ (8004eb8 <_strtod_l+0x590>)
 8004e02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004e06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e10:	465b      	mov	r3, fp
 8004e12:	f7fb fb61 	bl	80004d8 <__aeabi_dmul>
 8004e16:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <_strtod_l+0x584>)
 8004e18:	460a      	mov	r2, r1
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	4927      	ldr	r1, [pc, #156]	@ (8004ebc <_strtod_l+0x594>)
 8004e1e:	4682      	mov	sl, r0
 8004e20:	428b      	cmp	r3, r1
 8004e22:	d898      	bhi.n	8004d56 <_strtod_l+0x42e>
 8004e24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf86      	itte	hi
 8004e2c:	f04f 3aff 	movhi.w	sl, #4294967295
 8004e30:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004ec0 <_strtod_l+0x598>
 8004e34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9308      	str	r3, [sp, #32]
 8004e3c:	e07a      	b.n	8004f34 <_strtod_l+0x60c>
 8004e3e:	07e2      	lsls	r2, r4, #31
 8004e40:	d505      	bpl.n	8004e4e <_strtod_l+0x526>
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fb46 	bl	80004d8 <__aeabi_dmul>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	9a08      	ldr	r2, [sp, #32]
 8004e50:	3601      	adds	r6, #1
 8004e52:	3208      	adds	r2, #8
 8004e54:	1064      	asrs	r4, r4, #1
 8004e56:	9208      	str	r2, [sp, #32]
 8004e58:	e7cd      	b.n	8004df6 <_strtod_l+0x4ce>
 8004e5a:	d0ed      	beq.n	8004e38 <_strtod_l+0x510>
 8004e5c:	4264      	negs	r4, r4
 8004e5e:	f014 020f 	ands.w	r2, r4, #15
 8004e62:	d00a      	beq.n	8004e7a <_strtod_l+0x552>
 8004e64:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <_strtod_l+0x58c>)
 8004e66:	4650      	mov	r0, sl
 8004e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb fc5b 	bl	800072c <__aeabi_ddiv>
 8004e76:	4682      	mov	sl, r0
 8004e78:	468b      	mov	fp, r1
 8004e7a:	1124      	asrs	r4, r4, #4
 8004e7c:	d0dc      	beq.n	8004e38 <_strtod_l+0x510>
 8004e7e:	2c1f      	cmp	r4, #31
 8004e80:	dd20      	ble.n	8004ec4 <_strtod_l+0x59c>
 8004e82:	2400      	movs	r4, #0
 8004e84:	46a0      	mov	r8, r4
 8004e86:	46a1      	mov	r9, r4
 8004e88:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e8a:	2322      	movs	r3, #34	@ 0x22
 8004e8c:	9a05      	ldr	r2, [sp, #20]
 8004e8e:	f04f 0a00 	mov.w	sl, #0
 8004e92:	f04f 0b00 	mov.w	fp, #0
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e768      	b.n	8004d6c <_strtod_l+0x444>
 8004e9a:	bf00      	nop
 8004e9c:	0800917e 	.word	0x0800917e
 8004ea0:	08009020 	.word	0x08009020
 8004ea4:	08009176 	.word	0x08009176
 8004ea8:	080091b5 	.word	0x080091b5
 8004eac:	7ff00000 	.word	0x7ff00000
 8004eb0:	08009444 	.word	0x08009444
 8004eb4:	08009330 	.word	0x08009330
 8004eb8:	08009308 	.word	0x08009308
 8004ebc:	7ca00000 	.word	0x7ca00000
 8004ec0:	7fefffff 	.word	0x7fefffff
 8004ec4:	f014 0310 	ands.w	r3, r4, #16
 8004ec8:	bf18      	it	ne
 8004eca:	236a      	movne	r3, #106	@ 0x6a
 8004ecc:	4650      	mov	r0, sl
 8004ece:	9308      	str	r3, [sp, #32]
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4ea9      	ldr	r6, [pc, #676]	@ (800517c <_strtod_l+0x854>)
 8004ed6:	07e2      	lsls	r2, r4, #31
 8004ed8:	d504      	bpl.n	8004ee4 <_strtod_l+0x5bc>
 8004eda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ede:	f7fb fafb 	bl	80004d8 <__aeabi_dmul>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	1064      	asrs	r4, r4, #1
 8004ee6:	f106 0608 	add.w	r6, r6, #8
 8004eea:	d1f4      	bne.n	8004ed6 <_strtod_l+0x5ae>
 8004eec:	b10b      	cbz	r3, 8004ef2 <_strtod_l+0x5ca>
 8004eee:	4682      	mov	sl, r0
 8004ef0:	468b      	mov	fp, r1
 8004ef2:	9b08      	ldr	r3, [sp, #32]
 8004ef4:	b1b3      	cbz	r3, 8004f24 <_strtod_l+0x5fc>
 8004ef6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004efa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	4659      	mov	r1, fp
 8004f02:	dd0f      	ble.n	8004f24 <_strtod_l+0x5fc>
 8004f04:	2b1f      	cmp	r3, #31
 8004f06:	dd57      	ble.n	8004fb8 <_strtod_l+0x690>
 8004f08:	2b34      	cmp	r3, #52	@ 0x34
 8004f0a:	bfd8      	it	le
 8004f0c:	f04f 33ff 	movle.w	r3, #4294967295
 8004f10:	f04f 0a00 	mov.w	sl, #0
 8004f14:	bfcf      	iteee	gt
 8004f16:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004f1a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004f1e:	4093      	lslle	r3, r2
 8004f20:	ea03 0b01 	andle.w	fp, r3, r1
 8004f24:	2200      	movs	r2, #0
 8004f26:	2300      	movs	r3, #0
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	f7fb fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d1a6      	bne.n	8004e82 <_strtod_l+0x55a>
 8004f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f36:	463a      	mov	r2, r7
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	9805      	ldr	r0, [sp, #20]
 8004f40:	f002 fef0 	bl	8007d24 <__s2b>
 8004f44:	900a      	str	r0, [sp, #40]	@ 0x28
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f af05 	beq.w	8004d56 <_strtod_l+0x42e>
 8004f4c:	2400      	movs	r4, #0
 8004f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f50:	eba9 0308 	sub.w	r3, r9, r8
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	bfa8      	it	ge
 8004f58:	2300      	movge	r3, #0
 8004f5a:	46a0      	mov	r8, r4
 8004f5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004f62:	9316      	str	r3, [sp, #88]	@ 0x58
 8004f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f66:	9805      	ldr	r0, [sp, #20]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	f002 fe33 	bl	8007bd4 <_Balloc>
 8004f6e:	4681      	mov	r9, r0
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f43f aef4 	beq.w	8004d5e <_strtod_l+0x436>
 8004f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f78:	300c      	adds	r0, #12
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	f103 010c 	add.w	r1, r3, #12
 8004f80:	3202      	adds	r2, #2
 8004f82:	0092      	lsls	r2, r2, #2
 8004f84:	f001 fb71 	bl	800666a <memcpy>
 8004f88:	ab1c      	add	r3, sp, #112	@ 0x70
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4652      	mov	r2, sl
 8004f92:	465b      	mov	r3, fp
 8004f94:	9805      	ldr	r0, [sp, #20]
 8004f96:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004f9a:	f003 f9f5 	bl	8008388 <__d2b>
 8004f9e:	901a      	str	r0, [sp, #104]	@ 0x68
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	f43f aedc 	beq.w	8004d5e <_strtod_l+0x436>
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	9805      	ldr	r0, [sp, #20]
 8004faa:	f002 ff51 	bl	8007e50 <__i2b>
 8004fae:	4680      	mov	r8, r0
 8004fb0:	b948      	cbnz	r0, 8004fc6 <_strtod_l+0x69e>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	e6d2      	b.n	8004d5e <_strtod_l+0x436>
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	ea03 0a0a 	and.w	sl, r3, sl
 8004fc4:	e7ae      	b.n	8004f24 <_strtod_l+0x5fc>
 8004fc6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004fc8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	bfab      	itete	ge
 8004fce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004fd0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004fd2:	18ef      	addge	r7, r5, r3
 8004fd4:	1b5e      	sublt	r6, r3, r5
 8004fd6:	9b08      	ldr	r3, [sp, #32]
 8004fd8:	bfa8      	it	ge
 8004fda:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004fdc:	eba5 0503 	sub.w	r5, r5, r3
 8004fe0:	4415      	add	r5, r2
 8004fe2:	4b67      	ldr	r3, [pc, #412]	@ (8005180 <_strtod_l+0x858>)
 8004fe4:	f105 35ff 	add.w	r5, r5, #4294967295
 8004fe8:	bfb8      	it	lt
 8004fea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004fec:	429d      	cmp	r5, r3
 8004fee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004ff2:	da50      	bge.n	8005096 <_strtod_l+0x76e>
 8004ff4:	1b5b      	subs	r3, r3, r5
 8004ff6:	2b1f      	cmp	r3, #31
 8004ff8:	f04f 0101 	mov.w	r1, #1
 8004ffc:	eba2 0203 	sub.w	r2, r2, r3
 8005000:	dc3d      	bgt.n	800507e <_strtod_l+0x756>
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005008:	2300      	movs	r3, #0
 800500a:	9310      	str	r3, [sp, #64]	@ 0x40
 800500c:	18bd      	adds	r5, r7, r2
 800500e:	9b08      	ldr	r3, [sp, #32]
 8005010:	42af      	cmp	r7, r5
 8005012:	4416      	add	r6, r2
 8005014:	441e      	add	r6, r3
 8005016:	463b      	mov	r3, r7
 8005018:	bfa8      	it	ge
 800501a:	462b      	movge	r3, r5
 800501c:	42b3      	cmp	r3, r6
 800501e:	bfa8      	it	ge
 8005020:	4633      	movge	r3, r6
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfc2      	ittt	gt
 8005026:	1aed      	subgt	r5, r5, r3
 8005028:	1af6      	subgt	r6, r6, r3
 800502a:	1aff      	subgt	r7, r7, r3
 800502c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	dd16      	ble.n	8005060 <_strtod_l+0x738>
 8005032:	4641      	mov	r1, r8
 8005034:	461a      	mov	r2, r3
 8005036:	9805      	ldr	r0, [sp, #20]
 8005038:	f002 ffc8 	bl	8007fcc <__pow5mult>
 800503c:	4680      	mov	r8, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d0b7      	beq.n	8004fb2 <_strtod_l+0x68a>
 8005042:	4601      	mov	r1, r0
 8005044:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005046:	9805      	ldr	r0, [sp, #20]
 8005048:	f002 ff18 	bl	8007e7c <__multiply>
 800504c:	900e      	str	r0, [sp, #56]	@ 0x38
 800504e:	2800      	cmp	r0, #0
 8005050:	f43f ae85 	beq.w	8004d5e <_strtod_l+0x436>
 8005054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005056:	9805      	ldr	r0, [sp, #20]
 8005058:	f002 fdfc 	bl	8007c54 <_Bfree>
 800505c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800505e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005060:	2d00      	cmp	r5, #0
 8005062:	dc1d      	bgt.n	80050a0 <_strtod_l+0x778>
 8005064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005066:	2b00      	cmp	r3, #0
 8005068:	dd23      	ble.n	80050b2 <_strtod_l+0x78a>
 800506a:	4649      	mov	r1, r9
 800506c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800506e:	9805      	ldr	r0, [sp, #20]
 8005070:	f002 ffac 	bl	8007fcc <__pow5mult>
 8005074:	4681      	mov	r9, r0
 8005076:	b9e0      	cbnz	r0, 80050b2 <_strtod_l+0x78a>
 8005078:	f04f 0900 	mov.w	r9, #0
 800507c:	e66f      	b.n	8004d5e <_strtod_l+0x436>
 800507e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005082:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005086:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800508a:	35e2      	adds	r5, #226	@ 0xe2
 800508c:	fa01 f305 	lsl.w	r3, r1, r5
 8005090:	9310      	str	r3, [sp, #64]	@ 0x40
 8005092:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005094:	e7ba      	b.n	800500c <_strtod_l+0x6e4>
 8005096:	2300      	movs	r3, #0
 8005098:	9310      	str	r3, [sp, #64]	@ 0x40
 800509a:	2301      	movs	r3, #1
 800509c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800509e:	e7b5      	b.n	800500c <_strtod_l+0x6e4>
 80050a0:	462a      	mov	r2, r5
 80050a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050a4:	9805      	ldr	r0, [sp, #20]
 80050a6:	f002 ffeb 	bl	8008080 <__lshift>
 80050aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d1d9      	bne.n	8005064 <_strtod_l+0x73c>
 80050b0:	e655      	b.n	8004d5e <_strtod_l+0x436>
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	dd07      	ble.n	80050c6 <_strtod_l+0x79e>
 80050b6:	4649      	mov	r1, r9
 80050b8:	4632      	mov	r2, r6
 80050ba:	9805      	ldr	r0, [sp, #20]
 80050bc:	f002 ffe0 	bl	8008080 <__lshift>
 80050c0:	4681      	mov	r9, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0d8      	beq.n	8005078 <_strtod_l+0x750>
 80050c6:	2f00      	cmp	r7, #0
 80050c8:	dd08      	ble.n	80050dc <_strtod_l+0x7b4>
 80050ca:	4641      	mov	r1, r8
 80050cc:	463a      	mov	r2, r7
 80050ce:	9805      	ldr	r0, [sp, #20]
 80050d0:	f002 ffd6 	bl	8008080 <__lshift>
 80050d4:	4680      	mov	r8, r0
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f ae41 	beq.w	8004d5e <_strtod_l+0x436>
 80050dc:	464a      	mov	r2, r9
 80050de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80050e0:	9805      	ldr	r0, [sp, #20]
 80050e2:	f003 f855 	bl	8008190 <__mdiff>
 80050e6:	4604      	mov	r4, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f43f ae38 	beq.w	8004d5e <_strtod_l+0x436>
 80050ee:	68c3      	ldr	r3, [r0, #12]
 80050f0:	4641      	mov	r1, r8
 80050f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050f4:	2300      	movs	r3, #0
 80050f6:	60c3      	str	r3, [r0, #12]
 80050f8:	f003 f82e 	bl	8008158 <__mcmp>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	da45      	bge.n	800518c <_strtod_l+0x864>
 8005100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005102:	ea53 030a 	orrs.w	r3, r3, sl
 8005106:	d16b      	bne.n	80051e0 <_strtod_l+0x8b8>
 8005108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800510c:	2b00      	cmp	r3, #0
 800510e:	d167      	bne.n	80051e0 <_strtod_l+0x8b8>
 8005110:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005114:	0d1b      	lsrs	r3, r3, #20
 8005116:	051b      	lsls	r3, r3, #20
 8005118:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800511c:	d960      	bls.n	80051e0 <_strtod_l+0x8b8>
 800511e:	6963      	ldr	r3, [r4, #20]
 8005120:	b913      	cbnz	r3, 8005128 <_strtod_l+0x800>
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	2b01      	cmp	r3, #1
 8005126:	dd5b      	ble.n	80051e0 <_strtod_l+0x8b8>
 8005128:	4621      	mov	r1, r4
 800512a:	2201      	movs	r2, #1
 800512c:	9805      	ldr	r0, [sp, #20]
 800512e:	f002 ffa7 	bl	8008080 <__lshift>
 8005132:	4641      	mov	r1, r8
 8005134:	4604      	mov	r4, r0
 8005136:	f003 f80f 	bl	8008158 <__mcmp>
 800513a:	2800      	cmp	r0, #0
 800513c:	dd50      	ble.n	80051e0 <_strtod_l+0x8b8>
 800513e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005142:	9a08      	ldr	r2, [sp, #32]
 8005144:	0d1b      	lsrs	r3, r3, #20
 8005146:	051b      	lsls	r3, r3, #20
 8005148:	2a00      	cmp	r2, #0
 800514a:	d06a      	beq.n	8005222 <_strtod_l+0x8fa>
 800514c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005150:	d867      	bhi.n	8005222 <_strtod_l+0x8fa>
 8005152:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005156:	f67f ae98 	bls.w	8004e8a <_strtod_l+0x562>
 800515a:	4650      	mov	r0, sl
 800515c:	4659      	mov	r1, fp
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <_strtod_l+0x85c>)
 8005160:	2200      	movs	r2, #0
 8005162:	f7fb f9b9 	bl	80004d8 <__aeabi_dmul>
 8005166:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <_strtod_l+0x860>)
 8005168:	4682      	mov	sl, r0
 800516a:	400b      	ands	r3, r1
 800516c:	468b      	mov	fp, r1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f47f ae00 	bne.w	8004d74 <_strtod_l+0x44c>
 8005174:	2322      	movs	r3, #34	@ 0x22
 8005176:	9a05      	ldr	r2, [sp, #20]
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e5fb      	b.n	8004d74 <_strtod_l+0x44c>
 800517c:	08009048 	.word	0x08009048
 8005180:	fffffc02 	.word	0xfffffc02
 8005184:	39500000 	.word	0x39500000
 8005188:	7ff00000 	.word	0x7ff00000
 800518c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005190:	d165      	bne.n	800525e <_strtod_l+0x936>
 8005192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005198:	b35a      	cbz	r2, 80051f2 <_strtod_l+0x8ca>
 800519a:	4a99      	ldr	r2, [pc, #612]	@ (8005400 <_strtod_l+0xad8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d12b      	bne.n	80051f8 <_strtod_l+0x8d0>
 80051a0:	9b08      	ldr	r3, [sp, #32]
 80051a2:	4651      	mov	r1, sl
 80051a4:	b303      	cbz	r3, 80051e8 <_strtod_l+0x8c0>
 80051a6:	465a      	mov	r2, fp
 80051a8:	4b96      	ldr	r3, [pc, #600]	@ (8005404 <_strtod_l+0xadc>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	d81b      	bhi.n	80051ee <_strtod_l+0x8c6>
 80051b6:	0d1b      	lsrs	r3, r3, #20
 80051b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d119      	bne.n	80051f8 <_strtod_l+0x8d0>
 80051c4:	4b90      	ldr	r3, [pc, #576]	@ (8005408 <_strtod_l+0xae0>)
 80051c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <_strtod_l+0x8aa>
 80051cc:	3101      	adds	r1, #1
 80051ce:	f43f adc6 	beq.w	8004d5e <_strtod_l+0x436>
 80051d2:	f04f 0a00 	mov.w	sl, #0
 80051d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005404 <_strtod_l+0xadc>)
 80051d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051da:	401a      	ands	r2, r3
 80051dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80051e0:	9b08      	ldr	r3, [sp, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1b9      	bne.n	800515a <_strtod_l+0x832>
 80051e6:	e5c5      	b.n	8004d74 <_strtod_l+0x44c>
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	e7e8      	b.n	80051c0 <_strtod_l+0x898>
 80051ee:	4613      	mov	r3, r2
 80051f0:	e7e6      	b.n	80051c0 <_strtod_l+0x898>
 80051f2:	ea53 030a 	orrs.w	r3, r3, sl
 80051f6:	d0a2      	beq.n	800513e <_strtod_l+0x816>
 80051f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051fa:	b1db      	cbz	r3, 8005234 <_strtod_l+0x90c>
 80051fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051fe:	4213      	tst	r3, r2
 8005200:	d0ee      	beq.n	80051e0 <_strtod_l+0x8b8>
 8005202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005204:	4650      	mov	r0, sl
 8005206:	4659      	mov	r1, fp
 8005208:	9a08      	ldr	r2, [sp, #32]
 800520a:	b1bb      	cbz	r3, 800523c <_strtod_l+0x914>
 800520c:	f7ff fb68 	bl	80048e0 <sulp>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005218:	f7fa ffa8 	bl	800016c <__adddf3>
 800521c:	4682      	mov	sl, r0
 800521e:	468b      	mov	fp, r1
 8005220:	e7de      	b.n	80051e0 <_strtod_l+0x8b8>
 8005222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800522a:	f04f 3aff 	mov.w	sl, #4294967295
 800522e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005232:	e7d5      	b.n	80051e0 <_strtod_l+0x8b8>
 8005234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005236:	ea13 0f0a 	tst.w	r3, sl
 800523a:	e7e1      	b.n	8005200 <_strtod_l+0x8d8>
 800523c:	f7ff fb50 	bl	80048e0 <sulp>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005248:	f7fa ff8e 	bl	8000168 <__aeabi_dsub>
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4682      	mov	sl, r0
 8005252:	468b      	mov	fp, r1
 8005254:	f7fb fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8005258:	2800      	cmp	r0, #0
 800525a:	d0c1      	beq.n	80051e0 <_strtod_l+0x8b8>
 800525c:	e615      	b.n	8004e8a <_strtod_l+0x562>
 800525e:	4641      	mov	r1, r8
 8005260:	4620      	mov	r0, r4
 8005262:	f003 f8e9 	bl	8008438 <__ratio>
 8005266:	2200      	movs	r2, #0
 8005268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800526c:	4606      	mov	r6, r0
 800526e:	460f      	mov	r7, r1
 8005270:	f7fb fbae 	bl	80009d0 <__aeabi_dcmple>
 8005274:	2800      	cmp	r0, #0
 8005276:	d06d      	beq.n	8005354 <_strtod_l+0xa2c>
 8005278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d178      	bne.n	8005370 <_strtod_l+0xa48>
 800527e:	f1ba 0f00 	cmp.w	sl, #0
 8005282:	d156      	bne.n	8005332 <_strtod_l+0xa0a>
 8005284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800528a:	2b00      	cmp	r3, #0
 800528c:	d158      	bne.n	8005340 <_strtod_l+0xa18>
 800528e:	2200      	movs	r2, #0
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	4b5d      	ldr	r3, [pc, #372]	@ (800540c <_strtod_l+0xae4>)
 8005296:	f7fb fb91 	bl	80009bc <__aeabi_dcmplt>
 800529a:	2800      	cmp	r0, #0
 800529c:	d157      	bne.n	800534e <_strtod_l+0xa26>
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	2200      	movs	r2, #0
 80052a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005410 <_strtod_l+0xae8>)
 80052a6:	f7fb f917 	bl	80004d8 <__aeabi_dmul>
 80052aa:	4606      	mov	r6, r0
 80052ac:	460f      	mov	r7, r1
 80052ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80052b2:	9606      	str	r6, [sp, #24]
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ba:	4d52      	ldr	r5, [pc, #328]	@ (8005404 <_strtod_l+0xadc>)
 80052bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80052c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052c2:	401d      	ands	r5, r3
 80052c4:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <_strtod_l+0xaec>)
 80052c6:	429d      	cmp	r5, r3
 80052c8:	f040 80aa 	bne.w	8005420 <_strtod_l+0xaf8>
 80052cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052ce:	4650      	mov	r0, sl
 80052d0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80052d4:	4659      	mov	r1, fp
 80052d6:	f002 ffef 	bl	80082b8 <__ulp>
 80052da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052de:	f7fb f8fb 	bl	80004d8 <__aeabi_dmul>
 80052e2:	4652      	mov	r2, sl
 80052e4:	465b      	mov	r3, fp
 80052e6:	f7fa ff41 	bl	800016c <__adddf3>
 80052ea:	460b      	mov	r3, r1
 80052ec:	4945      	ldr	r1, [pc, #276]	@ (8005404 <_strtod_l+0xadc>)
 80052ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005418 <_strtod_l+0xaf0>)
 80052f0:	4019      	ands	r1, r3
 80052f2:	4291      	cmp	r1, r2
 80052f4:	4682      	mov	sl, r0
 80052f6:	d942      	bls.n	800537e <_strtod_l+0xa56>
 80052f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052fa:	4b43      	ldr	r3, [pc, #268]	@ (8005408 <_strtod_l+0xae0>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d103      	bne.n	8005308 <_strtod_l+0x9e0>
 8005300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005302:	3301      	adds	r3, #1
 8005304:	f43f ad2b 	beq.w	8004d5e <_strtod_l+0x436>
 8005308:	f04f 3aff 	mov.w	sl, #4294967295
 800530c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005408 <_strtod_l+0xae0>
 8005310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005312:	9805      	ldr	r0, [sp, #20]
 8005314:	f002 fc9e 	bl	8007c54 <_Bfree>
 8005318:	4649      	mov	r1, r9
 800531a:	9805      	ldr	r0, [sp, #20]
 800531c:	f002 fc9a 	bl	8007c54 <_Bfree>
 8005320:	4641      	mov	r1, r8
 8005322:	9805      	ldr	r0, [sp, #20]
 8005324:	f002 fc96 	bl	8007c54 <_Bfree>
 8005328:	4621      	mov	r1, r4
 800532a:	9805      	ldr	r0, [sp, #20]
 800532c:	f002 fc92 	bl	8007c54 <_Bfree>
 8005330:	e618      	b.n	8004f64 <_strtod_l+0x63c>
 8005332:	f1ba 0f01 	cmp.w	sl, #1
 8005336:	d103      	bne.n	8005340 <_strtod_l+0xa18>
 8005338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	f43f ada5 	beq.w	8004e8a <_strtod_l+0x562>
 8005340:	2200      	movs	r2, #0
 8005342:	4b36      	ldr	r3, [pc, #216]	@ (800541c <_strtod_l+0xaf4>)
 8005344:	2600      	movs	r6, #0
 8005346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800534a:	4f30      	ldr	r7, [pc, #192]	@ (800540c <_strtod_l+0xae4>)
 800534c:	e7b3      	b.n	80052b6 <_strtod_l+0x98e>
 800534e:	2600      	movs	r6, #0
 8005350:	4f2f      	ldr	r7, [pc, #188]	@ (8005410 <_strtod_l+0xae8>)
 8005352:	e7ac      	b.n	80052ae <_strtod_l+0x986>
 8005354:	4630      	mov	r0, r6
 8005356:	4639      	mov	r1, r7
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <_strtod_l+0xae8>)
 800535a:	2200      	movs	r2, #0
 800535c:	f7fb f8bc 	bl	80004d8 <__aeabi_dmul>
 8005360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0a1      	beq.n	80052ae <_strtod_l+0x986>
 800536a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800536e:	e7a2      	b.n	80052b6 <_strtod_l+0x98e>
 8005370:	2200      	movs	r2, #0
 8005372:	4b26      	ldr	r3, [pc, #152]	@ (800540c <_strtod_l+0xae4>)
 8005374:	4616      	mov	r6, r2
 8005376:	461f      	mov	r7, r3
 8005378:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800537c:	e79b      	b.n	80052b6 <_strtod_l+0x98e>
 800537e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005382:	9b08      	ldr	r3, [sp, #32]
 8005384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1c1      	bne.n	8005310 <_strtod_l+0x9e8>
 800538c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	429d      	cmp	r5, r3
 8005396:	d1bb      	bne.n	8005310 <_strtod_l+0x9e8>
 8005398:	4630      	mov	r0, r6
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb fbe4 	bl	8000b68 <__aeabi_d2lz>
 80053a0:	f7fb f86c 	bl	800047c <__aeabi_l2d>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fa fedc 	bl	8000168 <__aeabi_dsub>
 80053b0:	460b      	mov	r3, r1
 80053b2:	4602      	mov	r2, r0
 80053b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80053b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80053bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053be:	ea46 060a 	orr.w	r6, r6, sl
 80053c2:	431e      	orrs	r6, r3
 80053c4:	d069      	beq.n	800549a <_strtod_l+0xb72>
 80053c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80053f0 <_strtod_l+0xac8>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fb faf6 	bl	80009bc <__aeabi_dcmplt>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f47f accf 	bne.w	8004d74 <_strtod_l+0x44c>
 80053d6:	a308      	add	r3, pc, #32	@ (adr r3, 80053f8 <_strtod_l+0xad0>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053e0:	f7fb fb0a 	bl	80009f8 <__aeabi_dcmpgt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d093      	beq.n	8005310 <_strtod_l+0x9e8>
 80053e8:	e4c4      	b.n	8004d74 <_strtod_l+0x44c>
 80053ea:	bf00      	nop
 80053ec:	f3af 8000 	nop.w
 80053f0:	94a03595 	.word	0x94a03595
 80053f4:	3fdfffff 	.word	0x3fdfffff
 80053f8:	35afe535 	.word	0x35afe535
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	000fffff 	.word	0x000fffff
 8005404:	7ff00000 	.word	0x7ff00000
 8005408:	7fefffff 	.word	0x7fefffff
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	3fe00000 	.word	0x3fe00000
 8005414:	7fe00000 	.word	0x7fe00000
 8005418:	7c9fffff 	.word	0x7c9fffff
 800541c:	bff00000 	.word	0xbff00000
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	b323      	cbz	r3, 800546e <_strtod_l+0xb46>
 8005424:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005428:	d821      	bhi.n	800546e <_strtod_l+0xb46>
 800542a:	a327      	add	r3, pc, #156	@ (adr r3, 80054c8 <_strtod_l+0xba0>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb facc 	bl	80009d0 <__aeabi_dcmple>
 8005438:	b1a0      	cbz	r0, 8005464 <_strtod_l+0xb3c>
 800543a:	4639      	mov	r1, r7
 800543c:	4630      	mov	r0, r6
 800543e:	f7fb fb23 	bl	8000a88 <__aeabi_d2uiz>
 8005442:	2801      	cmp	r0, #1
 8005444:	bf38      	it	cc
 8005446:	2001      	movcc	r0, #1
 8005448:	f7fa ffcc 	bl	80003e4 <__aeabi_ui2d>
 800544c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800544e:	4606      	mov	r6, r0
 8005450:	460f      	mov	r7, r1
 8005452:	b9fb      	cbnz	r3, 8005494 <_strtod_l+0xb6c>
 8005454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005458:	9014      	str	r0, [sp, #80]	@ 0x50
 800545a:	9315      	str	r3, [sp, #84]	@ 0x54
 800545c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005460:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005464:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005466:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800546a:	1b5b      	subs	r3, r3, r5
 800546c:	9311      	str	r3, [sp, #68]	@ 0x44
 800546e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005472:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005476:	f002 ff1f 	bl	80082b8 <__ulp>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4650      	mov	r0, sl
 8005480:	4659      	mov	r1, fp
 8005482:	f7fb f829 	bl	80004d8 <__aeabi_dmul>
 8005486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800548a:	f7fa fe6f 	bl	800016c <__adddf3>
 800548e:	4682      	mov	sl, r0
 8005490:	468b      	mov	fp, r1
 8005492:	e776      	b.n	8005382 <_strtod_l+0xa5a>
 8005494:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005498:	e7e0      	b.n	800545c <_strtod_l+0xb34>
 800549a:	a30d      	add	r3, pc, #52	@ (adr r3, 80054d0 <_strtod_l+0xba8>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f7fb fa8c 	bl	80009bc <__aeabi_dcmplt>
 80054a4:	e79e      	b.n	80053e4 <_strtod_l+0xabc>
 80054a6:	2300      	movs	r3, #0
 80054a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	f7ff ba77 	b.w	80049a2 <_strtod_l+0x7a>
 80054b4:	2a65      	cmp	r2, #101	@ 0x65
 80054b6:	f43f ab6e 	beq.w	8004b96 <_strtod_l+0x26e>
 80054ba:	2a45      	cmp	r2, #69	@ 0x45
 80054bc:	f43f ab6b 	beq.w	8004b96 <_strtod_l+0x26e>
 80054c0:	2301      	movs	r3, #1
 80054c2:	f7ff bba6 	b.w	8004c12 <_strtod_l+0x2ea>
 80054c6:	bf00      	nop
 80054c8:	ffc00000 	.word	0xffc00000
 80054cc:	41dfffff 	.word	0x41dfffff
 80054d0:	94a03595 	.word	0x94a03595
 80054d4:	3fcfffff 	.word	0x3fcfffff

080054d8 <_strtod_r>:
 80054d8:	4b01      	ldr	r3, [pc, #4]	@ (80054e0 <_strtod_r+0x8>)
 80054da:	f7ff ba25 	b.w	8004928 <_strtod_l>
 80054de:	bf00      	nop
 80054e0:	20000018 	.word	0x20000018

080054e4 <_strtol_l.constprop.0>:
 80054e4:	2b24      	cmp	r3, #36	@ 0x24
 80054e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ea:	4686      	mov	lr, r0
 80054ec:	4690      	mov	r8, r2
 80054ee:	d801      	bhi.n	80054f4 <_strtol_l.constprop.0+0x10>
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <_strtol_l.constprop.0+0x1e>
 80054f4:	f001 f87e 	bl	80065f4 <__errno>
 80054f8:	2316      	movs	r3, #22
 80054fa:	6003      	str	r3, [r0, #0]
 80054fc:	2000      	movs	r0, #0
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	460d      	mov	r5, r1
 8005504:	4833      	ldr	r0, [pc, #204]	@ (80055d4 <_strtol_l.constprop.0+0xf0>)
 8005506:	462a      	mov	r2, r5
 8005508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800550c:	5d06      	ldrb	r6, [r0, r4]
 800550e:	f016 0608 	ands.w	r6, r6, #8
 8005512:	d1f8      	bne.n	8005506 <_strtol_l.constprop.0+0x22>
 8005514:	2c2d      	cmp	r4, #45	@ 0x2d
 8005516:	d12d      	bne.n	8005574 <_strtol_l.constprop.0+0x90>
 8005518:	2601      	movs	r6, #1
 800551a:	782c      	ldrb	r4, [r5, #0]
 800551c:	1c95      	adds	r5, r2, #2
 800551e:	f033 0210 	bics.w	r2, r3, #16
 8005522:	d109      	bne.n	8005538 <_strtol_l.constprop.0+0x54>
 8005524:	2c30      	cmp	r4, #48	@ 0x30
 8005526:	d12a      	bne.n	800557e <_strtol_l.constprop.0+0x9a>
 8005528:	782a      	ldrb	r2, [r5, #0]
 800552a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800552e:	2a58      	cmp	r2, #88	@ 0x58
 8005530:	d125      	bne.n	800557e <_strtol_l.constprop.0+0x9a>
 8005532:	2310      	movs	r3, #16
 8005534:	786c      	ldrb	r4, [r5, #1]
 8005536:	3502      	adds	r5, #2
 8005538:	2200      	movs	r2, #0
 800553a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800553e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005542:	fbbc f9f3 	udiv	r9, ip, r3
 8005546:	4610      	mov	r0, r2
 8005548:	fb03 ca19 	mls	sl, r3, r9, ip
 800554c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005550:	2f09      	cmp	r7, #9
 8005552:	d81b      	bhi.n	800558c <_strtol_l.constprop.0+0xa8>
 8005554:	463c      	mov	r4, r7
 8005556:	42a3      	cmp	r3, r4
 8005558:	dd27      	ble.n	80055aa <_strtol_l.constprop.0+0xc6>
 800555a:	1c57      	adds	r7, r2, #1
 800555c:	d007      	beq.n	800556e <_strtol_l.constprop.0+0x8a>
 800555e:	4581      	cmp	r9, r0
 8005560:	d320      	bcc.n	80055a4 <_strtol_l.constprop.0+0xc0>
 8005562:	d101      	bne.n	8005568 <_strtol_l.constprop.0+0x84>
 8005564:	45a2      	cmp	sl, r4
 8005566:	db1d      	blt.n	80055a4 <_strtol_l.constprop.0+0xc0>
 8005568:	2201      	movs	r2, #1
 800556a:	fb00 4003 	mla	r0, r0, r3, r4
 800556e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005572:	e7eb      	b.n	800554c <_strtol_l.constprop.0+0x68>
 8005574:	2c2b      	cmp	r4, #43	@ 0x2b
 8005576:	bf04      	itt	eq
 8005578:	782c      	ldrbeq	r4, [r5, #0]
 800557a:	1c95      	addeq	r5, r2, #2
 800557c:	e7cf      	b.n	800551e <_strtol_l.constprop.0+0x3a>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1da      	bne.n	8005538 <_strtol_l.constprop.0+0x54>
 8005582:	2c30      	cmp	r4, #48	@ 0x30
 8005584:	bf0c      	ite	eq
 8005586:	2308      	moveq	r3, #8
 8005588:	230a      	movne	r3, #10
 800558a:	e7d5      	b.n	8005538 <_strtol_l.constprop.0+0x54>
 800558c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005590:	2f19      	cmp	r7, #25
 8005592:	d801      	bhi.n	8005598 <_strtol_l.constprop.0+0xb4>
 8005594:	3c37      	subs	r4, #55	@ 0x37
 8005596:	e7de      	b.n	8005556 <_strtol_l.constprop.0+0x72>
 8005598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800559c:	2f19      	cmp	r7, #25
 800559e:	d804      	bhi.n	80055aa <_strtol_l.constprop.0+0xc6>
 80055a0:	3c57      	subs	r4, #87	@ 0x57
 80055a2:	e7d8      	b.n	8005556 <_strtol_l.constprop.0+0x72>
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	e7e1      	b.n	800556e <_strtol_l.constprop.0+0x8a>
 80055aa:	1c53      	adds	r3, r2, #1
 80055ac:	d108      	bne.n	80055c0 <_strtol_l.constprop.0+0xdc>
 80055ae:	2322      	movs	r3, #34	@ 0x22
 80055b0:	4660      	mov	r0, ip
 80055b2:	f8ce 3000 	str.w	r3, [lr]
 80055b6:	f1b8 0f00 	cmp.w	r8, #0
 80055ba:	d0a0      	beq.n	80054fe <_strtol_l.constprop.0+0x1a>
 80055bc:	1e69      	subs	r1, r5, #1
 80055be:	e006      	b.n	80055ce <_strtol_l.constprop.0+0xea>
 80055c0:	b106      	cbz	r6, 80055c4 <_strtol_l.constprop.0+0xe0>
 80055c2:	4240      	negs	r0, r0
 80055c4:	f1b8 0f00 	cmp.w	r8, #0
 80055c8:	d099      	beq.n	80054fe <_strtol_l.constprop.0+0x1a>
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	d1f6      	bne.n	80055bc <_strtol_l.constprop.0+0xd8>
 80055ce:	f8c8 1000 	str.w	r1, [r8]
 80055d2:	e794      	b.n	80054fe <_strtol_l.constprop.0+0x1a>
 80055d4:	08009071 	.word	0x08009071

080055d8 <_strtol_r>:
 80055d8:	f7ff bf84 	b.w	80054e4 <_strtol_l.constprop.0>

080055dc <strtol>:
 80055dc:	4613      	mov	r3, r2
 80055de:	460a      	mov	r2, r1
 80055e0:	4601      	mov	r1, r0
 80055e2:	4802      	ldr	r0, [pc, #8]	@ (80055ec <strtol+0x10>)
 80055e4:	6800      	ldr	r0, [r0, #0]
 80055e6:	f7ff bf7d 	b.w	80054e4 <_strtol_l.constprop.0>
 80055ea:	bf00      	nop
 80055ec:	20000184 	.word	0x20000184

080055f0 <__cvt>:
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f6:	461d      	mov	r5, r3
 80055f8:	bfbb      	ittet	lt
 80055fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80055fe:	461d      	movlt	r5, r3
 8005600:	2300      	movge	r3, #0
 8005602:	232d      	movlt	r3, #45	@ 0x2d
 8005604:	b088      	sub	sp, #32
 8005606:	4614      	mov	r4, r2
 8005608:	bfb8      	it	lt
 800560a:	4614      	movlt	r4, r2
 800560c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800560e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005610:	7013      	strb	r3, [r2, #0]
 8005612:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005614:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005618:	f023 0820 	bic.w	r8, r3, #32
 800561c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005620:	d005      	beq.n	800562e <__cvt+0x3e>
 8005622:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005626:	d100      	bne.n	800562a <__cvt+0x3a>
 8005628:	3601      	adds	r6, #1
 800562a:	2302      	movs	r3, #2
 800562c:	e000      	b.n	8005630 <__cvt+0x40>
 800562e:	2303      	movs	r3, #3
 8005630:	aa07      	add	r2, sp, #28
 8005632:	9204      	str	r2, [sp, #16]
 8005634:	aa06      	add	r2, sp, #24
 8005636:	e9cd a202 	strd	sl, r2, [sp, #8]
 800563a:	e9cd 3600 	strd	r3, r6, [sp]
 800563e:	4622      	mov	r2, r4
 8005640:	462b      	mov	r3, r5
 8005642:	f001 f8b5 	bl	80067b0 <_dtoa_r>
 8005646:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800564a:	4607      	mov	r7, r0
 800564c:	d119      	bne.n	8005682 <__cvt+0x92>
 800564e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005650:	07db      	lsls	r3, r3, #31
 8005652:	d50e      	bpl.n	8005672 <__cvt+0x82>
 8005654:	eb00 0906 	add.w	r9, r0, r6
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	f7fb f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8005664:	b108      	cbz	r0, 800566a <__cvt+0x7a>
 8005666:	f8cd 901c 	str.w	r9, [sp, #28]
 800566a:	2230      	movs	r2, #48	@ 0x30
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	454b      	cmp	r3, r9
 8005670:	d31e      	bcc.n	80056b0 <__cvt+0xc0>
 8005672:	4638      	mov	r0, r7
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005678:	1bdb      	subs	r3, r3, r7
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	b008      	add	sp, #32
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005686:	eb00 0906 	add.w	r9, r0, r6
 800568a:	d1e5      	bne.n	8005658 <__cvt+0x68>
 800568c:	7803      	ldrb	r3, [r0, #0]
 800568e:	2b30      	cmp	r3, #48	@ 0x30
 8005690:	d10a      	bne.n	80056a8 <__cvt+0xb8>
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fb f985 	bl	80009a8 <__aeabi_dcmpeq>
 800569e:	b918      	cbnz	r0, 80056a8 <__cvt+0xb8>
 80056a0:	f1c6 0601 	rsb	r6, r6, #1
 80056a4:	f8ca 6000 	str.w	r6, [sl]
 80056a8:	f8da 3000 	ldr.w	r3, [sl]
 80056ac:	4499      	add	r9, r3
 80056ae:	e7d3      	b.n	8005658 <__cvt+0x68>
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	9107      	str	r1, [sp, #28]
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e7d9      	b.n	800566c <__cvt+0x7c>

080056b8 <__exponent>:
 80056b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ba:	2900      	cmp	r1, #0
 80056bc:	bfb6      	itet	lt
 80056be:	232d      	movlt	r3, #45	@ 0x2d
 80056c0:	232b      	movge	r3, #43	@ 0x2b
 80056c2:	4249      	neglt	r1, r1
 80056c4:	2909      	cmp	r1, #9
 80056c6:	7002      	strb	r2, [r0, #0]
 80056c8:	7043      	strb	r3, [r0, #1]
 80056ca:	dd29      	ble.n	8005720 <__exponent+0x68>
 80056cc:	f10d 0307 	add.w	r3, sp, #7
 80056d0:	461d      	mov	r5, r3
 80056d2:	270a      	movs	r7, #10
 80056d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80056d8:	461a      	mov	r2, r3
 80056da:	fb07 1416 	mls	r4, r7, r6, r1
 80056de:	3430      	adds	r4, #48	@ 0x30
 80056e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80056e4:	460c      	mov	r4, r1
 80056e6:	2c63      	cmp	r4, #99	@ 0x63
 80056e8:	4631      	mov	r1, r6
 80056ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80056ee:	dcf1      	bgt.n	80056d4 <__exponent+0x1c>
 80056f0:	3130      	adds	r1, #48	@ 0x30
 80056f2:	1e94      	subs	r4, r2, #2
 80056f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056f8:	4623      	mov	r3, r4
 80056fa:	1c41      	adds	r1, r0, #1
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	d30a      	bcc.n	8005716 <__exponent+0x5e>
 8005700:	f10d 0309 	add.w	r3, sp, #9
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	42ac      	cmp	r4, r5
 8005708:	bf88      	it	hi
 800570a:	2300      	movhi	r3, #0
 800570c:	3302      	adds	r3, #2
 800570e:	4403      	add	r3, r0
 8005710:	1a18      	subs	r0, r3, r0
 8005712:	b003      	add	sp, #12
 8005714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005716:	f813 6b01 	ldrb.w	r6, [r3], #1
 800571a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800571e:	e7ed      	b.n	80056fc <__exponent+0x44>
 8005720:	2330      	movs	r3, #48	@ 0x30
 8005722:	3130      	adds	r1, #48	@ 0x30
 8005724:	7083      	strb	r3, [r0, #2]
 8005726:	70c1      	strb	r1, [r0, #3]
 8005728:	1d03      	adds	r3, r0, #4
 800572a:	e7f1      	b.n	8005710 <__exponent+0x58>

0800572c <_printf_float>:
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	b091      	sub	sp, #68	@ 0x44
 8005732:	460c      	mov	r4, r1
 8005734:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005738:	4616      	mov	r6, r2
 800573a:	461f      	mov	r7, r3
 800573c:	4605      	mov	r5, r0
 800573e:	f000 ff0f 	bl	8006560 <_localeconv_r>
 8005742:	6803      	ldr	r3, [r0, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	9308      	str	r3, [sp, #32]
 8005748:	f7fa fd02 	bl	8000150 <strlen>
 800574c:	2300      	movs	r3, #0
 800574e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005750:	f8d8 3000 	ldr.w	r3, [r8]
 8005754:	9009      	str	r0, [sp, #36]	@ 0x24
 8005756:	3307      	adds	r3, #7
 8005758:	f023 0307 	bic.w	r3, r3, #7
 800575c:	f103 0208 	add.w	r2, r3, #8
 8005760:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005764:	f8d4 b000 	ldr.w	fp, [r4]
 8005768:	f8c8 2000 	str.w	r2, [r8]
 800576c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005770:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005774:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005776:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005782:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005786:	4b9c      	ldr	r3, [pc, #624]	@ (80059f8 <_printf_float+0x2cc>)
 8005788:	f7fb f940 	bl	8000a0c <__aeabi_dcmpun>
 800578c:	bb70      	cbnz	r0, 80057ec <_printf_float+0xc0>
 800578e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005792:	f04f 32ff 	mov.w	r2, #4294967295
 8005796:	4b98      	ldr	r3, [pc, #608]	@ (80059f8 <_printf_float+0x2cc>)
 8005798:	f7fb f91a 	bl	80009d0 <__aeabi_dcmple>
 800579c:	bb30      	cbnz	r0, 80057ec <_printf_float+0xc0>
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fb f909 	bl	80009bc <__aeabi_dcmplt>
 80057aa:	b110      	cbz	r0, 80057b2 <_printf_float+0x86>
 80057ac:	232d      	movs	r3, #45	@ 0x2d
 80057ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057b2:	4a92      	ldr	r2, [pc, #584]	@ (80059fc <_printf_float+0x2d0>)
 80057b4:	4b92      	ldr	r3, [pc, #584]	@ (8005a00 <_printf_float+0x2d4>)
 80057b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057ba:	bf94      	ite	ls
 80057bc:	4690      	movls	r8, r2
 80057be:	4698      	movhi	r8, r3
 80057c0:	2303      	movs	r3, #3
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	f02b 0304 	bic.w	r3, fp, #4
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	4633      	mov	r3, r6
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	9700      	str	r7, [sp, #0]
 80057d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80057d8:	f000 f9d4 	bl	8005b84 <_printf_common>
 80057dc:	3001      	adds	r0, #1
 80057de:	f040 8090 	bne.w	8005902 <_printf_float+0x1d6>
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	b011      	add	sp, #68	@ 0x44
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fb f90a 	bl	8000a0c <__aeabi_dcmpun>
 80057f8:	b148      	cbz	r0, 800580e <_printf_float+0xe2>
 80057fa:	464b      	mov	r3, r9
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bfb8      	it	lt
 8005800:	232d      	movlt	r3, #45	@ 0x2d
 8005802:	4a80      	ldr	r2, [pc, #512]	@ (8005a04 <_printf_float+0x2d8>)
 8005804:	bfb8      	it	lt
 8005806:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800580a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a08 <_printf_float+0x2dc>)
 800580c:	e7d3      	b.n	80057b6 <_printf_float+0x8a>
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	d13f      	bne.n	8005898 <_printf_float+0x16c>
 8005818:	2306      	movs	r3, #6
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	9206      	str	r2, [sp, #24]
 8005826:	aa0e      	add	r2, sp, #56	@ 0x38
 8005828:	e9cd a204 	strd	sl, r2, [sp, #16]
 800582c:	aa0d      	add	r2, sp, #52	@ 0x34
 800582e:	9203      	str	r2, [sp, #12]
 8005830:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005834:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	4642      	mov	r2, r8
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4628      	mov	r0, r5
 8005840:	464b      	mov	r3, r9
 8005842:	910a      	str	r1, [sp, #40]	@ 0x28
 8005844:	f7ff fed4 	bl	80055f0 <__cvt>
 8005848:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800584a:	4680      	mov	r8, r0
 800584c:	2947      	cmp	r1, #71	@ 0x47
 800584e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005850:	d128      	bne.n	80058a4 <_printf_float+0x178>
 8005852:	1cc8      	adds	r0, r1, #3
 8005854:	db02      	blt.n	800585c <_printf_float+0x130>
 8005856:	6863      	ldr	r3, [r4, #4]
 8005858:	4299      	cmp	r1, r3
 800585a:	dd40      	ble.n	80058de <_printf_float+0x1b2>
 800585c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005860:	fa5f fa8a 	uxtb.w	sl, sl
 8005864:	4652      	mov	r2, sl
 8005866:	3901      	subs	r1, #1
 8005868:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800586c:	910d      	str	r1, [sp, #52]	@ 0x34
 800586e:	f7ff ff23 	bl	80056b8 <__exponent>
 8005872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005874:	4681      	mov	r9, r0
 8005876:	1813      	adds	r3, r2, r0
 8005878:	2a01      	cmp	r2, #1
 800587a:	6123      	str	r3, [r4, #16]
 800587c:	dc02      	bgt.n	8005884 <_printf_float+0x158>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	07d2      	lsls	r2, r2, #31
 8005882:	d501      	bpl.n	8005888 <_printf_float+0x15c>
 8005884:	3301      	adds	r3, #1
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800588c:	2b00      	cmp	r3, #0
 800588e:	d09e      	beq.n	80057ce <_printf_float+0xa2>
 8005890:	232d      	movs	r3, #45	@ 0x2d
 8005892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005896:	e79a      	b.n	80057ce <_printf_float+0xa2>
 8005898:	2947      	cmp	r1, #71	@ 0x47
 800589a:	d1bf      	bne.n	800581c <_printf_float+0xf0>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1bd      	bne.n	800581c <_printf_float+0xf0>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e7ba      	b.n	800581a <_printf_float+0xee>
 80058a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058a8:	d9dc      	bls.n	8005864 <_printf_float+0x138>
 80058aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058ae:	d118      	bne.n	80058e2 <_printf_float+0x1b6>
 80058b0:	2900      	cmp	r1, #0
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	dd0b      	ble.n	80058ce <_printf_float+0x1a2>
 80058b6:	6121      	str	r1, [r4, #16]
 80058b8:	b913      	cbnz	r3, 80058c0 <_printf_float+0x194>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	07d0      	lsls	r0, r2, #31
 80058be:	d502      	bpl.n	80058c6 <_printf_float+0x19a>
 80058c0:	3301      	adds	r3, #1
 80058c2:	440b      	add	r3, r1
 80058c4:	6123      	str	r3, [r4, #16]
 80058c6:	f04f 0900 	mov.w	r9, #0
 80058ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058cc:	e7dc      	b.n	8005888 <_printf_float+0x15c>
 80058ce:	b913      	cbnz	r3, 80058d6 <_printf_float+0x1aa>
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	07d2      	lsls	r2, r2, #31
 80058d4:	d501      	bpl.n	80058da <_printf_float+0x1ae>
 80058d6:	3302      	adds	r3, #2
 80058d8:	e7f4      	b.n	80058c4 <_printf_float+0x198>
 80058da:	2301      	movs	r3, #1
 80058dc:	e7f2      	b.n	80058c4 <_printf_float+0x198>
 80058de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80058e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058e4:	4299      	cmp	r1, r3
 80058e6:	db05      	blt.n	80058f4 <_printf_float+0x1c8>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	6121      	str	r1, [r4, #16]
 80058ec:	07d8      	lsls	r0, r3, #31
 80058ee:	d5ea      	bpl.n	80058c6 <_printf_float+0x19a>
 80058f0:	1c4b      	adds	r3, r1, #1
 80058f2:	e7e7      	b.n	80058c4 <_printf_float+0x198>
 80058f4:	2900      	cmp	r1, #0
 80058f6:	bfcc      	ite	gt
 80058f8:	2201      	movgt	r2, #1
 80058fa:	f1c1 0202 	rsble	r2, r1, #2
 80058fe:	4413      	add	r3, r2
 8005900:	e7e0      	b.n	80058c4 <_printf_float+0x198>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	055a      	lsls	r2, r3, #21
 8005906:	d407      	bmi.n	8005918 <_printf_float+0x1ec>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	4642      	mov	r2, r8
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d12b      	bne.n	800596e <_printf_float+0x242>
 8005916:	e764      	b.n	80057e2 <_printf_float+0xb6>
 8005918:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800591c:	f240 80dc 	bls.w	8005ad8 <_printf_float+0x3ac>
 8005920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005924:	2200      	movs	r2, #0
 8005926:	2300      	movs	r3, #0
 8005928:	f7fb f83e 	bl	80009a8 <__aeabi_dcmpeq>
 800592c:	2800      	cmp	r0, #0
 800592e:	d033      	beq.n	8005998 <_printf_float+0x26c>
 8005930:	2301      	movs	r3, #1
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	4a35      	ldr	r2, [pc, #212]	@ (8005a0c <_printf_float+0x2e0>)
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f af51 	beq.w	80057e2 <_printf_float+0xb6>
 8005940:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005944:	4543      	cmp	r3, r8
 8005946:	db02      	blt.n	800594e <_printf_float+0x222>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	07d8      	lsls	r0, r3, #31
 800594c:	d50f      	bpl.n	800596e <_printf_float+0x242>
 800594e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f af42 	beq.w	80057e2 <_printf_float+0xb6>
 800595e:	f04f 0900 	mov.w	r9, #0
 8005962:	f108 38ff 	add.w	r8, r8, #4294967295
 8005966:	f104 0a1a 	add.w	sl, r4, #26
 800596a:	45c8      	cmp	r8, r9
 800596c:	dc09      	bgt.n	8005982 <_printf_float+0x256>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	079b      	lsls	r3, r3, #30
 8005972:	f100 8102 	bmi.w	8005b7a <_printf_float+0x44e>
 8005976:	68e0      	ldr	r0, [r4, #12]
 8005978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800597a:	4298      	cmp	r0, r3
 800597c:	bfb8      	it	lt
 800597e:	4618      	movlt	r0, r3
 8005980:	e731      	b.n	80057e6 <_printf_float+0xba>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f af28 	beq.w	80057e2 <_printf_float+0xb6>
 8005992:	f109 0901 	add.w	r9, r9, #1
 8005996:	e7e8      	b.n	800596a <_printf_float+0x23e>
 8005998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800599a:	2b00      	cmp	r3, #0
 800599c:	dc38      	bgt.n	8005a10 <_printf_float+0x2e4>
 800599e:	2301      	movs	r3, #1
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <_printf_float+0x2e0>)
 80059a6:	47b8      	blx	r7
 80059a8:	3001      	adds	r0, #1
 80059aa:	f43f af1a 	beq.w	80057e2 <_printf_float+0xb6>
 80059ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80059b2:	ea59 0303 	orrs.w	r3, r9, r3
 80059b6:	d102      	bne.n	80059be <_printf_float+0x292>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	07d9      	lsls	r1, r3, #31
 80059bc:	d5d7      	bpl.n	800596e <_printf_float+0x242>
 80059be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f af0a 	beq.w	80057e2 <_printf_float+0xb6>
 80059ce:	f04f 0a00 	mov.w	sl, #0
 80059d2:	f104 0b1a 	add.w	fp, r4, #26
 80059d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059d8:	425b      	negs	r3, r3
 80059da:	4553      	cmp	r3, sl
 80059dc:	dc01      	bgt.n	80059e2 <_printf_float+0x2b6>
 80059de:	464b      	mov	r3, r9
 80059e0:	e793      	b.n	800590a <_printf_float+0x1de>
 80059e2:	2301      	movs	r3, #1
 80059e4:	465a      	mov	r2, fp
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f aef8 	beq.w	80057e2 <_printf_float+0xb6>
 80059f2:	f10a 0a01 	add.w	sl, sl, #1
 80059f6:	e7ee      	b.n	80059d6 <_printf_float+0x2aa>
 80059f8:	7fefffff 	.word	0x7fefffff
 80059fc:	08009171 	.word	0x08009171
 8005a00:	08009175 	.word	0x08009175
 8005a04:	08009179 	.word	0x08009179
 8005a08:	0800917d 	.word	0x0800917d
 8005a0c:	08009181 	.word	0x08009181
 8005a10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a12:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005a16:	4553      	cmp	r3, sl
 8005a18:	bfa8      	it	ge
 8005a1a:	4653      	movge	r3, sl
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	4699      	mov	r9, r3
 8005a20:	dc36      	bgt.n	8005a90 <_printf_float+0x364>
 8005a22:	f04f 0b00 	mov.w	fp, #0
 8005a26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a2a:	f104 021a 	add.w	r2, r4, #26
 8005a2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a32:	eba3 0309 	sub.w	r3, r3, r9
 8005a36:	455b      	cmp	r3, fp
 8005a38:	dc31      	bgt.n	8005a9e <_printf_float+0x372>
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a3c:	459a      	cmp	sl, r3
 8005a3e:	dc3a      	bgt.n	8005ab6 <_printf_float+0x38a>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	07da      	lsls	r2, r3, #31
 8005a44:	d437      	bmi.n	8005ab6 <_printf_float+0x38a>
 8005a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a48:	ebaa 0903 	sub.w	r9, sl, r3
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4e:	ebaa 0303 	sub.w	r3, sl, r3
 8005a52:	4599      	cmp	r9, r3
 8005a54:	bfa8      	it	ge
 8005a56:	4699      	movge	r9, r3
 8005a58:	f1b9 0f00 	cmp.w	r9, #0
 8005a5c:	dc33      	bgt.n	8005ac6 <_printf_float+0x39a>
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a66:	f104 0b1a 	add.w	fp, r4, #26
 8005a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8005a70:	eba3 0309 	sub.w	r3, r3, r9
 8005a74:	4543      	cmp	r3, r8
 8005a76:	f77f af7a 	ble.w	800596e <_printf_float+0x242>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	465a      	mov	r2, fp
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f aeac 	beq.w	80057e2 <_printf_float+0xb6>
 8005a8a:	f108 0801 	add.w	r8, r8, #1
 8005a8e:	e7ec      	b.n	8005a6a <_printf_float+0x33e>
 8005a90:	4642      	mov	r2, r8
 8005a92:	4631      	mov	r1, r6
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b8      	blx	r7
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d1c2      	bne.n	8005a22 <_printf_float+0x2f6>
 8005a9c:	e6a1      	b.n	80057e2 <_printf_float+0xb6>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	920a      	str	r2, [sp, #40]	@ 0x28
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f ae9a 	beq.w	80057e2 <_printf_float+0xb6>
 8005aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ab0:	f10b 0b01 	add.w	fp, fp, #1
 8005ab4:	e7bb      	b.n	8005a2e <_printf_float+0x302>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d1c0      	bne.n	8005a46 <_printf_float+0x31a>
 8005ac4:	e68d      	b.n	80057e2 <_printf_float+0xb6>
 8005ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ac8:	464b      	mov	r3, r9
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	4442      	add	r2, r8
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d1c3      	bne.n	8005a5e <_printf_float+0x332>
 8005ad6:	e684      	b.n	80057e2 <_printf_float+0xb6>
 8005ad8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005adc:	f1ba 0f01 	cmp.w	sl, #1
 8005ae0:	dc01      	bgt.n	8005ae6 <_printf_float+0x3ba>
 8005ae2:	07db      	lsls	r3, r3, #31
 8005ae4:	d536      	bpl.n	8005b54 <_printf_float+0x428>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4642      	mov	r2, r8
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f ae76 	beq.w	80057e2 <_printf_float+0xb6>
 8005af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f ae6e 	beq.w	80057e2 <_printf_float+0xb6>
 8005b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b12:	f7fa ff49 	bl	80009a8 <__aeabi_dcmpeq>
 8005b16:	b9c0      	cbnz	r0, 8005b4a <_printf_float+0x41e>
 8005b18:	4653      	mov	r3, sl
 8005b1a:	f108 0201 	add.w	r2, r8, #1
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	d10c      	bne.n	8005b42 <_printf_float+0x416>
 8005b28:	e65b      	b.n	80057e2 <_printf_float+0xb6>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	465a      	mov	r2, fp
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f ae54 	beq.w	80057e2 <_printf_float+0xb6>
 8005b3a:	f108 0801 	add.w	r8, r8, #1
 8005b3e:	45d0      	cmp	r8, sl
 8005b40:	dbf3      	blt.n	8005b2a <_printf_float+0x3fe>
 8005b42:	464b      	mov	r3, r9
 8005b44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b48:	e6e0      	b.n	800590c <_printf_float+0x1e0>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	f104 0b1a 	add.w	fp, r4, #26
 8005b52:	e7f4      	b.n	8005b3e <_printf_float+0x412>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4642      	mov	r2, r8
 8005b58:	e7e1      	b.n	8005b1e <_printf_float+0x3f2>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	464a      	mov	r2, r9
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	f43f ae3c 	beq.w	80057e2 <_printf_float+0xb6>
 8005b6a:	f108 0801 	add.w	r8, r8, #1
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b72:	1a5b      	subs	r3, r3, r1
 8005b74:	4543      	cmp	r3, r8
 8005b76:	dcf0      	bgt.n	8005b5a <_printf_float+0x42e>
 8005b78:	e6fd      	b.n	8005976 <_printf_float+0x24a>
 8005b7a:	f04f 0800 	mov.w	r8, #0
 8005b7e:	f104 0919 	add.w	r9, r4, #25
 8005b82:	e7f4      	b.n	8005b6e <_printf_float+0x442>

08005b84 <_printf_common>:
 8005b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b88:	4616      	mov	r6, r2
 8005b8a:	4698      	mov	r8, r3
 8005b8c:	688a      	ldr	r2, [r1, #8]
 8005b8e:	690b      	ldr	r3, [r1, #16]
 8005b90:	4607      	mov	r7, r0
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bfb8      	it	lt
 8005b96:	4613      	movlt	r3, r2
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ba4:	b10a      	cbz	r2, 8005baa <_printf_common+0x26>
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	0699      	lsls	r1, r3, #26
 8005bae:	bf42      	ittt	mi
 8005bb0:	6833      	ldrmi	r3, [r6, #0]
 8005bb2:	3302      	addmi	r3, #2
 8005bb4:	6033      	strmi	r3, [r6, #0]
 8005bb6:	6825      	ldr	r5, [r4, #0]
 8005bb8:	f015 0506 	ands.w	r5, r5, #6
 8005bbc:	d106      	bne.n	8005bcc <_printf_common+0x48>
 8005bbe:	f104 0a19 	add.w	sl, r4, #25
 8005bc2:	68e3      	ldr	r3, [r4, #12]
 8005bc4:	6832      	ldr	r2, [r6, #0]
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	dc2b      	bgt.n	8005c24 <_printf_common+0xa0>
 8005bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	3b00      	subs	r3, #0
 8005bd4:	bf18      	it	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	0692      	lsls	r2, r2, #26
 8005bda:	d430      	bmi.n	8005c3e <_printf_common+0xba>
 8005bdc:	4641      	mov	r1, r8
 8005bde:	4638      	mov	r0, r7
 8005be0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005be4:	47c8      	blx	r9
 8005be6:	3001      	adds	r0, #1
 8005be8:	d023      	beq.n	8005c32 <_printf_common+0xae>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	6922      	ldr	r2, [r4, #16]
 8005bee:	f003 0306 	and.w	r3, r3, #6
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	bf14      	ite	ne
 8005bf6:	2500      	movne	r5, #0
 8005bf8:	6833      	ldreq	r3, [r6, #0]
 8005bfa:	f04f 0600 	mov.w	r6, #0
 8005bfe:	bf08      	it	eq
 8005c00:	68e5      	ldreq	r5, [r4, #12]
 8005c02:	f104 041a 	add.w	r4, r4, #26
 8005c06:	bf08      	it	eq
 8005c08:	1aed      	subeq	r5, r5, r3
 8005c0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c0e:	bf08      	it	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bfc4      	itt	gt
 8005c18:	1a9b      	subgt	r3, r3, r2
 8005c1a:	18ed      	addgt	r5, r5, r3
 8005c1c:	42b5      	cmp	r5, r6
 8005c1e:	d11a      	bne.n	8005c56 <_printf_common+0xd2>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e008      	b.n	8005c36 <_printf_common+0xb2>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4652      	mov	r2, sl
 8005c28:	4641      	mov	r1, r8
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c8      	blx	r9
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d103      	bne.n	8005c3a <_printf_common+0xb6>
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	e7c1      	b.n	8005bc2 <_printf_common+0x3e>
 8005c3e:	2030      	movs	r0, #48	@ 0x30
 8005c40:	18e1      	adds	r1, r4, r3
 8005c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c4c:	4422      	add	r2, r4
 8005c4e:	3302      	adds	r3, #2
 8005c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c54:	e7c2      	b.n	8005bdc <_printf_common+0x58>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	47c8      	blx	r9
 8005c60:	3001      	adds	r0, #1
 8005c62:	d0e6      	beq.n	8005c32 <_printf_common+0xae>
 8005c64:	3601      	adds	r6, #1
 8005c66:	e7d9      	b.n	8005c1c <_printf_common+0x98>

08005c68 <_printf_i>:
 8005c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	7e0f      	ldrb	r7, [r1, #24]
 8005c6e:	4691      	mov	r9, r2
 8005c70:	2f78      	cmp	r7, #120	@ 0x78
 8005c72:	4680      	mov	r8, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	469a      	mov	sl, r3
 8005c78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c7e:	d807      	bhi.n	8005c90 <_printf_i+0x28>
 8005c80:	2f62      	cmp	r7, #98	@ 0x62
 8005c82:	d80a      	bhi.n	8005c9a <_printf_i+0x32>
 8005c84:	2f00      	cmp	r7, #0
 8005c86:	f000 80d3 	beq.w	8005e30 <_printf_i+0x1c8>
 8005c8a:	2f58      	cmp	r7, #88	@ 0x58
 8005c8c:	f000 80ba 	beq.w	8005e04 <_printf_i+0x19c>
 8005c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c98:	e03a      	b.n	8005d10 <_printf_i+0xa8>
 8005c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c9e:	2b15      	cmp	r3, #21
 8005ca0:	d8f6      	bhi.n	8005c90 <_printf_i+0x28>
 8005ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ca8 <_printf_i+0x40>)
 8005ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca8:	08005d01 	.word	0x08005d01
 8005cac:	08005d15 	.word	0x08005d15
 8005cb0:	08005c91 	.word	0x08005c91
 8005cb4:	08005c91 	.word	0x08005c91
 8005cb8:	08005c91 	.word	0x08005c91
 8005cbc:	08005c91 	.word	0x08005c91
 8005cc0:	08005d15 	.word	0x08005d15
 8005cc4:	08005c91 	.word	0x08005c91
 8005cc8:	08005c91 	.word	0x08005c91
 8005ccc:	08005c91 	.word	0x08005c91
 8005cd0:	08005c91 	.word	0x08005c91
 8005cd4:	08005e17 	.word	0x08005e17
 8005cd8:	08005d3f 	.word	0x08005d3f
 8005cdc:	08005dd1 	.word	0x08005dd1
 8005ce0:	08005c91 	.word	0x08005c91
 8005ce4:	08005c91 	.word	0x08005c91
 8005ce8:	08005e39 	.word	0x08005e39
 8005cec:	08005c91 	.word	0x08005c91
 8005cf0:	08005d3f 	.word	0x08005d3f
 8005cf4:	08005c91 	.word	0x08005c91
 8005cf8:	08005c91 	.word	0x08005c91
 8005cfc:	08005dd9 	.word	0x08005dd9
 8005d00:	6833      	ldr	r3, [r6, #0]
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6032      	str	r2, [r6, #0]
 8005d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d10:	2301      	movs	r3, #1
 8005d12:	e09e      	b.n	8005e52 <_printf_i+0x1ea>
 8005d14:	6833      	ldr	r3, [r6, #0]
 8005d16:	6820      	ldr	r0, [r4, #0]
 8005d18:	1d19      	adds	r1, r3, #4
 8005d1a:	6031      	str	r1, [r6, #0]
 8005d1c:	0606      	lsls	r6, r0, #24
 8005d1e:	d501      	bpl.n	8005d24 <_printf_i+0xbc>
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	e003      	b.n	8005d2c <_printf_i+0xc4>
 8005d24:	0645      	lsls	r5, r0, #25
 8005d26:	d5fb      	bpl.n	8005d20 <_printf_i+0xb8>
 8005d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	da03      	bge.n	8005d38 <_printf_i+0xd0>
 8005d30:	232d      	movs	r3, #45	@ 0x2d
 8005d32:	426d      	negs	r5, r5
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d38:	230a      	movs	r3, #10
 8005d3a:	4859      	ldr	r0, [pc, #356]	@ (8005ea0 <_printf_i+0x238>)
 8005d3c:	e011      	b.n	8005d62 <_printf_i+0xfa>
 8005d3e:	6821      	ldr	r1, [r4, #0]
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	0608      	lsls	r0, r1, #24
 8005d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d48:	d402      	bmi.n	8005d50 <_printf_i+0xe8>
 8005d4a:	0649      	lsls	r1, r1, #25
 8005d4c:	bf48      	it	mi
 8005d4e:	b2ad      	uxthmi	r5, r5
 8005d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d52:	6033      	str	r3, [r6, #0]
 8005d54:	bf14      	ite	ne
 8005d56:	230a      	movne	r3, #10
 8005d58:	2308      	moveq	r3, #8
 8005d5a:	4851      	ldr	r0, [pc, #324]	@ (8005ea0 <_printf_i+0x238>)
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d62:	6866      	ldr	r6, [r4, #4]
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	bfa8      	it	ge
 8005d68:	6821      	ldrge	r1, [r4, #0]
 8005d6a:	60a6      	str	r6, [r4, #8]
 8005d6c:	bfa4      	itt	ge
 8005d6e:	f021 0104 	bicge.w	r1, r1, #4
 8005d72:	6021      	strge	r1, [r4, #0]
 8005d74:	b90d      	cbnz	r5, 8005d7a <_printf_i+0x112>
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d04b      	beq.n	8005e12 <_printf_i+0x1aa>
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d80:	fb03 5711 	mls	r7, r3, r1, r5
 8005d84:	5dc7      	ldrb	r7, [r0, r7]
 8005d86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d8a:	462f      	mov	r7, r5
 8005d8c:	42bb      	cmp	r3, r7
 8005d8e:	460d      	mov	r5, r1
 8005d90:	d9f4      	bls.n	8005d7c <_printf_i+0x114>
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d10b      	bne.n	8005dae <_printf_i+0x146>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	07df      	lsls	r7, r3, #31
 8005d9a:	d508      	bpl.n	8005dae <_printf_i+0x146>
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	6861      	ldr	r1, [r4, #4]
 8005da0:	4299      	cmp	r1, r3
 8005da2:	bfde      	ittt	le
 8005da4:	2330      	movle	r3, #48	@ 0x30
 8005da6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005daa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dae:	1b92      	subs	r2, r2, r6
 8005db0:	6122      	str	r2, [r4, #16]
 8005db2:	464b      	mov	r3, r9
 8005db4:	4621      	mov	r1, r4
 8005db6:	4640      	mov	r0, r8
 8005db8:	f8cd a000 	str.w	sl, [sp]
 8005dbc:	aa03      	add	r2, sp, #12
 8005dbe:	f7ff fee1 	bl	8005b84 <_printf_common>
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d14a      	bne.n	8005e5c <_printf_i+0x1f4>
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	b004      	add	sp, #16
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	f043 0320 	orr.w	r3, r3, #32
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	2778      	movs	r7, #120	@ 0x78
 8005dda:	4832      	ldr	r0, [pc, #200]	@ (8005ea4 <_printf_i+0x23c>)
 8005ddc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	6831      	ldr	r1, [r6, #0]
 8005de4:	061f      	lsls	r7, r3, #24
 8005de6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dea:	d402      	bmi.n	8005df2 <_printf_i+0x18a>
 8005dec:	065f      	lsls	r7, r3, #25
 8005dee:	bf48      	it	mi
 8005df0:	b2ad      	uxthmi	r5, r5
 8005df2:	6031      	str	r1, [r6, #0]
 8005df4:	07d9      	lsls	r1, r3, #31
 8005df6:	bf44      	itt	mi
 8005df8:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfc:	6023      	strmi	r3, [r4, #0]
 8005dfe:	b11d      	cbz	r5, 8005e08 <_printf_i+0x1a0>
 8005e00:	2310      	movs	r3, #16
 8005e02:	e7ab      	b.n	8005d5c <_printf_i+0xf4>
 8005e04:	4826      	ldr	r0, [pc, #152]	@ (8005ea0 <_printf_i+0x238>)
 8005e06:	e7e9      	b.n	8005ddc <_printf_i+0x174>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	f023 0320 	bic.w	r3, r3, #32
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	e7f6      	b.n	8005e00 <_printf_i+0x198>
 8005e12:	4616      	mov	r6, r2
 8005e14:	e7bd      	b.n	8005d92 <_printf_i+0x12a>
 8005e16:	6833      	ldr	r3, [r6, #0]
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	1d18      	adds	r0, r3, #4
 8005e1c:	6961      	ldr	r1, [r4, #20]
 8005e1e:	6030      	str	r0, [r6, #0]
 8005e20:	062e      	lsls	r6, r5, #24
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0x1c2>
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <_printf_i+0x1c8>
 8005e2a:	0668      	lsls	r0, r5, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0x1be>
 8005e2e:	8019      	strh	r1, [r3, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	4616      	mov	r6, r2
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	e7bc      	b.n	8005db2 <_printf_i+0x14a>
 8005e38:	6833      	ldr	r3, [r6, #0]
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	6032      	str	r2, [r6, #0]
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	6862      	ldr	r2, [r4, #4]
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 fc02 	bl	800664e <memchr>
 8005e4a:	b108      	cbz	r0, 8005e50 <_printf_i+0x1e8>
 8005e4c:	1b80      	subs	r0, r0, r6
 8005e4e:	6060      	str	r0, [r4, #4]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	2300      	movs	r3, #0
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e5a:	e7aa      	b.n	8005db2 <_printf_i+0x14a>
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	47d0      	blx	sl
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0ad      	beq.n	8005dc6 <_printf_i+0x15e>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	d413      	bmi.n	8005e98 <_printf_i+0x230>
 8005e70:	68e0      	ldr	r0, [r4, #12]
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	4298      	cmp	r0, r3
 8005e76:	bfb8      	it	lt
 8005e78:	4618      	movlt	r0, r3
 8005e7a:	e7a6      	b.n	8005dca <_printf_i+0x162>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4632      	mov	r2, r6
 8005e80:	4649      	mov	r1, r9
 8005e82:	4640      	mov	r0, r8
 8005e84:	47d0      	blx	sl
 8005e86:	3001      	adds	r0, #1
 8005e88:	d09d      	beq.n	8005dc6 <_printf_i+0x15e>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	68e3      	ldr	r3, [r4, #12]
 8005e8e:	9903      	ldr	r1, [sp, #12]
 8005e90:	1a5b      	subs	r3, r3, r1
 8005e92:	42ab      	cmp	r3, r5
 8005e94:	dcf2      	bgt.n	8005e7c <_printf_i+0x214>
 8005e96:	e7eb      	b.n	8005e70 <_printf_i+0x208>
 8005e98:	2500      	movs	r5, #0
 8005e9a:	f104 0619 	add.w	r6, r4, #25
 8005e9e:	e7f5      	b.n	8005e8c <_printf_i+0x224>
 8005ea0:	08009183 	.word	0x08009183
 8005ea4:	08009194 	.word	0x08009194

08005ea8 <_scanf_float>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	b087      	sub	sp, #28
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	688b      	ldr	r3, [r1, #8]
 8005eb2:	4617      	mov	r7, r2
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005eba:	bf82      	ittt	hi
 8005ebc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ec0:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ec4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ec8:	460a      	mov	r2, r1
 8005eca:	f04f 0500 	mov.w	r5, #0
 8005ece:	bf88      	it	hi
 8005ed0:	608b      	strhi	r3, [r1, #8]
 8005ed2:	680b      	ldr	r3, [r1, #0]
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005eda:	f842 3b1c 	str.w	r3, [r2], #28
 8005ede:	460c      	mov	r4, r1
 8005ee0:	bf98      	it	ls
 8005ee2:	f04f 0b00 	movls.w	fp, #0
 8005ee6:	4616      	mov	r6, r2
 8005ee8:	46aa      	mov	sl, r5
 8005eea:	46a9      	mov	r9, r5
 8005eec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ef0:	9201      	str	r2, [sp, #4]
 8005ef2:	9502      	str	r5, [sp, #8]
 8005ef4:	68a2      	ldr	r2, [r4, #8]
 8005ef6:	b152      	cbz	r2, 8005f0e <_scanf_float+0x66>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b4e      	cmp	r3, #78	@ 0x4e
 8005efe:	d865      	bhi.n	8005fcc <_scanf_float+0x124>
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d83d      	bhi.n	8005f80 <_scanf_float+0xd8>
 8005f04:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f08:	b2c8      	uxtb	r0, r1
 8005f0a:	280e      	cmp	r0, #14
 8005f0c:	d93b      	bls.n	8005f86 <_scanf_float+0xde>
 8005f0e:	f1b9 0f00 	cmp.w	r9, #0
 8005f12:	d003      	beq.n	8005f1c <_scanf_float+0x74>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f20:	f1ba 0f01 	cmp.w	sl, #1
 8005f24:	f200 8118 	bhi.w	8006158 <_scanf_float+0x2b0>
 8005f28:	9b01      	ldr	r3, [sp, #4]
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	f200 8109 	bhi.w	8006142 <_scanf_float+0x29a>
 8005f30:	2001      	movs	r0, #1
 8005f32:	b007      	add	sp, #28
 8005f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f38:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005f3c:	2a0d      	cmp	r2, #13
 8005f3e:	d8e6      	bhi.n	8005f0e <_scanf_float+0x66>
 8005f40:	a101      	add	r1, pc, #4	@ (adr r1, 8005f48 <_scanf_float+0xa0>)
 8005f42:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	0800608f 	.word	0x0800608f
 8005f4c:	08005f0f 	.word	0x08005f0f
 8005f50:	08005f0f 	.word	0x08005f0f
 8005f54:	08005f0f 	.word	0x08005f0f
 8005f58:	080060ef 	.word	0x080060ef
 8005f5c:	080060c7 	.word	0x080060c7
 8005f60:	08005f0f 	.word	0x08005f0f
 8005f64:	08005f0f 	.word	0x08005f0f
 8005f68:	0800609d 	.word	0x0800609d
 8005f6c:	08005f0f 	.word	0x08005f0f
 8005f70:	08005f0f 	.word	0x08005f0f
 8005f74:	08005f0f 	.word	0x08005f0f
 8005f78:	08005f0f 	.word	0x08005f0f
 8005f7c:	08006055 	.word	0x08006055
 8005f80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005f84:	e7da      	b.n	8005f3c <_scanf_float+0x94>
 8005f86:	290e      	cmp	r1, #14
 8005f88:	d8c1      	bhi.n	8005f0e <_scanf_float+0x66>
 8005f8a:	a001      	add	r0, pc, #4	@ (adr r0, 8005f90 <_scanf_float+0xe8>)
 8005f8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08005f0f 	.word	0x08005f0f
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	080060db 	.word	0x080060db
 8005fa0:	08005f0f 	.word	0x08005f0f
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	0800602b 	.word	0x0800602b
 8005fac:	0800602b 	.word	0x0800602b
 8005fb0:	0800602b 	.word	0x0800602b
 8005fb4:	0800602b 	.word	0x0800602b
 8005fb8:	0800602b 	.word	0x0800602b
 8005fbc:	0800602b 	.word	0x0800602b
 8005fc0:	0800602b 	.word	0x0800602b
 8005fc4:	0800602b 	.word	0x0800602b
 8005fc8:	0800602b 	.word	0x0800602b
 8005fcc:	2b6e      	cmp	r3, #110	@ 0x6e
 8005fce:	d809      	bhi.n	8005fe4 <_scanf_float+0x13c>
 8005fd0:	2b60      	cmp	r3, #96	@ 0x60
 8005fd2:	d8b1      	bhi.n	8005f38 <_scanf_float+0x90>
 8005fd4:	2b54      	cmp	r3, #84	@ 0x54
 8005fd6:	d07b      	beq.n	80060d0 <_scanf_float+0x228>
 8005fd8:	2b59      	cmp	r3, #89	@ 0x59
 8005fda:	d198      	bne.n	8005f0e <_scanf_float+0x66>
 8005fdc:	2d07      	cmp	r5, #7
 8005fde:	d196      	bne.n	8005f0e <_scanf_float+0x66>
 8005fe0:	2508      	movs	r5, #8
 8005fe2:	e02c      	b.n	800603e <_scanf_float+0x196>
 8005fe4:	2b74      	cmp	r3, #116	@ 0x74
 8005fe6:	d073      	beq.n	80060d0 <_scanf_float+0x228>
 8005fe8:	2b79      	cmp	r3, #121	@ 0x79
 8005fea:	e7f6      	b.n	8005fda <_scanf_float+0x132>
 8005fec:	6821      	ldr	r1, [r4, #0]
 8005fee:	05c8      	lsls	r0, r1, #23
 8005ff0:	d51b      	bpl.n	800602a <_scanf_float+0x182>
 8005ff2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005ff6:	6021      	str	r1, [r4, #0]
 8005ff8:	f109 0901 	add.w	r9, r9, #1
 8005ffc:	f1bb 0f00 	cmp.w	fp, #0
 8006000:	d003      	beq.n	800600a <_scanf_float+0x162>
 8006002:	3201      	adds	r2, #1
 8006004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006008:	60a2      	str	r2, [r4, #8]
 800600a:	68a3      	ldr	r3, [r4, #8]
 800600c:	3b01      	subs	r3, #1
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	3301      	adds	r3, #1
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3b01      	subs	r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f340 8087 	ble.w	8006130 <_scanf_float+0x288>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	e764      	b.n	8005ef4 <_scanf_float+0x4c>
 800602a:	eb1a 0105 	adds.w	r1, sl, r5
 800602e:	f47f af6e 	bne.w	8005f0e <_scanf_float+0x66>
 8006032:	460d      	mov	r5, r1
 8006034:	468a      	mov	sl, r1
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	f806 3b01 	strb.w	r3, [r6], #1
 8006042:	e7e2      	b.n	800600a <_scanf_float+0x162>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	0610      	lsls	r0, r2, #24
 8006048:	f57f af61 	bpl.w	8005f0e <_scanf_float+0x66>
 800604c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	e7f4      	b.n	800603e <_scanf_float+0x196>
 8006054:	f1ba 0f00 	cmp.w	sl, #0
 8006058:	d10e      	bne.n	8006078 <_scanf_float+0x1d0>
 800605a:	f1b9 0f00 	cmp.w	r9, #0
 800605e:	d10e      	bne.n	800607e <_scanf_float+0x1d6>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006066:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800606a:	d108      	bne.n	800607e <_scanf_float+0x1d6>
 800606c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006070:	f04f 0a01 	mov.w	sl, #1
 8006074:	6022      	str	r2, [r4, #0]
 8006076:	e7e2      	b.n	800603e <_scanf_float+0x196>
 8006078:	f1ba 0f02 	cmp.w	sl, #2
 800607c:	d055      	beq.n	800612a <_scanf_float+0x282>
 800607e:	2d01      	cmp	r5, #1
 8006080:	d002      	beq.n	8006088 <_scanf_float+0x1e0>
 8006082:	2d04      	cmp	r5, #4
 8006084:	f47f af43 	bne.w	8005f0e <_scanf_float+0x66>
 8006088:	3501      	adds	r5, #1
 800608a:	b2ed      	uxtb	r5, r5
 800608c:	e7d7      	b.n	800603e <_scanf_float+0x196>
 800608e:	f1ba 0f01 	cmp.w	sl, #1
 8006092:	f47f af3c 	bne.w	8005f0e <_scanf_float+0x66>
 8006096:	f04f 0a02 	mov.w	sl, #2
 800609a:	e7d0      	b.n	800603e <_scanf_float+0x196>
 800609c:	b97d      	cbnz	r5, 80060be <_scanf_float+0x216>
 800609e:	f1b9 0f00 	cmp.w	r9, #0
 80060a2:	f47f af37 	bne.w	8005f14 <_scanf_float+0x6c>
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060b0:	f040 8103 	bne.w	80062ba <_scanf_float+0x412>
 80060b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060b8:	2501      	movs	r5, #1
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	e7bf      	b.n	800603e <_scanf_float+0x196>
 80060be:	2d03      	cmp	r5, #3
 80060c0:	d0e2      	beq.n	8006088 <_scanf_float+0x1e0>
 80060c2:	2d05      	cmp	r5, #5
 80060c4:	e7de      	b.n	8006084 <_scanf_float+0x1dc>
 80060c6:	2d02      	cmp	r5, #2
 80060c8:	f47f af21 	bne.w	8005f0e <_scanf_float+0x66>
 80060cc:	2503      	movs	r5, #3
 80060ce:	e7b6      	b.n	800603e <_scanf_float+0x196>
 80060d0:	2d06      	cmp	r5, #6
 80060d2:	f47f af1c 	bne.w	8005f0e <_scanf_float+0x66>
 80060d6:	2507      	movs	r5, #7
 80060d8:	e7b1      	b.n	800603e <_scanf_float+0x196>
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	0591      	lsls	r1, r2, #22
 80060de:	f57f af16 	bpl.w	8005f0e <_scanf_float+0x66>
 80060e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80060ec:	e7a7      	b.n	800603e <_scanf_float+0x196>
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80060f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80060f8:	d006      	beq.n	8006108 <_scanf_float+0x260>
 80060fa:	0550      	lsls	r0, r2, #21
 80060fc:	f57f af07 	bpl.w	8005f0e <_scanf_float+0x66>
 8006100:	f1b9 0f00 	cmp.w	r9, #0
 8006104:	f000 80d9 	beq.w	80062ba <_scanf_float+0x412>
 8006108:	0591      	lsls	r1, r2, #22
 800610a:	bf58      	it	pl
 800610c:	9902      	ldrpl	r1, [sp, #8]
 800610e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006112:	bf58      	it	pl
 8006114:	eba9 0101 	subpl.w	r1, r9, r1
 8006118:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800611c:	f04f 0900 	mov.w	r9, #0
 8006120:	bf58      	it	pl
 8006122:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	e789      	b.n	800603e <_scanf_float+0x196>
 800612a:	f04f 0a03 	mov.w	sl, #3
 800612e:	e786      	b.n	800603e <_scanf_float+0x196>
 8006130:	4639      	mov	r1, r7
 8006132:	4640      	mov	r0, r8
 8006134:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006138:	4798      	blx	r3
 800613a:	2800      	cmp	r0, #0
 800613c:	f43f aeda 	beq.w	8005ef4 <_scanf_float+0x4c>
 8006140:	e6e5      	b.n	8005f0e <_scanf_float+0x66>
 8006142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006146:	463a      	mov	r2, r7
 8006148:	4640      	mov	r0, r8
 800614a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800614e:	4798      	blx	r3
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	3b01      	subs	r3, #1
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	e6e7      	b.n	8005f28 <_scanf_float+0x80>
 8006158:	1e6b      	subs	r3, r5, #1
 800615a:	2b06      	cmp	r3, #6
 800615c:	d824      	bhi.n	80061a8 <_scanf_float+0x300>
 800615e:	2d02      	cmp	r5, #2
 8006160:	d836      	bhi.n	80061d0 <_scanf_float+0x328>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	429e      	cmp	r6, r3
 8006166:	f67f aee3 	bls.w	8005f30 <_scanf_float+0x88>
 800616a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800616e:	463a      	mov	r2, r7
 8006170:	4640      	mov	r0, r8
 8006172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006176:	4798      	blx	r3
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	3b01      	subs	r3, #1
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	e7f0      	b.n	8006162 <_scanf_float+0x2ba>
 8006180:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006184:	463a      	mov	r2, r7
 8006186:	4640      	mov	r0, r8
 8006188:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800618c:	4798      	blx	r3
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	3b01      	subs	r3, #1
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006198:	fa5f fa8a 	uxtb.w	sl, sl
 800619c:	f1ba 0f02 	cmp.w	sl, #2
 80061a0:	d1ee      	bne.n	8006180 <_scanf_float+0x2d8>
 80061a2:	3d03      	subs	r5, #3
 80061a4:	b2ed      	uxtb	r5, r5
 80061a6:	1b76      	subs	r6, r6, r5
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	05da      	lsls	r2, r3, #23
 80061ac:	d530      	bpl.n	8006210 <_scanf_float+0x368>
 80061ae:	055b      	lsls	r3, r3, #21
 80061b0:	d511      	bpl.n	80061d6 <_scanf_float+0x32e>
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	429e      	cmp	r6, r3
 80061b6:	f67f aebb 	bls.w	8005f30 <_scanf_float+0x88>
 80061ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061be:	463a      	mov	r2, r7
 80061c0:	4640      	mov	r0, r8
 80061c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061c6:	4798      	blx	r3
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	e7f0      	b.n	80061b2 <_scanf_float+0x30a>
 80061d0:	46aa      	mov	sl, r5
 80061d2:	46b3      	mov	fp, r6
 80061d4:	e7de      	b.n	8006194 <_scanf_float+0x2ec>
 80061d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	2965      	cmp	r1, #101	@ 0x65
 80061de:	f103 33ff 	add.w	r3, r3, #4294967295
 80061e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	d00c      	beq.n	8006204 <_scanf_float+0x35c>
 80061ea:	2945      	cmp	r1, #69	@ 0x45
 80061ec:	d00a      	beq.n	8006204 <_scanf_float+0x35c>
 80061ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061f2:	463a      	mov	r2, r7
 80061f4:	4640      	mov	r0, r8
 80061f6:	4798      	blx	r3
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061fe:	3b01      	subs	r3, #1
 8006200:	1eb5      	subs	r5, r6, #2
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	463a      	mov	r2, r7
 8006206:	4640      	mov	r0, r8
 8006208:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800620c:	4798      	blx	r3
 800620e:	462e      	mov	r6, r5
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	f012 0210 	ands.w	r2, r2, #16
 8006216:	d001      	beq.n	800621c <_scanf_float+0x374>
 8006218:	2000      	movs	r0, #0
 800621a:	e68a      	b.n	8005f32 <_scanf_float+0x8a>
 800621c:	7032      	strb	r2, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006228:	d11c      	bne.n	8006264 <_scanf_float+0x3bc>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	454b      	cmp	r3, r9
 800622e:	eba3 0209 	sub.w	r2, r3, r9
 8006232:	d123      	bne.n	800627c <_scanf_float+0x3d4>
 8006234:	2200      	movs	r2, #0
 8006236:	4640      	mov	r0, r8
 8006238:	9901      	ldr	r1, [sp, #4]
 800623a:	f7ff f94d 	bl	80054d8 <_strtod_r>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	6825      	ldr	r5, [r4, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f015 0f02 	tst.w	r5, #2
 8006248:	4606      	mov	r6, r0
 800624a:	460f      	mov	r7, r1
 800624c:	f103 0204 	add.w	r2, r3, #4
 8006250:	d01f      	beq.n	8006292 <_scanf_float+0x3ea>
 8006252:	9903      	ldr	r1, [sp, #12]
 8006254:	600a      	str	r2, [r1, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	e9c3 6700 	strd	r6, r7, [r3]
 800625c:	68e3      	ldr	r3, [r4, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60e3      	str	r3, [r4, #12]
 8006262:	e7d9      	b.n	8006218 <_scanf_float+0x370>
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0e4      	beq.n	8006234 <_scanf_float+0x38c>
 800626a:	9905      	ldr	r1, [sp, #20]
 800626c:	230a      	movs	r3, #10
 800626e:	4640      	mov	r0, r8
 8006270:	3101      	adds	r1, #1
 8006272:	f7ff f9b1 	bl	80055d8 <_strtol_r>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	9e05      	ldr	r6, [sp, #20]
 800627a:	1ac2      	subs	r2, r0, r3
 800627c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006280:	429e      	cmp	r6, r3
 8006282:	bf28      	it	cs
 8006284:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006288:	4630      	mov	r0, r6
 800628a:	490d      	ldr	r1, [pc, #52]	@ (80062c0 <_scanf_float+0x418>)
 800628c:	f000 f8de 	bl	800644c <siprintf>
 8006290:	e7d0      	b.n	8006234 <_scanf_float+0x38c>
 8006292:	076d      	lsls	r5, r5, #29
 8006294:	d4dd      	bmi.n	8006252 <_scanf_float+0x3aa>
 8006296:	9d03      	ldr	r5, [sp, #12]
 8006298:	602a      	str	r2, [r5, #0]
 800629a:	681d      	ldr	r5, [r3, #0]
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	f7fa fbb4 	bl	8000a0c <__aeabi_dcmpun>
 80062a4:	b120      	cbz	r0, 80062b0 <_scanf_float+0x408>
 80062a6:	4807      	ldr	r0, [pc, #28]	@ (80062c4 <_scanf_float+0x41c>)
 80062a8:	f000 f9f4 	bl	8006694 <nanf>
 80062ac:	6028      	str	r0, [r5, #0]
 80062ae:	e7d5      	b.n	800625c <_scanf_float+0x3b4>
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa fc08 	bl	8000ac8 <__aeabi_d2f>
 80062b8:	e7f8      	b.n	80062ac <_scanf_float+0x404>
 80062ba:	f04f 0900 	mov.w	r9, #0
 80062be:	e62d      	b.n	8005f1c <_scanf_float+0x74>
 80062c0:	080091a5 	.word	0x080091a5
 80062c4:	08009444 	.word	0x08009444

080062c8 <std>:
 80062c8:	2300      	movs	r3, #0
 80062ca:	b510      	push	{r4, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	e9c0 3300 	strd	r3, r3, [r0]
 80062d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062d6:	6083      	str	r3, [r0, #8]
 80062d8:	8181      	strh	r1, [r0, #12]
 80062da:	6643      	str	r3, [r0, #100]	@ 0x64
 80062dc:	81c2      	strh	r2, [r0, #14]
 80062de:	6183      	str	r3, [r0, #24]
 80062e0:	4619      	mov	r1, r3
 80062e2:	2208      	movs	r2, #8
 80062e4:	305c      	adds	r0, #92	@ 0x5c
 80062e6:	f000 f914 	bl	8006512 <memset>
 80062ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <std+0x58>)
 80062ec:	6224      	str	r4, [r4, #32]
 80062ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80062f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <std+0x5c>)
 80062f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <std+0x60>)
 80062f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <std+0x64>)
 80062fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80062fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <std+0x68>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d006      	beq.n	8006310 <std+0x48>
 8006302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006306:	4294      	cmp	r4, r2
 8006308:	d002      	beq.n	8006310 <std+0x48>
 800630a:	33d0      	adds	r3, #208	@ 0xd0
 800630c:	429c      	cmp	r4, r3
 800630e:	d105      	bne.n	800631c <std+0x54>
 8006310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006318:	f000 b996 	b.w	8006648 <__retarget_lock_init_recursive>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	bf00      	nop
 8006320:	0800648d 	.word	0x0800648d
 8006324:	080064af 	.word	0x080064af
 8006328:	080064e7 	.word	0x080064e7
 800632c:	0800650b 	.word	0x0800650b
 8006330:	20000354 	.word	0x20000354

08006334 <stdio_exit_handler>:
 8006334:	4a02      	ldr	r2, [pc, #8]	@ (8006340 <stdio_exit_handler+0xc>)
 8006336:	4903      	ldr	r1, [pc, #12]	@ (8006344 <stdio_exit_handler+0x10>)
 8006338:	4803      	ldr	r0, [pc, #12]	@ (8006348 <stdio_exit_handler+0x14>)
 800633a:	f000 b869 	b.w	8006410 <_fwalk_sglue>
 800633e:	bf00      	nop
 8006340:	2000000c 	.word	0x2000000c
 8006344:	080088e9 	.word	0x080088e9
 8006348:	20000188 	.word	0x20000188

0800634c <cleanup_stdio>:
 800634c:	6841      	ldr	r1, [r0, #4]
 800634e:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <cleanup_stdio+0x34>)
 8006350:	b510      	push	{r4, lr}
 8006352:	4299      	cmp	r1, r3
 8006354:	4604      	mov	r4, r0
 8006356:	d001      	beq.n	800635c <cleanup_stdio+0x10>
 8006358:	f002 fac6 	bl	80088e8 <_fflush_r>
 800635c:	68a1      	ldr	r1, [r4, #8]
 800635e:	4b09      	ldr	r3, [pc, #36]	@ (8006384 <cleanup_stdio+0x38>)
 8006360:	4299      	cmp	r1, r3
 8006362:	d002      	beq.n	800636a <cleanup_stdio+0x1e>
 8006364:	4620      	mov	r0, r4
 8006366:	f002 fabf 	bl	80088e8 <_fflush_r>
 800636a:	68e1      	ldr	r1, [r4, #12]
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <cleanup_stdio+0x3c>)
 800636e:	4299      	cmp	r1, r3
 8006370:	d004      	beq.n	800637c <cleanup_stdio+0x30>
 8006372:	4620      	mov	r0, r4
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006378:	f002 bab6 	b.w	80088e8 <_fflush_r>
 800637c:	bd10      	pop	{r4, pc}
 800637e:	bf00      	nop
 8006380:	20000354 	.word	0x20000354
 8006384:	200003bc 	.word	0x200003bc
 8006388:	20000424 	.word	0x20000424

0800638c <global_stdio_init.part.0>:
 800638c:	b510      	push	{r4, lr}
 800638e:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <global_stdio_init.part.0+0x30>)
 8006390:	4c0b      	ldr	r4, [pc, #44]	@ (80063c0 <global_stdio_init.part.0+0x34>)
 8006392:	4a0c      	ldr	r2, [pc, #48]	@ (80063c4 <global_stdio_init.part.0+0x38>)
 8006394:	4620      	mov	r0, r4
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	2104      	movs	r1, #4
 800639a:	2200      	movs	r2, #0
 800639c:	f7ff ff94 	bl	80062c8 <std>
 80063a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063a4:	2201      	movs	r2, #1
 80063a6:	2109      	movs	r1, #9
 80063a8:	f7ff ff8e 	bl	80062c8 <std>
 80063ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063b0:	2202      	movs	r2, #2
 80063b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b6:	2112      	movs	r1, #18
 80063b8:	f7ff bf86 	b.w	80062c8 <std>
 80063bc:	2000048c 	.word	0x2000048c
 80063c0:	20000354 	.word	0x20000354
 80063c4:	08006335 	.word	0x08006335

080063c8 <__sfp_lock_acquire>:
 80063c8:	4801      	ldr	r0, [pc, #4]	@ (80063d0 <__sfp_lock_acquire+0x8>)
 80063ca:	f000 b93e 	b.w	800664a <__retarget_lock_acquire_recursive>
 80063ce:	bf00      	nop
 80063d0:	20000495 	.word	0x20000495

080063d4 <__sfp_lock_release>:
 80063d4:	4801      	ldr	r0, [pc, #4]	@ (80063dc <__sfp_lock_release+0x8>)
 80063d6:	f000 b939 	b.w	800664c <__retarget_lock_release_recursive>
 80063da:	bf00      	nop
 80063dc:	20000495 	.word	0x20000495

080063e0 <__sinit>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	f7ff fff0 	bl	80063c8 <__sfp_lock_acquire>
 80063e8:	6a23      	ldr	r3, [r4, #32]
 80063ea:	b11b      	cbz	r3, 80063f4 <__sinit+0x14>
 80063ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f0:	f7ff bff0 	b.w	80063d4 <__sfp_lock_release>
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <__sinit+0x28>)
 80063f6:	6223      	str	r3, [r4, #32]
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__sinit+0x2c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f5      	bne.n	80063ec <__sinit+0xc>
 8006400:	f7ff ffc4 	bl	800638c <global_stdio_init.part.0>
 8006404:	e7f2      	b.n	80063ec <__sinit+0xc>
 8006406:	bf00      	nop
 8006408:	0800634d 	.word	0x0800634d
 800640c:	2000048c 	.word	0x2000048c

08006410 <_fwalk_sglue>:
 8006410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006414:	4607      	mov	r7, r0
 8006416:	4688      	mov	r8, r1
 8006418:	4614      	mov	r4, r2
 800641a:	2600      	movs	r6, #0
 800641c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006420:	f1b9 0901 	subs.w	r9, r9, #1
 8006424:	d505      	bpl.n	8006432 <_fwalk_sglue+0x22>
 8006426:	6824      	ldr	r4, [r4, #0]
 8006428:	2c00      	cmp	r4, #0
 800642a:	d1f7      	bne.n	800641c <_fwalk_sglue+0xc>
 800642c:	4630      	mov	r0, r6
 800642e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d907      	bls.n	8006448 <_fwalk_sglue+0x38>
 8006438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800643c:	3301      	adds	r3, #1
 800643e:	d003      	beq.n	8006448 <_fwalk_sglue+0x38>
 8006440:	4629      	mov	r1, r5
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	4306      	orrs	r6, r0
 8006448:	3568      	adds	r5, #104	@ 0x68
 800644a:	e7e9      	b.n	8006420 <_fwalk_sglue+0x10>

0800644c <siprintf>:
 800644c:	b40e      	push	{r1, r2, r3}
 800644e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006452:	b500      	push	{lr}
 8006454:	b09c      	sub	sp, #112	@ 0x70
 8006456:	ab1d      	add	r3, sp, #116	@ 0x74
 8006458:	9002      	str	r0, [sp, #8]
 800645a:	9006      	str	r0, [sp, #24]
 800645c:	9107      	str	r1, [sp, #28]
 800645e:	9104      	str	r1, [sp, #16]
 8006460:	4808      	ldr	r0, [pc, #32]	@ (8006484 <siprintf+0x38>)
 8006462:	4909      	ldr	r1, [pc, #36]	@ (8006488 <siprintf+0x3c>)
 8006464:	f853 2b04 	ldr.w	r2, [r3], #4
 8006468:	9105      	str	r1, [sp, #20]
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	a902      	add	r1, sp, #8
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	f002 f8be 	bl	80085f0 <_svfiprintf_r>
 8006474:	2200      	movs	r2, #0
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	b01c      	add	sp, #112	@ 0x70
 800647c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006480:	b003      	add	sp, #12
 8006482:	4770      	bx	lr
 8006484:	20000184 	.word	0x20000184
 8006488:	ffff0208 	.word	0xffff0208

0800648c <__sread>:
 800648c:	b510      	push	{r4, lr}
 800648e:	460c      	mov	r4, r1
 8006490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006494:	f000 f88a 	bl	80065ac <_read_r>
 8006498:	2800      	cmp	r0, #0
 800649a:	bfab      	itete	ge
 800649c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800649e:	89a3      	ldrhlt	r3, [r4, #12]
 80064a0:	181b      	addge	r3, r3, r0
 80064a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064a6:	bfac      	ite	ge
 80064a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064aa:	81a3      	strhlt	r3, [r4, #12]
 80064ac:	bd10      	pop	{r4, pc}

080064ae <__swrite>:
 80064ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	461f      	mov	r7, r3
 80064b4:	898b      	ldrh	r3, [r1, #12]
 80064b6:	4605      	mov	r5, r0
 80064b8:	05db      	lsls	r3, r3, #23
 80064ba:	460c      	mov	r4, r1
 80064bc:	4616      	mov	r6, r2
 80064be:	d505      	bpl.n	80064cc <__swrite+0x1e>
 80064c0:	2302      	movs	r3, #2
 80064c2:	2200      	movs	r2, #0
 80064c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c8:	f000 f85e 	bl	8006588 <_lseek_r>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	4632      	mov	r2, r6
 80064d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	4628      	mov	r0, r5
 80064d8:	463b      	mov	r3, r7
 80064da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064e2:	f000 b875 	b.w	80065d0 <_write_r>

080064e6 <__sseek>:
 80064e6:	b510      	push	{r4, lr}
 80064e8:	460c      	mov	r4, r1
 80064ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ee:	f000 f84b 	bl	8006588 <_lseek_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	bf15      	itete	ne
 80064f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006502:	81a3      	strheq	r3, [r4, #12]
 8006504:	bf18      	it	ne
 8006506:	81a3      	strhne	r3, [r4, #12]
 8006508:	bd10      	pop	{r4, pc}

0800650a <__sclose>:
 800650a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650e:	f000 b82b 	b.w	8006568 <_close_r>

08006512 <memset>:
 8006512:	4603      	mov	r3, r0
 8006514:	4402      	add	r2, r0
 8006516:	4293      	cmp	r3, r2
 8006518:	d100      	bne.n	800651c <memset+0xa>
 800651a:	4770      	bx	lr
 800651c:	f803 1b01 	strb.w	r1, [r3], #1
 8006520:	e7f9      	b.n	8006516 <memset+0x4>

08006522 <strchr>:
 8006522:	4603      	mov	r3, r0
 8006524:	b2c9      	uxtb	r1, r1
 8006526:	4618      	mov	r0, r3
 8006528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800652c:	b112      	cbz	r2, 8006534 <strchr+0x12>
 800652e:	428a      	cmp	r2, r1
 8006530:	d1f9      	bne.n	8006526 <strchr+0x4>
 8006532:	4770      	bx	lr
 8006534:	2900      	cmp	r1, #0
 8006536:	bf18      	it	ne
 8006538:	2000      	movne	r0, #0
 800653a:	4770      	bx	lr

0800653c <strncmp>:
 800653c:	b510      	push	{r4, lr}
 800653e:	b16a      	cbz	r2, 800655c <strncmp+0x20>
 8006540:	3901      	subs	r1, #1
 8006542:	1884      	adds	r4, r0, r2
 8006544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006548:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800654c:	429a      	cmp	r2, r3
 800654e:	d103      	bne.n	8006558 <strncmp+0x1c>
 8006550:	42a0      	cmp	r0, r4
 8006552:	d001      	beq.n	8006558 <strncmp+0x1c>
 8006554:	2a00      	cmp	r2, #0
 8006556:	d1f5      	bne.n	8006544 <strncmp+0x8>
 8006558:	1ad0      	subs	r0, r2, r3
 800655a:	bd10      	pop	{r4, pc}
 800655c:	4610      	mov	r0, r2
 800655e:	e7fc      	b.n	800655a <strncmp+0x1e>

08006560 <_localeconv_r>:
 8006560:	4800      	ldr	r0, [pc, #0]	@ (8006564 <_localeconv_r+0x4>)
 8006562:	4770      	bx	lr
 8006564:	20000108 	.word	0x20000108

08006568 <_close_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	2300      	movs	r3, #0
 800656c:	4d05      	ldr	r5, [pc, #20]	@ (8006584 <_close_r+0x1c>)
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fb f875 	bl	8001662 <_close>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_close_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_close_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000490 	.word	0x20000490

08006588 <_lseek_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	2200      	movs	r2, #0
 8006592:	4d05      	ldr	r5, [pc, #20]	@ (80065a8 <_lseek_r+0x20>)
 8006594:	602a      	str	r2, [r5, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f7fb f887 	bl	80016aa <_lseek>
 800659c:	1c43      	adds	r3, r0, #1
 800659e:	d102      	bne.n	80065a6 <_lseek_r+0x1e>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	b103      	cbz	r3, 80065a6 <_lseek_r+0x1e>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	20000490 	.word	0x20000490

080065ac <_read_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	2200      	movs	r2, #0
 80065b6:	4d05      	ldr	r5, [pc, #20]	@ (80065cc <_read_r+0x20>)
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fb f818 	bl	80015f0 <_read>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_read_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_read_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	20000490 	.word	0x20000490

080065d0 <_write_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	2200      	movs	r2, #0
 80065da:	4d05      	ldr	r5, [pc, #20]	@ (80065f0 <_write_r+0x20>)
 80065dc:	602a      	str	r2, [r5, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fb f823 	bl	800162a <_write>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_write_r+0x1e>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_write_r+0x1e>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000490 	.word	0x20000490

080065f4 <__errno>:
 80065f4:	4b01      	ldr	r3, [pc, #4]	@ (80065fc <__errno+0x8>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	20000184 	.word	0x20000184

08006600 <__libc_init_array>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	2600      	movs	r6, #0
 8006604:	4d0c      	ldr	r5, [pc, #48]	@ (8006638 <__libc_init_array+0x38>)
 8006606:	4c0d      	ldr	r4, [pc, #52]	@ (800663c <__libc_init_array+0x3c>)
 8006608:	1b64      	subs	r4, r4, r5
 800660a:	10a4      	asrs	r4, r4, #2
 800660c:	42a6      	cmp	r6, r4
 800660e:	d109      	bne.n	8006624 <__libc_init_array+0x24>
 8006610:	f002 fcd8 	bl	8008fc4 <_init>
 8006614:	2600      	movs	r6, #0
 8006616:	4d0a      	ldr	r5, [pc, #40]	@ (8006640 <__libc_init_array+0x40>)
 8006618:	4c0a      	ldr	r4, [pc, #40]	@ (8006644 <__libc_init_array+0x44>)
 800661a:	1b64      	subs	r4, r4, r5
 800661c:	10a4      	asrs	r4, r4, #2
 800661e:	42a6      	cmp	r6, r4
 8006620:	d105      	bne.n	800662e <__libc_init_array+0x2e>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f855 3b04 	ldr.w	r3, [r5], #4
 8006628:	4798      	blx	r3
 800662a:	3601      	adds	r6, #1
 800662c:	e7ee      	b.n	800660c <__libc_init_array+0xc>
 800662e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006632:	4798      	blx	r3
 8006634:	3601      	adds	r6, #1
 8006636:	e7f2      	b.n	800661e <__libc_init_array+0x1e>
 8006638:	08009450 	.word	0x08009450
 800663c:	08009450 	.word	0x08009450
 8006640:	08009450 	.word	0x08009450
 8006644:	08009454 	.word	0x08009454

08006648 <__retarget_lock_init_recursive>:
 8006648:	4770      	bx	lr

0800664a <__retarget_lock_acquire_recursive>:
 800664a:	4770      	bx	lr

0800664c <__retarget_lock_release_recursive>:
 800664c:	4770      	bx	lr

0800664e <memchr>:
 800664e:	4603      	mov	r3, r0
 8006650:	b510      	push	{r4, lr}
 8006652:	b2c9      	uxtb	r1, r1
 8006654:	4402      	add	r2, r0
 8006656:	4293      	cmp	r3, r2
 8006658:	4618      	mov	r0, r3
 800665a:	d101      	bne.n	8006660 <memchr+0x12>
 800665c:	2000      	movs	r0, #0
 800665e:	e003      	b.n	8006668 <memchr+0x1a>
 8006660:	7804      	ldrb	r4, [r0, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	428c      	cmp	r4, r1
 8006666:	d1f6      	bne.n	8006656 <memchr+0x8>
 8006668:	bd10      	pop	{r4, pc}

0800666a <memcpy>:
 800666a:	440a      	add	r2, r1
 800666c:	4291      	cmp	r1, r2
 800666e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006672:	d100      	bne.n	8006676 <memcpy+0xc>
 8006674:	4770      	bx	lr
 8006676:	b510      	push	{r4, lr}
 8006678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800667c:	4291      	cmp	r1, r2
 800667e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006682:	d1f9      	bne.n	8006678 <memcpy+0xe>
 8006684:	bd10      	pop	{r4, pc}
	...

08006688 <nan>:
 8006688:	2000      	movs	r0, #0
 800668a:	4901      	ldr	r1, [pc, #4]	@ (8006690 <nan+0x8>)
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	7ff80000 	.word	0x7ff80000

08006694 <nanf>:
 8006694:	4800      	ldr	r0, [pc, #0]	@ (8006698 <nanf+0x4>)
 8006696:	4770      	bx	lr
 8006698:	7fc00000 	.word	0x7fc00000

0800669c <quorem>:
 800669c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	6903      	ldr	r3, [r0, #16]
 80066a2:	690c      	ldr	r4, [r1, #16]
 80066a4:	4607      	mov	r7, r0
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	db7e      	blt.n	80067a8 <quorem+0x10c>
 80066aa:	3c01      	subs	r4, #1
 80066ac:	00a3      	lsls	r3, r4, #2
 80066ae:	f100 0514 	add.w	r5, r0, #20
 80066b2:	f101 0814 	add.w	r8, r1, #20
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066c6:	3301      	adds	r3, #1
 80066c8:	429a      	cmp	r2, r3
 80066ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80066ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066d2:	d32e      	bcc.n	8006732 <quorem+0x96>
 80066d4:	f04f 0a00 	mov.w	sl, #0
 80066d8:	46c4      	mov	ip, r8
 80066da:	46ae      	mov	lr, r5
 80066dc:	46d3      	mov	fp, sl
 80066de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066e2:	b298      	uxth	r0, r3
 80066e4:	fb06 a000 	mla	r0, r6, r0, sl
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	0c02      	lsrs	r2, r0, #16
 80066ec:	fb06 2303 	mla	r3, r6, r3, r2
 80066f0:	f8de 2000 	ldr.w	r2, [lr]
 80066f4:	b280      	uxth	r0, r0
 80066f6:	b292      	uxth	r2, r2
 80066f8:	1a12      	subs	r2, r2, r0
 80066fa:	445a      	add	r2, fp
 80066fc:	f8de 0000 	ldr.w	r0, [lr]
 8006700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006704:	b29b      	uxth	r3, r3
 8006706:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800670a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800670e:	b292      	uxth	r2, r2
 8006710:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006714:	45e1      	cmp	r9, ip
 8006716:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800671a:	f84e 2b04 	str.w	r2, [lr], #4
 800671e:	d2de      	bcs.n	80066de <quorem+0x42>
 8006720:	9b00      	ldr	r3, [sp, #0]
 8006722:	58eb      	ldr	r3, [r5, r3]
 8006724:	b92b      	cbnz	r3, 8006732 <quorem+0x96>
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	3b04      	subs	r3, #4
 800672a:	429d      	cmp	r5, r3
 800672c:	461a      	mov	r2, r3
 800672e:	d32f      	bcc.n	8006790 <quorem+0xf4>
 8006730:	613c      	str	r4, [r7, #16]
 8006732:	4638      	mov	r0, r7
 8006734:	f001 fd10 	bl	8008158 <__mcmp>
 8006738:	2800      	cmp	r0, #0
 800673a:	db25      	blt.n	8006788 <quorem+0xec>
 800673c:	4629      	mov	r1, r5
 800673e:	2000      	movs	r0, #0
 8006740:	f858 2b04 	ldr.w	r2, [r8], #4
 8006744:	f8d1 c000 	ldr.w	ip, [r1]
 8006748:	fa1f fe82 	uxth.w	lr, r2
 800674c:	fa1f f38c 	uxth.w	r3, ip
 8006750:	eba3 030e 	sub.w	r3, r3, lr
 8006754:	4403      	add	r3, r0
 8006756:	0c12      	lsrs	r2, r2, #16
 8006758:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800675c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006766:	45c1      	cmp	r9, r8
 8006768:	ea4f 4022 	mov.w	r0, r2, asr #16
 800676c:	f841 3b04 	str.w	r3, [r1], #4
 8006770:	d2e6      	bcs.n	8006740 <quorem+0xa4>
 8006772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800677a:	b922      	cbnz	r2, 8006786 <quorem+0xea>
 800677c:	3b04      	subs	r3, #4
 800677e:	429d      	cmp	r5, r3
 8006780:	461a      	mov	r2, r3
 8006782:	d30b      	bcc.n	800679c <quorem+0x100>
 8006784:	613c      	str	r4, [r7, #16]
 8006786:	3601      	adds	r6, #1
 8006788:	4630      	mov	r0, r6
 800678a:	b003      	add	sp, #12
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	3b04      	subs	r3, #4
 8006794:	2a00      	cmp	r2, #0
 8006796:	d1cb      	bne.n	8006730 <quorem+0x94>
 8006798:	3c01      	subs	r4, #1
 800679a:	e7c6      	b.n	800672a <quorem+0x8e>
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	3b04      	subs	r3, #4
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d1ef      	bne.n	8006784 <quorem+0xe8>
 80067a4:	3c01      	subs	r4, #1
 80067a6:	e7ea      	b.n	800677e <quorem+0xe2>
 80067a8:	2000      	movs	r0, #0
 80067aa:	e7ee      	b.n	800678a <quorem+0xee>
 80067ac:	0000      	movs	r0, r0
	...

080067b0 <_dtoa_r>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	69c7      	ldr	r7, [r0, #28]
 80067ba:	b097      	sub	sp, #92	@ 0x5c
 80067bc:	4683      	mov	fp, r0
 80067be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80067c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80067c4:	b97f      	cbnz	r7, 80067e6 <_dtoa_r+0x36>
 80067c6:	2010      	movs	r0, #16
 80067c8:	f001 f93c 	bl	8007a44 <malloc>
 80067cc:	4602      	mov	r2, r0
 80067ce:	f8cb 001c 	str.w	r0, [fp, #28]
 80067d2:	b920      	cbnz	r0, 80067de <_dtoa_r+0x2e>
 80067d4:	21ef      	movs	r1, #239	@ 0xef
 80067d6:	4ba8      	ldr	r3, [pc, #672]	@ (8006a78 <_dtoa_r+0x2c8>)
 80067d8:	48a8      	ldr	r0, [pc, #672]	@ (8006a7c <_dtoa_r+0x2cc>)
 80067da:	f002 f8d7 	bl	800898c <__assert_func>
 80067de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067e2:	6007      	str	r7, [r0, #0]
 80067e4:	60c7      	str	r7, [r0, #12]
 80067e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067ea:	6819      	ldr	r1, [r3, #0]
 80067ec:	b159      	cbz	r1, 8006806 <_dtoa_r+0x56>
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	2301      	movs	r3, #1
 80067f2:	4093      	lsls	r3, r2
 80067f4:	604a      	str	r2, [r1, #4]
 80067f6:	608b      	str	r3, [r1, #8]
 80067f8:	4658      	mov	r0, fp
 80067fa:	f001 fa2b 	bl	8007c54 <_Bfree>
 80067fe:	2200      	movs	r2, #0
 8006800:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	1e2b      	subs	r3, r5, #0
 8006808:	bfaf      	iteee	ge
 800680a:	2300      	movge	r3, #0
 800680c:	2201      	movlt	r2, #1
 800680e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006812:	9303      	strlt	r3, [sp, #12]
 8006814:	bfa8      	it	ge
 8006816:	6033      	strge	r3, [r6, #0]
 8006818:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800681c:	4b98      	ldr	r3, [pc, #608]	@ (8006a80 <_dtoa_r+0x2d0>)
 800681e:	bfb8      	it	lt
 8006820:	6032      	strlt	r2, [r6, #0]
 8006822:	ea33 0308 	bics.w	r3, r3, r8
 8006826:	d112      	bne.n	800684e <_dtoa_r+0x9e>
 8006828:	f242 730f 	movw	r3, #9999	@ 0x270f
 800682c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006834:	4323      	orrs	r3, r4
 8006836:	f000 8550 	beq.w	80072da <_dtoa_r+0xb2a>
 800683a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800683c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006a84 <_dtoa_r+0x2d4>
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8552 	beq.w	80072ea <_dtoa_r+0xb3a>
 8006846:	f10a 0303 	add.w	r3, sl, #3
 800684a:	f000 bd4c 	b.w	80072e6 <_dtoa_r+0xb36>
 800684e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006852:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685a:	2200      	movs	r2, #0
 800685c:	2300      	movs	r3, #0
 800685e:	f7fa f8a3 	bl	80009a8 <__aeabi_dcmpeq>
 8006862:	4607      	mov	r7, r0
 8006864:	b158      	cbz	r0, 800687e <_dtoa_r+0xce>
 8006866:	2301      	movs	r3, #1
 8006868:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800686e:	b113      	cbz	r3, 8006876 <_dtoa_r+0xc6>
 8006870:	4b85      	ldr	r3, [pc, #532]	@ (8006a88 <_dtoa_r+0x2d8>)
 8006872:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006a8c <_dtoa_r+0x2dc>
 800687a:	f000 bd36 	b.w	80072ea <_dtoa_r+0xb3a>
 800687e:	ab14      	add	r3, sp, #80	@ 0x50
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	ab15      	add	r3, sp, #84	@ 0x54
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4658      	mov	r0, fp
 8006888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800688c:	f001 fd7c 	bl	8008388 <__d2b>
 8006890:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006894:	4681      	mov	r9, r0
 8006896:	2e00      	cmp	r6, #0
 8006898:	d077      	beq.n	800698a <_dtoa_r+0x1da>
 800689a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800689e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068b0:	9712      	str	r7, [sp, #72]	@ 0x48
 80068b2:	4619      	mov	r1, r3
 80068b4:	2200      	movs	r2, #0
 80068b6:	4b76      	ldr	r3, [pc, #472]	@ (8006a90 <_dtoa_r+0x2e0>)
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	a368      	add	r3, pc, #416	@ (adr r3, 8006a60 <_dtoa_r+0x2b0>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fe09 	bl	80004d8 <__aeabi_dmul>
 80068c6:	a368      	add	r3, pc, #416	@ (adr r3, 8006a68 <_dtoa_r+0x2b8>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fc4e 	bl	800016c <__adddf3>
 80068d0:	4604      	mov	r4, r0
 80068d2:	4630      	mov	r0, r6
 80068d4:	460d      	mov	r5, r1
 80068d6:	f7f9 fd95 	bl	8000404 <__aeabi_i2d>
 80068da:	a365      	add	r3, pc, #404	@ (adr r3, 8006a70 <_dtoa_r+0x2c0>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fdfa 	bl	80004d8 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4620      	mov	r0, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7f9 fc3e 	bl	800016c <__adddf3>
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	f7fa f8a0 	bl	8000a38 <__aeabi_d2iz>
 80068f8:	2200      	movs	r2, #0
 80068fa:	4607      	mov	r7, r0
 80068fc:	2300      	movs	r3, #0
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7fa f85b 	bl	80009bc <__aeabi_dcmplt>
 8006906:	b140      	cbz	r0, 800691a <_dtoa_r+0x16a>
 8006908:	4638      	mov	r0, r7
 800690a:	f7f9 fd7b 	bl	8000404 <__aeabi_i2d>
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	f7fa f849 	bl	80009a8 <__aeabi_dcmpeq>
 8006916:	b900      	cbnz	r0, 800691a <_dtoa_r+0x16a>
 8006918:	3f01      	subs	r7, #1
 800691a:	2f16      	cmp	r7, #22
 800691c:	d853      	bhi.n	80069c6 <_dtoa_r+0x216>
 800691e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006922:	4b5c      	ldr	r3, [pc, #368]	@ (8006a94 <_dtoa_r+0x2e4>)
 8006924:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f7fa f846 	bl	80009bc <__aeabi_dcmplt>
 8006930:	2800      	cmp	r0, #0
 8006932:	d04a      	beq.n	80069ca <_dtoa_r+0x21a>
 8006934:	2300      	movs	r3, #0
 8006936:	3f01      	subs	r7, #1
 8006938:	930f      	str	r3, [sp, #60]	@ 0x3c
 800693a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	1e5a      	subs	r2, r3, #1
 8006940:	bf46      	itte	mi
 8006942:	f1c3 0801 	rsbmi	r8, r3, #1
 8006946:	2300      	movmi	r3, #0
 8006948:	f04f 0800 	movpl.w	r8, #0
 800694c:	9209      	str	r2, [sp, #36]	@ 0x24
 800694e:	bf48      	it	mi
 8006950:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006952:	2f00      	cmp	r7, #0
 8006954:	db3b      	blt.n	80069ce <_dtoa_r+0x21e>
 8006956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006958:	970e      	str	r7, [sp, #56]	@ 0x38
 800695a:	443b      	add	r3, r7
 800695c:	9309      	str	r3, [sp, #36]	@ 0x24
 800695e:	2300      	movs	r3, #0
 8006960:	930a      	str	r3, [sp, #40]	@ 0x28
 8006962:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006964:	2b09      	cmp	r3, #9
 8006966:	d866      	bhi.n	8006a36 <_dtoa_r+0x286>
 8006968:	2b05      	cmp	r3, #5
 800696a:	bfc4      	itt	gt
 800696c:	3b04      	subgt	r3, #4
 800696e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006970:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006972:	bfc8      	it	gt
 8006974:	2400      	movgt	r4, #0
 8006976:	f1a3 0302 	sub.w	r3, r3, #2
 800697a:	bfd8      	it	le
 800697c:	2401      	movle	r4, #1
 800697e:	2b03      	cmp	r3, #3
 8006980:	d864      	bhi.n	8006a4c <_dtoa_r+0x29c>
 8006982:	e8df f003 	tbb	[pc, r3]
 8006986:	382b      	.short	0x382b
 8006988:	5636      	.short	0x5636
 800698a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800698e:	441e      	add	r6, r3
 8006990:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006994:	2b20      	cmp	r3, #32
 8006996:	bfc1      	itttt	gt
 8006998:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800699c:	fa08 f803 	lslgt.w	r8, r8, r3
 80069a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069a8:	bfd6      	itet	le
 80069aa:	f1c3 0320 	rsble	r3, r3, #32
 80069ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80069b2:	fa04 f003 	lslle.w	r0, r4, r3
 80069b6:	f7f9 fd15 	bl	80003e4 <__aeabi_ui2d>
 80069ba:	2201      	movs	r2, #1
 80069bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069c0:	3e01      	subs	r6, #1
 80069c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80069c4:	e775      	b.n	80068b2 <_dtoa_r+0x102>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7b6      	b.n	8006938 <_dtoa_r+0x188>
 80069ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80069cc:	e7b5      	b.n	800693a <_dtoa_r+0x18a>
 80069ce:	427b      	negs	r3, r7
 80069d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d2:	2300      	movs	r3, #0
 80069d4:	eba8 0807 	sub.w	r8, r8, r7
 80069d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80069da:	e7c2      	b.n	8006962 <_dtoa_r+0x1b2>
 80069dc:	2300      	movs	r3, #0
 80069de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dc35      	bgt.n	8006a52 <_dtoa_r+0x2a2>
 80069e6:	2301      	movs	r3, #1
 80069e8:	461a      	mov	r2, r3
 80069ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80069ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80069f0:	e00b      	b.n	8006a0a <_dtoa_r+0x25a>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7f3      	b.n	80069de <_dtoa_r+0x22e>
 80069f6:	2300      	movs	r3, #0
 80069f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	9308      	str	r3, [sp, #32]
 8006a00:	3301      	adds	r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	9307      	str	r3, [sp, #28]
 8006a06:	bfb8      	it	lt
 8006a08:	2301      	movlt	r3, #1
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a12:	f102 0514 	add.w	r5, r2, #20
 8006a16:	429d      	cmp	r5, r3
 8006a18:	d91f      	bls.n	8006a5a <_dtoa_r+0x2aa>
 8006a1a:	6041      	str	r1, [r0, #4]
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f001 f8d9 	bl	8007bd4 <_Balloc>
 8006a22:	4682      	mov	sl, r0
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d139      	bne.n	8006a9c <_dtoa_r+0x2ec>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <_dtoa_r+0x2e8>)
 8006a30:	e6d2      	b.n	80067d8 <_dtoa_r+0x28>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e7e0      	b.n	80069f8 <_dtoa_r+0x248>
 8006a36:	2401      	movs	r4, #1
 8006a38:	2300      	movs	r3, #0
 8006a3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a3c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	2200      	movs	r2, #0
 8006a44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a48:	2312      	movs	r3, #18
 8006a4a:	e7d0      	b.n	80069ee <_dtoa_r+0x23e>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a50:	e7f5      	b.n	8006a3e <_dtoa_r+0x28e>
 8006a52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006a58:	e7d7      	b.n	8006a0a <_dtoa_r+0x25a>
 8006a5a:	3101      	adds	r1, #1
 8006a5c:	0052      	lsls	r2, r2, #1
 8006a5e:	e7d8      	b.n	8006a12 <_dtoa_r+0x262>
 8006a60:	636f4361 	.word	0x636f4361
 8006a64:	3fd287a7 	.word	0x3fd287a7
 8006a68:	8b60c8b3 	.word	0x8b60c8b3
 8006a6c:	3fc68a28 	.word	0x3fc68a28
 8006a70:	509f79fb 	.word	0x509f79fb
 8006a74:	3fd34413 	.word	0x3fd34413
 8006a78:	080091bf 	.word	0x080091bf
 8006a7c:	080091d6 	.word	0x080091d6
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	080091bb 	.word	0x080091bb
 8006a88:	08009182 	.word	0x08009182
 8006a8c:	08009181 	.word	0x08009181
 8006a90:	3ff80000 	.word	0x3ff80000
 8006a94:	08009330 	.word	0x08009330
 8006a98:	0800922e 	.word	0x0800922e
 8006a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006aa0:	6018      	str	r0, [r3, #0]
 8006aa2:	9b07      	ldr	r3, [sp, #28]
 8006aa4:	2b0e      	cmp	r3, #14
 8006aa6:	f200 80a4 	bhi.w	8006bf2 <_dtoa_r+0x442>
 8006aaa:	2c00      	cmp	r4, #0
 8006aac:	f000 80a1 	beq.w	8006bf2 <_dtoa_r+0x442>
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	dd33      	ble.n	8006b1c <_dtoa_r+0x36c>
 8006ab4:	4b86      	ldr	r3, [pc, #536]	@ (8006cd0 <_dtoa_r+0x520>)
 8006ab6:	f007 020f 	and.w	r2, r7, #15
 8006aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006abe:	05f8      	lsls	r0, r7, #23
 8006ac0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ac4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006acc:	d516      	bpl.n	8006afc <_dtoa_r+0x34c>
 8006ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ad2:	4b80      	ldr	r3, [pc, #512]	@ (8006cd4 <_dtoa_r+0x524>)
 8006ad4:	2603      	movs	r6, #3
 8006ad6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ada:	f7f9 fe27 	bl	800072c <__aeabi_ddiv>
 8006ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae2:	f004 040f 	and.w	r4, r4, #15
 8006ae6:	4d7b      	ldr	r5, [pc, #492]	@ (8006cd4 <_dtoa_r+0x524>)
 8006ae8:	b954      	cbnz	r4, 8006b00 <_dtoa_r+0x350>
 8006aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af2:	f7f9 fe1b 	bl	800072c <__aeabi_ddiv>
 8006af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006afa:	e028      	b.n	8006b4e <_dtoa_r+0x39e>
 8006afc:	2602      	movs	r6, #2
 8006afe:	e7f2      	b.n	8006ae6 <_dtoa_r+0x336>
 8006b00:	07e1      	lsls	r1, r4, #31
 8006b02:	d508      	bpl.n	8006b16 <_dtoa_r+0x366>
 8006b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b14:	3601      	adds	r6, #1
 8006b16:	1064      	asrs	r4, r4, #1
 8006b18:	3508      	adds	r5, #8
 8006b1a:	e7e5      	b.n	8006ae8 <_dtoa_r+0x338>
 8006b1c:	f000 80d2 	beq.w	8006cc4 <_dtoa_r+0x514>
 8006b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b24:	427c      	negs	r4, r7
 8006b26:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd0 <_dtoa_r+0x520>)
 8006b28:	f004 020f 	and.w	r2, r4, #15
 8006b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fcd0 	bl	80004d8 <__aeabi_dmul>
 8006b38:	2602      	movs	r6, #2
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b40:	4d64      	ldr	r5, [pc, #400]	@ (8006cd4 <_dtoa_r+0x524>)
 8006b42:	1124      	asrs	r4, r4, #4
 8006b44:	2c00      	cmp	r4, #0
 8006b46:	f040 80b2 	bne.w	8006cae <_dtoa_r+0x4fe>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1d3      	bne.n	8006af6 <_dtoa_r+0x346>
 8006b4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80b7 	beq.w	8006cc8 <_dtoa_r+0x518>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd8 <_dtoa_r+0x528>)
 8006b62:	f7f9 ff2b 	bl	80009bc <__aeabi_dcmplt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f000 80ae 	beq.w	8006cc8 <_dtoa_r+0x518>
 8006b6c:	9b07      	ldr	r3, [sp, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80aa 	beq.w	8006cc8 <_dtoa_r+0x518>
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd37      	ble.n	8006bea <_dtoa_r+0x43a>
 8006b7a:	1e7b      	subs	r3, r7, #1
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	9304      	str	r3, [sp, #16]
 8006b80:	2200      	movs	r2, #0
 8006b82:	4629      	mov	r1, r5
 8006b84:	4b55      	ldr	r3, [pc, #340]	@ (8006cdc <_dtoa_r+0x52c>)
 8006b86:	f7f9 fca7 	bl	80004d8 <__aeabi_dmul>
 8006b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b8e:	9c08      	ldr	r4, [sp, #32]
 8006b90:	3601      	adds	r6, #1
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7f9 fc36 	bl	8000404 <__aeabi_i2d>
 8006b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b9c:	f7f9 fc9c 	bl	80004d8 <__aeabi_dmul>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ce0 <_dtoa_r+0x530>)
 8006ba4:	f7f9 fae2 	bl	800016c <__adddf3>
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	f040 809a 	bne.w	8006ce8 <_dtoa_r+0x538>
 8006bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce4 <_dtoa_r+0x534>)
 8006bbc:	f7f9 fad4 	bl	8000168 <__aeabi_dsub>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4633      	mov	r3, r6
 8006bcc:	f7f9 ff14 	bl	80009f8 <__aeabi_dcmpgt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f040 828e 	bne.w	80070f2 <_dtoa_r+0x942>
 8006bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bda:	462a      	mov	r2, r5
 8006bdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006be0:	f7f9 feec 	bl	80009bc <__aeabi_dcmplt>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	f040 8127 	bne.w	8006e38 <_dtoa_r+0x688>
 8006bea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006bee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006bf2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f2c0 8163 	blt.w	8006ec0 <_dtoa_r+0x710>
 8006bfa:	2f0e      	cmp	r7, #14
 8006bfc:	f300 8160 	bgt.w	8006ec0 <_dtoa_r+0x710>
 8006c00:	4b33      	ldr	r3, [pc, #204]	@ (8006cd0 <_dtoa_r+0x520>)
 8006c02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da03      	bge.n	8006c1c <_dtoa_r+0x46c>
 8006c14:	9b07      	ldr	r3, [sp, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f340 8100 	ble.w	8006e1c <_dtoa_r+0x66c>
 8006c1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c20:	4656      	mov	r6, sl
 8006c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fd7f 	bl	800072c <__aeabi_ddiv>
 8006c2e:	f7f9 ff03 	bl	8000a38 <__aeabi_d2iz>
 8006c32:	4680      	mov	r8, r0
 8006c34:	f7f9 fbe6 	bl	8000404 <__aeabi_i2d>
 8006c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 fa8e 	bl	8000168 <__aeabi_dsub>
 8006c4c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c50:	9d07      	ldr	r5, [sp, #28]
 8006c52:	f806 4b01 	strb.w	r4, [r6], #1
 8006c56:	eba6 040a 	sub.w	r4, r6, sl
 8006c5a:	42a5      	cmp	r5, r4
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	f040 8116 	bne.w	8006e90 <_dtoa_r+0x6e0>
 8006c64:	f7f9 fa82 	bl	800016c <__adddf3>
 8006c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	460d      	mov	r5, r1
 8006c70:	f7f9 fec2 	bl	80009f8 <__aeabi_dcmpgt>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f040 80f8 	bne.w	8006e6a <_dtoa_r+0x6ba>
 8006c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8006c86:	b118      	cbz	r0, 8006c90 <_dtoa_r+0x4e0>
 8006c88:	f018 0f01 	tst.w	r8, #1
 8006c8c:	f040 80ed 	bne.w	8006e6a <_dtoa_r+0x6ba>
 8006c90:	4649      	mov	r1, r9
 8006c92:	4658      	mov	r0, fp
 8006c94:	f000 ffde 	bl	8007c54 <_Bfree>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	7033      	strb	r3, [r6, #0]
 8006c9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c9e:	3701      	adds	r7, #1
 8006ca0:	601f      	str	r7, [r3, #0]
 8006ca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8320 	beq.w	80072ea <_dtoa_r+0xb3a>
 8006caa:	601e      	str	r6, [r3, #0]
 8006cac:	e31d      	b.n	80072ea <_dtoa_r+0xb3a>
 8006cae:	07e2      	lsls	r2, r4, #31
 8006cb0:	d505      	bpl.n	8006cbe <_dtoa_r+0x50e>
 8006cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cb6:	f7f9 fc0f 	bl	80004d8 <__aeabi_dmul>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	1064      	asrs	r4, r4, #1
 8006cc0:	3508      	adds	r5, #8
 8006cc2:	e73f      	b.n	8006b44 <_dtoa_r+0x394>
 8006cc4:	2602      	movs	r6, #2
 8006cc6:	e742      	b.n	8006b4e <_dtoa_r+0x39e>
 8006cc8:	9c07      	ldr	r4, [sp, #28]
 8006cca:	9704      	str	r7, [sp, #16]
 8006ccc:	e761      	b.n	8006b92 <_dtoa_r+0x3e2>
 8006cce:	bf00      	nop
 8006cd0:	08009330 	.word	0x08009330
 8006cd4:	08009308 	.word	0x08009308
 8006cd8:	3ff00000 	.word	0x3ff00000
 8006cdc:	40240000 	.word	0x40240000
 8006ce0:	401c0000 	.word	0x401c0000
 8006ce4:	40140000 	.word	0x40140000
 8006ce8:	4b70      	ldr	r3, [pc, #448]	@ (8006eac <_dtoa_r+0x6fc>)
 8006cea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cf4:	4454      	add	r4, sl
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	d045      	beq.n	8006d86 <_dtoa_r+0x5d6>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	496c      	ldr	r1, [pc, #432]	@ (8006eb0 <_dtoa_r+0x700>)
 8006cfe:	f7f9 fd15 	bl	800072c <__aeabi_ddiv>
 8006d02:	4633      	mov	r3, r6
 8006d04:	462a      	mov	r2, r5
 8006d06:	f7f9 fa2f 	bl	8000168 <__aeabi_dsub>
 8006d0a:	4656      	mov	r6, sl
 8006d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d14:	f7f9 fe90 	bl	8000a38 <__aeabi_d2iz>
 8006d18:	4605      	mov	r5, r0
 8006d1a:	f7f9 fb73 	bl	8000404 <__aeabi_i2d>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d26:	f7f9 fa1f 	bl	8000168 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	3530      	adds	r5, #48	@ 0x30
 8006d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d38:	f806 5b01 	strb.w	r5, [r6], #1
 8006d3c:	f7f9 fe3e 	bl	80009bc <__aeabi_dcmplt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d163      	bne.n	8006e0c <_dtoa_r+0x65c>
 8006d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	495a      	ldr	r1, [pc, #360]	@ (8006eb4 <_dtoa_r+0x704>)
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d54:	f7f9 fe32 	bl	80009bc <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 8087 	bne.w	8006e6c <_dtoa_r+0x6bc>
 8006d5e:	42a6      	cmp	r6, r4
 8006d60:	f43f af43 	beq.w	8006bea <_dtoa_r+0x43a>
 8006d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b53      	ldr	r3, [pc, #332]	@ (8006eb8 <_dtoa_r+0x708>)
 8006d6c:	f7f9 fbb4 	bl	80004d8 <__aeabi_dmul>
 8006d70:	2200      	movs	r2, #0
 8006d72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb8 <_dtoa_r+0x708>)
 8006d7c:	f7f9 fbac 	bl	80004d8 <__aeabi_dmul>
 8006d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d84:	e7c4      	b.n	8006d10 <_dtoa_r+0x560>
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f7f9 fba5 	bl	80004d8 <__aeabi_dmul>
 8006d8e:	4656      	mov	r6, sl
 8006d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d94:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9a:	f7f9 fe4d 	bl	8000a38 <__aeabi_d2iz>
 8006d9e:	4605      	mov	r5, r0
 8006da0:	f7f9 fb30 	bl	8000404 <__aeabi_i2d>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dac:	f7f9 f9dc 	bl	8000168 <__aeabi_dsub>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	3530      	adds	r5, #48	@ 0x30
 8006db6:	f806 5b01 	strb.w	r5, [r6], #1
 8006dba:	42a6      	cmp	r6, r4
 8006dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	d124      	bne.n	8006e10 <_dtoa_r+0x660>
 8006dc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dca:	4b39      	ldr	r3, [pc, #228]	@ (8006eb0 <_dtoa_r+0x700>)
 8006dcc:	f7f9 f9ce 	bl	800016c <__adddf3>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd8:	f7f9 fe0e 	bl	80009f8 <__aeabi_dcmpgt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d145      	bne.n	8006e6c <_dtoa_r+0x6bc>
 8006de0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006de4:	2000      	movs	r0, #0
 8006de6:	4932      	ldr	r1, [pc, #200]	@ (8006eb0 <_dtoa_r+0x700>)
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df4:	f7f9 fde2 	bl	80009bc <__aeabi_dcmplt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f43f aef6 	beq.w	8006bea <_dtoa_r+0x43a>
 8006dfe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e00:	1e73      	subs	r3, r6, #1
 8006e02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d0f8      	beq.n	8006dfe <_dtoa_r+0x64e>
 8006e0c:	9f04      	ldr	r7, [sp, #16]
 8006e0e:	e73f      	b.n	8006c90 <_dtoa_r+0x4e0>
 8006e10:	4b29      	ldr	r3, [pc, #164]	@ (8006eb8 <_dtoa_r+0x708>)
 8006e12:	f7f9 fb61 	bl	80004d8 <__aeabi_dmul>
 8006e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e1a:	e7bc      	b.n	8006d96 <_dtoa_r+0x5e6>
 8006e1c:	d10c      	bne.n	8006e38 <_dtoa_r+0x688>
 8006e1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e22:	2200      	movs	r2, #0
 8006e24:	4b25      	ldr	r3, [pc, #148]	@ (8006ebc <_dtoa_r+0x70c>)
 8006e26:	f7f9 fb57 	bl	80004d8 <__aeabi_dmul>
 8006e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e2e:	f7f9 fdd9 	bl	80009e4 <__aeabi_dcmpge>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f000 815b 	beq.w	80070ee <_dtoa_r+0x93e>
 8006e38:	2400      	movs	r4, #0
 8006e3a:	4625      	mov	r5, r4
 8006e3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e3e:	4656      	mov	r6, sl
 8006e40:	43db      	mvns	r3, r3
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	2700      	movs	r7, #0
 8006e46:	4621      	mov	r1, r4
 8006e48:	4658      	mov	r0, fp
 8006e4a:	f000 ff03 	bl	8007c54 <_Bfree>
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	d0dc      	beq.n	8006e0c <_dtoa_r+0x65c>
 8006e52:	b12f      	cbz	r7, 8006e60 <_dtoa_r+0x6b0>
 8006e54:	42af      	cmp	r7, r5
 8006e56:	d003      	beq.n	8006e60 <_dtoa_r+0x6b0>
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	f000 fefa 	bl	8007c54 <_Bfree>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4658      	mov	r0, fp
 8006e64:	f000 fef6 	bl	8007c54 <_Bfree>
 8006e68:	e7d0      	b.n	8006e0c <_dtoa_r+0x65c>
 8006e6a:	9704      	str	r7, [sp, #16]
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	461e      	mov	r6, r3
 8006e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e74:	2a39      	cmp	r2, #57	@ 0x39
 8006e76:	d107      	bne.n	8006e88 <_dtoa_r+0x6d8>
 8006e78:	459a      	cmp	sl, r3
 8006e7a:	d1f8      	bne.n	8006e6e <_dtoa_r+0x6be>
 8006e7c:	9a04      	ldr	r2, [sp, #16]
 8006e7e:	3201      	adds	r2, #1
 8006e80:	9204      	str	r2, [sp, #16]
 8006e82:	2230      	movs	r2, #48	@ 0x30
 8006e84:	f88a 2000 	strb.w	r2, [sl]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	3201      	adds	r2, #1
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e7bd      	b.n	8006e0c <_dtoa_r+0x65c>
 8006e90:	2200      	movs	r2, #0
 8006e92:	4b09      	ldr	r3, [pc, #36]	@ (8006eb8 <_dtoa_r+0x708>)
 8006e94:	f7f9 fb20 	bl	80004d8 <__aeabi_dmul>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	f7f9 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f43f aebc 	beq.w	8006c22 <_dtoa_r+0x472>
 8006eaa:	e6f1      	b.n	8006c90 <_dtoa_r+0x4e0>
 8006eac:	08009330 	.word	0x08009330
 8006eb0:	3fe00000 	.word	0x3fe00000
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	40240000 	.word	0x40240000
 8006ebc:	40140000 	.word	0x40140000
 8006ec0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	f000 80db 	beq.w	800707e <_dtoa_r+0x8ce>
 8006ec8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006eca:	2a01      	cmp	r2, #1
 8006ecc:	f300 80bf 	bgt.w	800704e <_dtoa_r+0x89e>
 8006ed0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	f000 80b7 	beq.w	8007046 <_dtoa_r+0x896>
 8006ed8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006edc:	4646      	mov	r6, r8
 8006ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	441a      	add	r2, r3
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	4498      	add	r8, r3
 8006eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eec:	f000 ffb0 	bl	8007e50 <__i2b>
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b15e      	cbz	r6, 8006f0c <_dtoa_r+0x75c>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd08      	ble.n	8006f0c <_dtoa_r+0x75c>
 8006efa:	42b3      	cmp	r3, r6
 8006efc:	bfa8      	it	ge
 8006efe:	4633      	movge	r3, r6
 8006f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f02:	eba8 0803 	sub.w	r8, r8, r3
 8006f06:	1af6      	subs	r6, r6, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f0e:	b1f3      	cbz	r3, 8006f4e <_dtoa_r+0x79e>
 8006f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80b7 	beq.w	8007086 <_dtoa_r+0x8d6>
 8006f18:	b18c      	cbz	r4, 8006f3e <_dtoa_r+0x78e>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f001 f854 	bl	8007fcc <__pow5mult>
 8006f24:	464a      	mov	r2, r9
 8006f26:	4601      	mov	r1, r0
 8006f28:	4605      	mov	r5, r0
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f000 ffa6 	bl	8007e7c <__multiply>
 8006f30:	4649      	mov	r1, r9
 8006f32:	9004      	str	r0, [sp, #16]
 8006f34:	4658      	mov	r0, fp
 8006f36:	f000 fe8d 	bl	8007c54 <_Bfree>
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	4699      	mov	r9, r3
 8006f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f40:	1b1a      	subs	r2, r3, r4
 8006f42:	d004      	beq.n	8006f4e <_dtoa_r+0x79e>
 8006f44:	4649      	mov	r1, r9
 8006f46:	4658      	mov	r0, fp
 8006f48:	f001 f840 	bl	8007fcc <__pow5mult>
 8006f4c:	4681      	mov	r9, r0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4658      	mov	r0, fp
 8006f52:	f000 ff7d 	bl	8007e50 <__i2b>
 8006f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f58:	4604      	mov	r4, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 81c9 	beq.w	80072f2 <_dtoa_r+0xb42>
 8006f60:	461a      	mov	r2, r3
 8006f62:	4601      	mov	r1, r0
 8006f64:	4658      	mov	r0, fp
 8006f66:	f001 f831 	bl	8007fcc <__pow5mult>
 8006f6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	f300 808f 	bgt.w	8007092 <_dtoa_r+0x8e2>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f040 8087 	bne.w	800708a <_dtoa_r+0x8da>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 8083 	bne.w	800708e <_dtoa_r+0x8de>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f8e:	0d1b      	lsrs	r3, r3, #20
 8006f90:	051b      	lsls	r3, r3, #20
 8006f92:	b12b      	cbz	r3, 8006fa0 <_dtoa_r+0x7f0>
 8006f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 81aa 	beq.w	80072fe <_dtoa_r+0xb4e>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fb0:	6918      	ldr	r0, [r3, #16]
 8006fb2:	f000 ff01 	bl	8007db8 <__hi0bits>
 8006fb6:	f1c0 0020 	rsb	r0, r0, #32
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	4418      	add	r0, r3
 8006fbe:	f010 001f 	ands.w	r0, r0, #31
 8006fc2:	d071      	beq.n	80070a8 <_dtoa_r+0x8f8>
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	dd65      	ble.n	8007098 <_dtoa_r+0x8e8>
 8006fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fce:	f1c0 001c 	rsb	r0, r0, #28
 8006fd2:	4403      	add	r3, r0
 8006fd4:	4480      	add	r8, r0
 8006fd6:	4406      	add	r6, r0
 8006fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fda:	f1b8 0f00 	cmp.w	r8, #0
 8006fde:	dd05      	ble.n	8006fec <_dtoa_r+0x83c>
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	f001 f84b 	bl	8008080 <__lshift>
 8006fea:	4681      	mov	r9, r0
 8006fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dd05      	ble.n	8006ffe <_dtoa_r+0x84e>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f001 f842 	bl	8008080 <__lshift>
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d053      	beq.n	80070ac <_dtoa_r+0x8fc>
 8007004:	4621      	mov	r1, r4
 8007006:	4648      	mov	r0, r9
 8007008:	f001 f8a6 	bl	8008158 <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	da4d      	bge.n	80070ac <_dtoa_r+0x8fc>
 8007010:	1e7b      	subs	r3, r7, #1
 8007012:	4649      	mov	r1, r9
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	220a      	movs	r2, #10
 8007018:	2300      	movs	r3, #0
 800701a:	4658      	mov	r0, fp
 800701c:	f000 fe3c 	bl	8007c98 <__multadd>
 8007020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007022:	4681      	mov	r9, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 816c 	beq.w	8007302 <_dtoa_r+0xb52>
 800702a:	2300      	movs	r3, #0
 800702c:	4629      	mov	r1, r5
 800702e:	220a      	movs	r2, #10
 8007030:	4658      	mov	r0, fp
 8007032:	f000 fe31 	bl	8007c98 <__multadd>
 8007036:	9b08      	ldr	r3, [sp, #32]
 8007038:	4605      	mov	r5, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	dc61      	bgt.n	8007102 <_dtoa_r+0x952>
 800703e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007040:	2b02      	cmp	r3, #2
 8007042:	dc3b      	bgt.n	80070bc <_dtoa_r+0x90c>
 8007044:	e05d      	b.n	8007102 <_dtoa_r+0x952>
 8007046:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007048:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800704c:	e746      	b.n	8006edc <_dtoa_r+0x72c>
 800704e:	9b07      	ldr	r3, [sp, #28]
 8007050:	1e5c      	subs	r4, r3, #1
 8007052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007054:	42a3      	cmp	r3, r4
 8007056:	bfbf      	itttt	lt
 8007058:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800705a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800705c:	1ae3      	sublt	r3, r4, r3
 800705e:	18d2      	addlt	r2, r2, r3
 8007060:	bfa8      	it	ge
 8007062:	1b1c      	subge	r4, r3, r4
 8007064:	9b07      	ldr	r3, [sp, #28]
 8007066:	bfbe      	ittt	lt
 8007068:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800706a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800706c:	2400      	movlt	r4, #0
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfb5      	itete	lt
 8007072:	eba8 0603 	sublt.w	r6, r8, r3
 8007076:	4646      	movge	r6, r8
 8007078:	2300      	movlt	r3, #0
 800707a:	9b07      	ldrge	r3, [sp, #28]
 800707c:	e730      	b.n	8006ee0 <_dtoa_r+0x730>
 800707e:	4646      	mov	r6, r8
 8007080:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007082:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007084:	e735      	b.n	8006ef2 <_dtoa_r+0x742>
 8007086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007088:	e75c      	b.n	8006f44 <_dtoa_r+0x794>
 800708a:	2300      	movs	r3, #0
 800708c:	e788      	b.n	8006fa0 <_dtoa_r+0x7f0>
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	e786      	b.n	8006fa0 <_dtoa_r+0x7f0>
 8007092:	2300      	movs	r3, #0
 8007094:	930a      	str	r3, [sp, #40]	@ 0x28
 8007096:	e788      	b.n	8006faa <_dtoa_r+0x7fa>
 8007098:	d09f      	beq.n	8006fda <_dtoa_r+0x82a>
 800709a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800709c:	331c      	adds	r3, #28
 800709e:	441a      	add	r2, r3
 80070a0:	4498      	add	r8, r3
 80070a2:	441e      	add	r6, r3
 80070a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a6:	e798      	b.n	8006fda <_dtoa_r+0x82a>
 80070a8:	4603      	mov	r3, r0
 80070aa:	e7f6      	b.n	800709a <_dtoa_r+0x8ea>
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	9704      	str	r7, [sp, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc20      	bgt.n	80070f6 <_dtoa_r+0x946>
 80070b4:	9308      	str	r3, [sp, #32]
 80070b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	dd1e      	ble.n	80070fa <_dtoa_r+0x94a>
 80070bc:	9b08      	ldr	r3, [sp, #32]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f47f aebc 	bne.w	8006e3c <_dtoa_r+0x68c>
 80070c4:	4621      	mov	r1, r4
 80070c6:	2205      	movs	r2, #5
 80070c8:	4658      	mov	r0, fp
 80070ca:	f000 fde5 	bl	8007c98 <__multadd>
 80070ce:	4601      	mov	r1, r0
 80070d0:	4604      	mov	r4, r0
 80070d2:	4648      	mov	r0, r9
 80070d4:	f001 f840 	bl	8008158 <__mcmp>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f77f aeaf 	ble.w	8006e3c <_dtoa_r+0x68c>
 80070de:	2331      	movs	r3, #49	@ 0x31
 80070e0:	4656      	mov	r6, sl
 80070e2:	f806 3b01 	strb.w	r3, [r6], #1
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	3301      	adds	r3, #1
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	e6aa      	b.n	8006e44 <_dtoa_r+0x694>
 80070ee:	9c07      	ldr	r4, [sp, #28]
 80070f0:	9704      	str	r7, [sp, #16]
 80070f2:	4625      	mov	r5, r4
 80070f4:	e7f3      	b.n	80070de <_dtoa_r+0x92e>
 80070f6:	9b07      	ldr	r3, [sp, #28]
 80070f8:	9308      	str	r3, [sp, #32]
 80070fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8104 	beq.w	800730a <_dtoa_r+0xb5a>
 8007102:	2e00      	cmp	r6, #0
 8007104:	dd05      	ble.n	8007112 <_dtoa_r+0x962>
 8007106:	4629      	mov	r1, r5
 8007108:	4632      	mov	r2, r6
 800710a:	4658      	mov	r0, fp
 800710c:	f000 ffb8 	bl	8008080 <__lshift>
 8007110:	4605      	mov	r5, r0
 8007112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d05a      	beq.n	80071ce <_dtoa_r+0xa1e>
 8007118:	4658      	mov	r0, fp
 800711a:	6869      	ldr	r1, [r5, #4]
 800711c:	f000 fd5a 	bl	8007bd4 <_Balloc>
 8007120:	4606      	mov	r6, r0
 8007122:	b928      	cbnz	r0, 8007130 <_dtoa_r+0x980>
 8007124:	4602      	mov	r2, r0
 8007126:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800712a:	4b83      	ldr	r3, [pc, #524]	@ (8007338 <_dtoa_r+0xb88>)
 800712c:	f7ff bb54 	b.w	80067d8 <_dtoa_r+0x28>
 8007130:	692a      	ldr	r2, [r5, #16]
 8007132:	f105 010c 	add.w	r1, r5, #12
 8007136:	3202      	adds	r2, #2
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	300c      	adds	r0, #12
 800713c:	f7ff fa95 	bl	800666a <memcpy>
 8007140:	2201      	movs	r2, #1
 8007142:	4631      	mov	r1, r6
 8007144:	4658      	mov	r0, fp
 8007146:	f000 ff9b 	bl	8008080 <__lshift>
 800714a:	462f      	mov	r7, r5
 800714c:	4605      	mov	r5, r0
 800714e:	f10a 0301 	add.w	r3, sl, #1
 8007152:	9307      	str	r3, [sp, #28]
 8007154:	9b08      	ldr	r3, [sp, #32]
 8007156:	4453      	add	r3, sl
 8007158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800715a:	9b02      	ldr	r3, [sp, #8]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	930a      	str	r3, [sp, #40]	@ 0x28
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	4621      	mov	r1, r4
 8007166:	3b01      	subs	r3, #1
 8007168:	4648      	mov	r0, r9
 800716a:	9302      	str	r3, [sp, #8]
 800716c:	f7ff fa96 	bl	800669c <quorem>
 8007170:	4639      	mov	r1, r7
 8007172:	9008      	str	r0, [sp, #32]
 8007174:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007178:	4648      	mov	r0, r9
 800717a:	f000 ffed 	bl	8008158 <__mcmp>
 800717e:	462a      	mov	r2, r5
 8007180:	9009      	str	r0, [sp, #36]	@ 0x24
 8007182:	4621      	mov	r1, r4
 8007184:	4658      	mov	r0, fp
 8007186:	f001 f803 	bl	8008190 <__mdiff>
 800718a:	68c2      	ldr	r2, [r0, #12]
 800718c:	4606      	mov	r6, r0
 800718e:	bb02      	cbnz	r2, 80071d2 <_dtoa_r+0xa22>
 8007190:	4601      	mov	r1, r0
 8007192:	4648      	mov	r0, r9
 8007194:	f000 ffe0 	bl	8008158 <__mcmp>
 8007198:	4602      	mov	r2, r0
 800719a:	4631      	mov	r1, r6
 800719c:	4658      	mov	r0, fp
 800719e:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a0:	f000 fd58 	bl	8007c54 <_Bfree>
 80071a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071a8:	9e07      	ldr	r6, [sp, #28]
 80071aa:	ea43 0102 	orr.w	r1, r3, r2
 80071ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b0:	4319      	orrs	r1, r3
 80071b2:	d110      	bne.n	80071d6 <_dtoa_r+0xa26>
 80071b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071b8:	d029      	beq.n	800720e <_dtoa_r+0xa5e>
 80071ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dd02      	ble.n	80071c6 <_dtoa_r+0xa16>
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	f883 8000 	strb.w	r8, [r3]
 80071cc:	e63b      	b.n	8006e46 <_dtoa_r+0x696>
 80071ce:	4628      	mov	r0, r5
 80071d0:	e7bb      	b.n	800714a <_dtoa_r+0x99a>
 80071d2:	2201      	movs	r2, #1
 80071d4:	e7e1      	b.n	800719a <_dtoa_r+0x9ea>
 80071d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db04      	blt.n	80071e6 <_dtoa_r+0xa36>
 80071dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80071de:	430b      	orrs	r3, r1
 80071e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071e2:	430b      	orrs	r3, r1
 80071e4:	d120      	bne.n	8007228 <_dtoa_r+0xa78>
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	dded      	ble.n	80071c6 <_dtoa_r+0xa16>
 80071ea:	4649      	mov	r1, r9
 80071ec:	2201      	movs	r2, #1
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 ff46 	bl	8008080 <__lshift>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4681      	mov	r9, r0
 80071f8:	f000 ffae 	bl	8008158 <__mcmp>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	dc03      	bgt.n	8007208 <_dtoa_r+0xa58>
 8007200:	d1e1      	bne.n	80071c6 <_dtoa_r+0xa16>
 8007202:	f018 0f01 	tst.w	r8, #1
 8007206:	d0de      	beq.n	80071c6 <_dtoa_r+0xa16>
 8007208:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800720c:	d1d8      	bne.n	80071c0 <_dtoa_r+0xa10>
 800720e:	2339      	movs	r3, #57	@ 0x39
 8007210:	9a02      	ldr	r2, [sp, #8]
 8007212:	7013      	strb	r3, [r2, #0]
 8007214:	4633      	mov	r3, r6
 8007216:	461e      	mov	r6, r3
 8007218:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800721c:	3b01      	subs	r3, #1
 800721e:	2a39      	cmp	r2, #57	@ 0x39
 8007220:	d052      	beq.n	80072c8 <_dtoa_r+0xb18>
 8007222:	3201      	adds	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e60e      	b.n	8006e46 <_dtoa_r+0x696>
 8007228:	2a00      	cmp	r2, #0
 800722a:	dd07      	ble.n	800723c <_dtoa_r+0xa8c>
 800722c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007230:	d0ed      	beq.n	800720e <_dtoa_r+0xa5e>
 8007232:	9a02      	ldr	r2, [sp, #8]
 8007234:	f108 0301 	add.w	r3, r8, #1
 8007238:	7013      	strb	r3, [r2, #0]
 800723a:	e604      	b.n	8006e46 <_dtoa_r+0x696>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	9a07      	ldr	r2, [sp, #28]
 8007240:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007246:	4293      	cmp	r3, r2
 8007248:	d028      	beq.n	800729c <_dtoa_r+0xaec>
 800724a:	4649      	mov	r1, r9
 800724c:	2300      	movs	r3, #0
 800724e:	220a      	movs	r2, #10
 8007250:	4658      	mov	r0, fp
 8007252:	f000 fd21 	bl	8007c98 <__multadd>
 8007256:	42af      	cmp	r7, r5
 8007258:	4681      	mov	r9, r0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	f04f 020a 	mov.w	r2, #10
 8007262:	4639      	mov	r1, r7
 8007264:	4658      	mov	r0, fp
 8007266:	d107      	bne.n	8007278 <_dtoa_r+0xac8>
 8007268:	f000 fd16 	bl	8007c98 <__multadd>
 800726c:	4607      	mov	r7, r0
 800726e:	4605      	mov	r5, r0
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	3301      	adds	r3, #1
 8007274:	9307      	str	r3, [sp, #28]
 8007276:	e774      	b.n	8007162 <_dtoa_r+0x9b2>
 8007278:	f000 fd0e 	bl	8007c98 <__multadd>
 800727c:	4629      	mov	r1, r5
 800727e:	4607      	mov	r7, r0
 8007280:	2300      	movs	r3, #0
 8007282:	220a      	movs	r2, #10
 8007284:	4658      	mov	r0, fp
 8007286:	f000 fd07 	bl	8007c98 <__multadd>
 800728a:	4605      	mov	r5, r0
 800728c:	e7f0      	b.n	8007270 <_dtoa_r+0xac0>
 800728e:	9b08      	ldr	r3, [sp, #32]
 8007290:	2700      	movs	r7, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	bfcc      	ite	gt
 8007296:	461e      	movgt	r6, r3
 8007298:	2601      	movle	r6, #1
 800729a:	4456      	add	r6, sl
 800729c:	4649      	mov	r1, r9
 800729e:	2201      	movs	r2, #1
 80072a0:	4658      	mov	r0, fp
 80072a2:	f000 feed 	bl	8008080 <__lshift>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4681      	mov	r9, r0
 80072aa:	f000 ff55 	bl	8008158 <__mcmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	dcb0      	bgt.n	8007214 <_dtoa_r+0xa64>
 80072b2:	d102      	bne.n	80072ba <_dtoa_r+0xb0a>
 80072b4:	f018 0f01 	tst.w	r8, #1
 80072b8:	d1ac      	bne.n	8007214 <_dtoa_r+0xa64>
 80072ba:	4633      	mov	r3, r6
 80072bc:	461e      	mov	r6, r3
 80072be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072c2:	2a30      	cmp	r2, #48	@ 0x30
 80072c4:	d0fa      	beq.n	80072bc <_dtoa_r+0xb0c>
 80072c6:	e5be      	b.n	8006e46 <_dtoa_r+0x696>
 80072c8:	459a      	cmp	sl, r3
 80072ca:	d1a4      	bne.n	8007216 <_dtoa_r+0xa66>
 80072cc:	9b04      	ldr	r3, [sp, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	2331      	movs	r3, #49	@ 0x31
 80072d4:	f88a 3000 	strb.w	r3, [sl]
 80072d8:	e5b5      	b.n	8006e46 <_dtoa_r+0x696>
 80072da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800733c <_dtoa_r+0xb8c>
 80072e0:	b11b      	cbz	r3, 80072ea <_dtoa_r+0xb3a>
 80072e2:	f10a 0308 	add.w	r3, sl, #8
 80072e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4650      	mov	r0, sl
 80072ec:	b017      	add	sp, #92	@ 0x5c
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	f77f ae3d 	ble.w	8006f74 <_dtoa_r+0x7c4>
 80072fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80072fe:	2001      	movs	r0, #1
 8007300:	e65b      	b.n	8006fba <_dtoa_r+0x80a>
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f77f aed6 	ble.w	80070b6 <_dtoa_r+0x906>
 800730a:	4656      	mov	r6, sl
 800730c:	4621      	mov	r1, r4
 800730e:	4648      	mov	r0, r9
 8007310:	f7ff f9c4 	bl	800669c <quorem>
 8007314:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	f806 8b01 	strb.w	r8, [r6], #1
 800731e:	eba6 020a 	sub.w	r2, r6, sl
 8007322:	4293      	cmp	r3, r2
 8007324:	ddb3      	ble.n	800728e <_dtoa_r+0xade>
 8007326:	4649      	mov	r1, r9
 8007328:	2300      	movs	r3, #0
 800732a:	220a      	movs	r2, #10
 800732c:	4658      	mov	r0, fp
 800732e:	f000 fcb3 	bl	8007c98 <__multadd>
 8007332:	4681      	mov	r9, r0
 8007334:	e7ea      	b.n	800730c <_dtoa_r+0xb5c>
 8007336:	bf00      	nop
 8007338:	0800922e 	.word	0x0800922e
 800733c:	080091b2 	.word	0x080091b2

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d040      	beq.n	80073ca <_free_r+0x8a>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 fc32 	bl	8007bbc <__malloc_lock>
 8007358:	4a1c      	ldr	r2, [pc, #112]	@ (80073cc <_free_r+0x8c>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	b933      	cbnz	r3, 800736c <_free_r+0x2c>
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007368:	f000 bc2e 	b.w	8007bc8 <__malloc_unlock>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d908      	bls.n	8007382 <_free_r+0x42>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	e7ed      	b.n	800735e <_free_r+0x1e>
 8007382:	461a      	mov	r2, r3
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b10b      	cbz	r3, 800738c <_free_r+0x4c>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d9fa      	bls.n	8007382 <_free_r+0x42>
 800738c:	6811      	ldr	r1, [r2, #0]
 800738e:	1850      	adds	r0, r2, r1
 8007390:	42a0      	cmp	r0, r4
 8007392:	d10b      	bne.n	80073ac <_free_r+0x6c>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	4401      	add	r1, r0
 8007398:	1850      	adds	r0, r2, r1
 800739a:	4283      	cmp	r3, r0
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	d1e0      	bne.n	8007362 <_free_r+0x22>
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4408      	add	r0, r1
 80073a6:	6010      	str	r0, [r2, #0]
 80073a8:	6053      	str	r3, [r2, #4]
 80073aa:	e7da      	b.n	8007362 <_free_r+0x22>
 80073ac:	d902      	bls.n	80073b4 <_free_r+0x74>
 80073ae:	230c      	movs	r3, #12
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	e7d6      	b.n	8007362 <_free_r+0x22>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf01      	itttt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	1809      	addeq	r1, r1, r0
 80073c2:	6021      	streq	r1, [r4, #0]
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6054      	str	r4, [r2, #4]
 80073c8:	e7cb      	b.n	8007362 <_free_r+0x22>
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	2000049c 	.word	0x2000049c

080073d0 <rshift>:
 80073d0:	6903      	ldr	r3, [r0, #16]
 80073d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073da:	f100 0414 	add.w	r4, r0, #20
 80073de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073e2:	dd46      	ble.n	8007472 <rshift+0xa2>
 80073e4:	f011 011f 	ands.w	r1, r1, #31
 80073e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073f0:	d10c      	bne.n	800740c <rshift+0x3c>
 80073f2:	4629      	mov	r1, r5
 80073f4:	f100 0710 	add.w	r7, r0, #16
 80073f8:	42b1      	cmp	r1, r6
 80073fa:	d335      	bcc.n	8007468 <rshift+0x98>
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	1eea      	subs	r2, r5, #3
 8007402:	4296      	cmp	r6, r2
 8007404:	bf38      	it	cc
 8007406:	2300      	movcc	r3, #0
 8007408:	4423      	add	r3, r4
 800740a:	e015      	b.n	8007438 <rshift+0x68>
 800740c:	46a1      	mov	r9, r4
 800740e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007412:	f1c1 0820 	rsb	r8, r1, #32
 8007416:	40cf      	lsrs	r7, r1
 8007418:	f105 0e04 	add.w	lr, r5, #4
 800741c:	4576      	cmp	r6, lr
 800741e:	46f4      	mov	ip, lr
 8007420:	d816      	bhi.n	8007450 <rshift+0x80>
 8007422:	1a9a      	subs	r2, r3, r2
 8007424:	0092      	lsls	r2, r2, #2
 8007426:	3a04      	subs	r2, #4
 8007428:	3501      	adds	r5, #1
 800742a:	42ae      	cmp	r6, r5
 800742c:	bf38      	it	cc
 800742e:	2200      	movcc	r2, #0
 8007430:	18a3      	adds	r3, r4, r2
 8007432:	50a7      	str	r7, [r4, r2]
 8007434:	b107      	cbz	r7, 8007438 <rshift+0x68>
 8007436:	3304      	adds	r3, #4
 8007438:	42a3      	cmp	r3, r4
 800743a:	eba3 0204 	sub.w	r2, r3, r4
 800743e:	bf08      	it	eq
 8007440:	2300      	moveq	r3, #0
 8007442:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007446:	6102      	str	r2, [r0, #16]
 8007448:	bf08      	it	eq
 800744a:	6143      	streq	r3, [r0, #20]
 800744c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007450:	f8dc c000 	ldr.w	ip, [ip]
 8007454:	fa0c fc08 	lsl.w	ip, ip, r8
 8007458:	ea4c 0707 	orr.w	r7, ip, r7
 800745c:	f849 7b04 	str.w	r7, [r9], #4
 8007460:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007464:	40cf      	lsrs	r7, r1
 8007466:	e7d9      	b.n	800741c <rshift+0x4c>
 8007468:	f851 cb04 	ldr.w	ip, [r1], #4
 800746c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007470:	e7c2      	b.n	80073f8 <rshift+0x28>
 8007472:	4623      	mov	r3, r4
 8007474:	e7e0      	b.n	8007438 <rshift+0x68>

08007476 <__hexdig_fun>:
 8007476:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800747a:	2b09      	cmp	r3, #9
 800747c:	d802      	bhi.n	8007484 <__hexdig_fun+0xe>
 800747e:	3820      	subs	r0, #32
 8007480:	b2c0      	uxtb	r0, r0
 8007482:	4770      	bx	lr
 8007484:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007488:	2b05      	cmp	r3, #5
 800748a:	d801      	bhi.n	8007490 <__hexdig_fun+0x1a>
 800748c:	3847      	subs	r0, #71	@ 0x47
 800748e:	e7f7      	b.n	8007480 <__hexdig_fun+0xa>
 8007490:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007494:	2b05      	cmp	r3, #5
 8007496:	d801      	bhi.n	800749c <__hexdig_fun+0x26>
 8007498:	3827      	subs	r0, #39	@ 0x27
 800749a:	e7f1      	b.n	8007480 <__hexdig_fun+0xa>
 800749c:	2000      	movs	r0, #0
 800749e:	4770      	bx	lr

080074a0 <__gethex>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	468a      	mov	sl, r1
 80074a6:	4690      	mov	r8, r2
 80074a8:	b085      	sub	sp, #20
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	9001      	str	r0, [sp, #4]
 80074b0:	1c9c      	adds	r4, r3, #2
 80074b2:	46a1      	mov	r9, r4
 80074b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80074b8:	2830      	cmp	r0, #48	@ 0x30
 80074ba:	d0fa      	beq.n	80074b2 <__gethex+0x12>
 80074bc:	eba9 0303 	sub.w	r3, r9, r3
 80074c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80074c4:	f7ff ffd7 	bl	8007476 <__hexdig_fun>
 80074c8:	4605      	mov	r5, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d168      	bne.n	80075a0 <__gethex+0x100>
 80074ce:	2201      	movs	r2, #1
 80074d0:	4648      	mov	r0, r9
 80074d2:	499f      	ldr	r1, [pc, #636]	@ (8007750 <__gethex+0x2b0>)
 80074d4:	f7ff f832 	bl	800653c <strncmp>
 80074d8:	4607      	mov	r7, r0
 80074da:	2800      	cmp	r0, #0
 80074dc:	d167      	bne.n	80075ae <__gethex+0x10e>
 80074de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80074e2:	4626      	mov	r6, r4
 80074e4:	f7ff ffc7 	bl	8007476 <__hexdig_fun>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d062      	beq.n	80075b2 <__gethex+0x112>
 80074ec:	4623      	mov	r3, r4
 80074ee:	7818      	ldrb	r0, [r3, #0]
 80074f0:	4699      	mov	r9, r3
 80074f2:	2830      	cmp	r0, #48	@ 0x30
 80074f4:	f103 0301 	add.w	r3, r3, #1
 80074f8:	d0f9      	beq.n	80074ee <__gethex+0x4e>
 80074fa:	f7ff ffbc 	bl	8007476 <__hexdig_fun>
 80074fe:	fab0 f580 	clz	r5, r0
 8007502:	f04f 0b01 	mov.w	fp, #1
 8007506:	096d      	lsrs	r5, r5, #5
 8007508:	464a      	mov	r2, r9
 800750a:	4616      	mov	r6, r2
 800750c:	7830      	ldrb	r0, [r6, #0]
 800750e:	3201      	adds	r2, #1
 8007510:	f7ff ffb1 	bl	8007476 <__hexdig_fun>
 8007514:	2800      	cmp	r0, #0
 8007516:	d1f8      	bne.n	800750a <__gethex+0x6a>
 8007518:	2201      	movs	r2, #1
 800751a:	4630      	mov	r0, r6
 800751c:	498c      	ldr	r1, [pc, #560]	@ (8007750 <__gethex+0x2b0>)
 800751e:	f7ff f80d 	bl	800653c <strncmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	d13f      	bne.n	80075a6 <__gethex+0x106>
 8007526:	b944      	cbnz	r4, 800753a <__gethex+0x9a>
 8007528:	1c74      	adds	r4, r6, #1
 800752a:	4622      	mov	r2, r4
 800752c:	4616      	mov	r6, r2
 800752e:	7830      	ldrb	r0, [r6, #0]
 8007530:	3201      	adds	r2, #1
 8007532:	f7ff ffa0 	bl	8007476 <__hexdig_fun>
 8007536:	2800      	cmp	r0, #0
 8007538:	d1f8      	bne.n	800752c <__gethex+0x8c>
 800753a:	1ba4      	subs	r4, r4, r6
 800753c:	00a7      	lsls	r7, r4, #2
 800753e:	7833      	ldrb	r3, [r6, #0]
 8007540:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007544:	2b50      	cmp	r3, #80	@ 0x50
 8007546:	d13e      	bne.n	80075c6 <__gethex+0x126>
 8007548:	7873      	ldrb	r3, [r6, #1]
 800754a:	2b2b      	cmp	r3, #43	@ 0x2b
 800754c:	d033      	beq.n	80075b6 <__gethex+0x116>
 800754e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007550:	d034      	beq.n	80075bc <__gethex+0x11c>
 8007552:	2400      	movs	r4, #0
 8007554:	1c71      	adds	r1, r6, #1
 8007556:	7808      	ldrb	r0, [r1, #0]
 8007558:	f7ff ff8d 	bl	8007476 <__hexdig_fun>
 800755c:	1e43      	subs	r3, r0, #1
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b18      	cmp	r3, #24
 8007562:	d830      	bhi.n	80075c6 <__gethex+0x126>
 8007564:	f1a0 0210 	sub.w	r2, r0, #16
 8007568:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800756c:	f7ff ff83 	bl	8007476 <__hexdig_fun>
 8007570:	f100 3cff 	add.w	ip, r0, #4294967295
 8007574:	fa5f fc8c 	uxtb.w	ip, ip
 8007578:	f1bc 0f18 	cmp.w	ip, #24
 800757c:	f04f 030a 	mov.w	r3, #10
 8007580:	d91e      	bls.n	80075c0 <__gethex+0x120>
 8007582:	b104      	cbz	r4, 8007586 <__gethex+0xe6>
 8007584:	4252      	negs	r2, r2
 8007586:	4417      	add	r7, r2
 8007588:	f8ca 1000 	str.w	r1, [sl]
 800758c:	b1ed      	cbz	r5, 80075ca <__gethex+0x12a>
 800758e:	f1bb 0f00 	cmp.w	fp, #0
 8007592:	bf0c      	ite	eq
 8007594:	2506      	moveq	r5, #6
 8007596:	2500      	movne	r5, #0
 8007598:	4628      	mov	r0, r5
 800759a:	b005      	add	sp, #20
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	2500      	movs	r5, #0
 80075a2:	462c      	mov	r4, r5
 80075a4:	e7b0      	b.n	8007508 <__gethex+0x68>
 80075a6:	2c00      	cmp	r4, #0
 80075a8:	d1c7      	bne.n	800753a <__gethex+0x9a>
 80075aa:	4627      	mov	r7, r4
 80075ac:	e7c7      	b.n	800753e <__gethex+0x9e>
 80075ae:	464e      	mov	r6, r9
 80075b0:	462f      	mov	r7, r5
 80075b2:	2501      	movs	r5, #1
 80075b4:	e7c3      	b.n	800753e <__gethex+0x9e>
 80075b6:	2400      	movs	r4, #0
 80075b8:	1cb1      	adds	r1, r6, #2
 80075ba:	e7cc      	b.n	8007556 <__gethex+0xb6>
 80075bc:	2401      	movs	r4, #1
 80075be:	e7fb      	b.n	80075b8 <__gethex+0x118>
 80075c0:	fb03 0002 	mla	r0, r3, r2, r0
 80075c4:	e7ce      	b.n	8007564 <__gethex+0xc4>
 80075c6:	4631      	mov	r1, r6
 80075c8:	e7de      	b.n	8007588 <__gethex+0xe8>
 80075ca:	4629      	mov	r1, r5
 80075cc:	eba6 0309 	sub.w	r3, r6, r9
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	dc0a      	bgt.n	80075ec <__gethex+0x14c>
 80075d6:	9801      	ldr	r0, [sp, #4]
 80075d8:	f000 fafc 	bl	8007bd4 <_Balloc>
 80075dc:	4604      	mov	r4, r0
 80075de:	b940      	cbnz	r0, 80075f2 <__gethex+0x152>
 80075e0:	4602      	mov	r2, r0
 80075e2:	21e4      	movs	r1, #228	@ 0xe4
 80075e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007754 <__gethex+0x2b4>)
 80075e6:	485c      	ldr	r0, [pc, #368]	@ (8007758 <__gethex+0x2b8>)
 80075e8:	f001 f9d0 	bl	800898c <__assert_func>
 80075ec:	3101      	adds	r1, #1
 80075ee:	105b      	asrs	r3, r3, #1
 80075f0:	e7ef      	b.n	80075d2 <__gethex+0x132>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f100 0a14 	add.w	sl, r0, #20
 80075f8:	4655      	mov	r5, sl
 80075fa:	469b      	mov	fp, r3
 80075fc:	45b1      	cmp	r9, r6
 80075fe:	d337      	bcc.n	8007670 <__gethex+0x1d0>
 8007600:	f845 bb04 	str.w	fp, [r5], #4
 8007604:	eba5 050a 	sub.w	r5, r5, sl
 8007608:	10ad      	asrs	r5, r5, #2
 800760a:	6125      	str	r5, [r4, #16]
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fbd3 	bl	8007db8 <__hi0bits>
 8007612:	016d      	lsls	r5, r5, #5
 8007614:	f8d8 6000 	ldr.w	r6, [r8]
 8007618:	1a2d      	subs	r5, r5, r0
 800761a:	42b5      	cmp	r5, r6
 800761c:	dd54      	ble.n	80076c8 <__gethex+0x228>
 800761e:	1bad      	subs	r5, r5, r6
 8007620:	4629      	mov	r1, r5
 8007622:	4620      	mov	r0, r4
 8007624:	f000 ff5b 	bl	80084de <__any_on>
 8007628:	4681      	mov	r9, r0
 800762a:	b178      	cbz	r0, 800764c <__gethex+0x1ac>
 800762c:	f04f 0901 	mov.w	r9, #1
 8007630:	1e6b      	subs	r3, r5, #1
 8007632:	1159      	asrs	r1, r3, #5
 8007634:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007638:	f003 021f 	and.w	r2, r3, #31
 800763c:	fa09 f202 	lsl.w	r2, r9, r2
 8007640:	420a      	tst	r2, r1
 8007642:	d003      	beq.n	800764c <__gethex+0x1ac>
 8007644:	454b      	cmp	r3, r9
 8007646:	dc36      	bgt.n	80076b6 <__gethex+0x216>
 8007648:	f04f 0902 	mov.w	r9, #2
 800764c:	4629      	mov	r1, r5
 800764e:	4620      	mov	r0, r4
 8007650:	f7ff febe 	bl	80073d0 <rshift>
 8007654:	442f      	add	r7, r5
 8007656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800765a:	42bb      	cmp	r3, r7
 800765c:	da42      	bge.n	80076e4 <__gethex+0x244>
 800765e:	4621      	mov	r1, r4
 8007660:	9801      	ldr	r0, [sp, #4]
 8007662:	f000 faf7 	bl	8007c54 <_Bfree>
 8007666:	2300      	movs	r3, #0
 8007668:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800766a:	25a3      	movs	r5, #163	@ 0xa3
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	e793      	b.n	8007598 <__gethex+0xf8>
 8007670:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007674:	2a2e      	cmp	r2, #46	@ 0x2e
 8007676:	d012      	beq.n	800769e <__gethex+0x1fe>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d104      	bne.n	8007686 <__gethex+0x1e6>
 800767c:	f845 bb04 	str.w	fp, [r5], #4
 8007680:	f04f 0b00 	mov.w	fp, #0
 8007684:	465b      	mov	r3, fp
 8007686:	7830      	ldrb	r0, [r6, #0]
 8007688:	9303      	str	r3, [sp, #12]
 800768a:	f7ff fef4 	bl	8007476 <__hexdig_fun>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	f000 000f 	and.w	r0, r0, #15
 8007694:	4098      	lsls	r0, r3
 8007696:	ea4b 0b00 	orr.w	fp, fp, r0
 800769a:	3304      	adds	r3, #4
 800769c:	e7ae      	b.n	80075fc <__gethex+0x15c>
 800769e:	45b1      	cmp	r9, r6
 80076a0:	d8ea      	bhi.n	8007678 <__gethex+0x1d8>
 80076a2:	2201      	movs	r2, #1
 80076a4:	4630      	mov	r0, r6
 80076a6:	492a      	ldr	r1, [pc, #168]	@ (8007750 <__gethex+0x2b0>)
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	f7fe ff47 	bl	800653c <strncmp>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d1e1      	bne.n	8007678 <__gethex+0x1d8>
 80076b4:	e7a2      	b.n	80075fc <__gethex+0x15c>
 80076b6:	4620      	mov	r0, r4
 80076b8:	1ea9      	subs	r1, r5, #2
 80076ba:	f000 ff10 	bl	80084de <__any_on>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0c2      	beq.n	8007648 <__gethex+0x1a8>
 80076c2:	f04f 0903 	mov.w	r9, #3
 80076c6:	e7c1      	b.n	800764c <__gethex+0x1ac>
 80076c8:	da09      	bge.n	80076de <__gethex+0x23e>
 80076ca:	1b75      	subs	r5, r6, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	462a      	mov	r2, r5
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	f000 fcd5 	bl	8008080 <__lshift>
 80076d6:	4604      	mov	r4, r0
 80076d8:	1b7f      	subs	r7, r7, r5
 80076da:	f100 0a14 	add.w	sl, r0, #20
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	e7b8      	b.n	8007656 <__gethex+0x1b6>
 80076e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076e8:	42bd      	cmp	r5, r7
 80076ea:	dd6f      	ble.n	80077cc <__gethex+0x32c>
 80076ec:	1bed      	subs	r5, r5, r7
 80076ee:	42ae      	cmp	r6, r5
 80076f0:	dc34      	bgt.n	800775c <__gethex+0x2bc>
 80076f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d022      	beq.n	8007740 <__gethex+0x2a0>
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d024      	beq.n	8007748 <__gethex+0x2a8>
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d115      	bne.n	800772e <__gethex+0x28e>
 8007702:	42ae      	cmp	r6, r5
 8007704:	d113      	bne.n	800772e <__gethex+0x28e>
 8007706:	2e01      	cmp	r6, #1
 8007708:	d10b      	bne.n	8007722 <__gethex+0x282>
 800770a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800770e:	9a02      	ldr	r2, [sp, #8]
 8007710:	2562      	movs	r5, #98	@ 0x62
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	2301      	movs	r3, #1
 8007716:	6123      	str	r3, [r4, #16]
 8007718:	f8ca 3000 	str.w	r3, [sl]
 800771c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800771e:	601c      	str	r4, [r3, #0]
 8007720:	e73a      	b.n	8007598 <__gethex+0xf8>
 8007722:	4620      	mov	r0, r4
 8007724:	1e71      	subs	r1, r6, #1
 8007726:	f000 feda 	bl	80084de <__any_on>
 800772a:	2800      	cmp	r0, #0
 800772c:	d1ed      	bne.n	800770a <__gethex+0x26a>
 800772e:	4621      	mov	r1, r4
 8007730:	9801      	ldr	r0, [sp, #4]
 8007732:	f000 fa8f 	bl	8007c54 <_Bfree>
 8007736:	2300      	movs	r3, #0
 8007738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773a:	2550      	movs	r5, #80	@ 0x50
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	e72b      	b.n	8007598 <__gethex+0xf8>
 8007740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f3      	bne.n	800772e <__gethex+0x28e>
 8007746:	e7e0      	b.n	800770a <__gethex+0x26a>
 8007748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1dd      	bne.n	800770a <__gethex+0x26a>
 800774e:	e7ee      	b.n	800772e <__gethex+0x28e>
 8007750:	0800901e 	.word	0x0800901e
 8007754:	0800922e 	.word	0x0800922e
 8007758:	0800923f 	.word	0x0800923f
 800775c:	1e6f      	subs	r7, r5, #1
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	d130      	bne.n	80077c6 <__gethex+0x326>
 8007764:	b127      	cbz	r7, 8007770 <__gethex+0x2d0>
 8007766:	4639      	mov	r1, r7
 8007768:	4620      	mov	r0, r4
 800776a:	f000 feb8 	bl	80084de <__any_on>
 800776e:	4681      	mov	r9, r0
 8007770:	2301      	movs	r3, #1
 8007772:	4629      	mov	r1, r5
 8007774:	1b76      	subs	r6, r6, r5
 8007776:	2502      	movs	r5, #2
 8007778:	117a      	asrs	r2, r7, #5
 800777a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800777e:	f007 071f 	and.w	r7, r7, #31
 8007782:	40bb      	lsls	r3, r7
 8007784:	4213      	tst	r3, r2
 8007786:	4620      	mov	r0, r4
 8007788:	bf18      	it	ne
 800778a:	f049 0902 	orrne.w	r9, r9, #2
 800778e:	f7ff fe1f 	bl	80073d0 <rshift>
 8007792:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007796:	f1b9 0f00 	cmp.w	r9, #0
 800779a:	d047      	beq.n	800782c <__gethex+0x38c>
 800779c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d015      	beq.n	80077d0 <__gethex+0x330>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d017      	beq.n	80077d8 <__gethex+0x338>
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d109      	bne.n	80077c0 <__gethex+0x320>
 80077ac:	f019 0f02 	tst.w	r9, #2
 80077b0:	d006      	beq.n	80077c0 <__gethex+0x320>
 80077b2:	f8da 3000 	ldr.w	r3, [sl]
 80077b6:	ea49 0903 	orr.w	r9, r9, r3
 80077ba:	f019 0f01 	tst.w	r9, #1
 80077be:	d10e      	bne.n	80077de <__gethex+0x33e>
 80077c0:	f045 0510 	orr.w	r5, r5, #16
 80077c4:	e032      	b.n	800782c <__gethex+0x38c>
 80077c6:	f04f 0901 	mov.w	r9, #1
 80077ca:	e7d1      	b.n	8007770 <__gethex+0x2d0>
 80077cc:	2501      	movs	r5, #1
 80077ce:	e7e2      	b.n	8007796 <__gethex+0x2f6>
 80077d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d2:	f1c3 0301 	rsb	r3, r3, #1
 80077d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f0      	beq.n	80077c0 <__gethex+0x320>
 80077de:	f04f 0c00 	mov.w	ip, #0
 80077e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077e6:	f104 0314 	add.w	r3, r4, #20
 80077ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077fc:	d01b      	beq.n	8007836 <__gethex+0x396>
 80077fe:	3201      	adds	r2, #1
 8007800:	6002      	str	r2, [r0, #0]
 8007802:	2d02      	cmp	r5, #2
 8007804:	f104 0314 	add.w	r3, r4, #20
 8007808:	d13c      	bne.n	8007884 <__gethex+0x3e4>
 800780a:	f8d8 2000 	ldr.w	r2, [r8]
 800780e:	3a01      	subs	r2, #1
 8007810:	42b2      	cmp	r2, r6
 8007812:	d109      	bne.n	8007828 <__gethex+0x388>
 8007814:	2201      	movs	r2, #1
 8007816:	1171      	asrs	r1, r6, #5
 8007818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800781c:	f006 061f 	and.w	r6, r6, #31
 8007820:	fa02 f606 	lsl.w	r6, r2, r6
 8007824:	421e      	tst	r6, r3
 8007826:	d13a      	bne.n	800789e <__gethex+0x3fe>
 8007828:	f045 0520 	orr.w	r5, r5, #32
 800782c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800782e:	601c      	str	r4, [r3, #0]
 8007830:	9b02      	ldr	r3, [sp, #8]
 8007832:	601f      	str	r7, [r3, #0]
 8007834:	e6b0      	b.n	8007598 <__gethex+0xf8>
 8007836:	4299      	cmp	r1, r3
 8007838:	f843 cc04 	str.w	ip, [r3, #-4]
 800783c:	d8d9      	bhi.n	80077f2 <__gethex+0x352>
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	459b      	cmp	fp, r3
 8007842:	db17      	blt.n	8007874 <__gethex+0x3d4>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	9801      	ldr	r0, [sp, #4]
 8007848:	3101      	adds	r1, #1
 800784a:	f000 f9c3 	bl	8007bd4 <_Balloc>
 800784e:	4681      	mov	r9, r0
 8007850:	b918      	cbnz	r0, 800785a <__gethex+0x3ba>
 8007852:	4602      	mov	r2, r0
 8007854:	2184      	movs	r1, #132	@ 0x84
 8007856:	4b19      	ldr	r3, [pc, #100]	@ (80078bc <__gethex+0x41c>)
 8007858:	e6c5      	b.n	80075e6 <__gethex+0x146>
 800785a:	6922      	ldr	r2, [r4, #16]
 800785c:	f104 010c 	add.w	r1, r4, #12
 8007860:	3202      	adds	r2, #2
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	300c      	adds	r0, #12
 8007866:	f7fe ff00 	bl	800666a <memcpy>
 800786a:	4621      	mov	r1, r4
 800786c:	9801      	ldr	r0, [sp, #4]
 800786e:	f000 f9f1 	bl	8007c54 <_Bfree>
 8007872:	464c      	mov	r4, r9
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	6122      	str	r2, [r4, #16]
 800787a:	2201      	movs	r2, #1
 800787c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007880:	615a      	str	r2, [r3, #20]
 8007882:	e7be      	b.n	8007802 <__gethex+0x362>
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	455a      	cmp	r2, fp
 8007888:	dd0b      	ble.n	80078a2 <__gethex+0x402>
 800788a:	2101      	movs	r1, #1
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff fd9f 	bl	80073d0 <rshift>
 8007892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007896:	3701      	adds	r7, #1
 8007898:	42bb      	cmp	r3, r7
 800789a:	f6ff aee0 	blt.w	800765e <__gethex+0x1be>
 800789e:	2501      	movs	r5, #1
 80078a0:	e7c2      	b.n	8007828 <__gethex+0x388>
 80078a2:	f016 061f 	ands.w	r6, r6, #31
 80078a6:	d0fa      	beq.n	800789e <__gethex+0x3fe>
 80078a8:	4453      	add	r3, sl
 80078aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078ae:	f000 fa83 	bl	8007db8 <__hi0bits>
 80078b2:	f1c6 0620 	rsb	r6, r6, #32
 80078b6:	42b0      	cmp	r0, r6
 80078b8:	dbe7      	blt.n	800788a <__gethex+0x3ea>
 80078ba:	e7f0      	b.n	800789e <__gethex+0x3fe>
 80078bc:	0800922e 	.word	0x0800922e

080078c0 <L_shift>:
 80078c0:	f1c2 0208 	rsb	r2, r2, #8
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	b570      	push	{r4, r5, r6, lr}
 80078c8:	f1c2 0620 	rsb	r6, r2, #32
 80078cc:	6843      	ldr	r3, [r0, #4]
 80078ce:	6804      	ldr	r4, [r0, #0]
 80078d0:	fa03 f506 	lsl.w	r5, r3, r6
 80078d4:	432c      	orrs	r4, r5
 80078d6:	40d3      	lsrs	r3, r2
 80078d8:	6004      	str	r4, [r0, #0]
 80078da:	f840 3f04 	str.w	r3, [r0, #4]!
 80078de:	4288      	cmp	r0, r1
 80078e0:	d3f4      	bcc.n	80078cc <L_shift+0xc>
 80078e2:	bd70      	pop	{r4, r5, r6, pc}

080078e4 <__match>:
 80078e4:	b530      	push	{r4, r5, lr}
 80078e6:	6803      	ldr	r3, [r0, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ee:	b914      	cbnz	r4, 80078f6 <__match+0x12>
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	2001      	movs	r0, #1
 80078f4:	bd30      	pop	{r4, r5, pc}
 80078f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80078fe:	2d19      	cmp	r5, #25
 8007900:	bf98      	it	ls
 8007902:	3220      	addls	r2, #32
 8007904:	42a2      	cmp	r2, r4
 8007906:	d0f0      	beq.n	80078ea <__match+0x6>
 8007908:	2000      	movs	r0, #0
 800790a:	e7f3      	b.n	80078f4 <__match+0x10>

0800790c <__hexnan>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	2500      	movs	r5, #0
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	4682      	mov	sl, r0
 8007916:	115e      	asrs	r6, r3, #5
 8007918:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800791c:	f013 031f 	ands.w	r3, r3, #31
 8007920:	bf18      	it	ne
 8007922:	3604      	addne	r6, #4
 8007924:	1f37      	subs	r7, r6, #4
 8007926:	4690      	mov	r8, r2
 8007928:	46b9      	mov	r9, r7
 800792a:	463c      	mov	r4, r7
 800792c:	46ab      	mov	fp, r5
 800792e:	b087      	sub	sp, #28
 8007930:	6801      	ldr	r1, [r0, #0]
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	f846 5c04 	str.w	r5, [r6, #-4]
 8007938:	9502      	str	r5, [sp, #8]
 800793a:	784a      	ldrb	r2, [r1, #1]
 800793c:	1c4b      	adds	r3, r1, #1
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	b342      	cbz	r2, 8007994 <__hexnan+0x88>
 8007942:	4610      	mov	r0, r2
 8007944:	9105      	str	r1, [sp, #20]
 8007946:	9204      	str	r2, [sp, #16]
 8007948:	f7ff fd95 	bl	8007476 <__hexdig_fun>
 800794c:	2800      	cmp	r0, #0
 800794e:	d151      	bne.n	80079f4 <__hexnan+0xe8>
 8007950:	9a04      	ldr	r2, [sp, #16]
 8007952:	9905      	ldr	r1, [sp, #20]
 8007954:	2a20      	cmp	r2, #32
 8007956:	d818      	bhi.n	800798a <__hexnan+0x7e>
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	459b      	cmp	fp, r3
 800795c:	dd13      	ble.n	8007986 <__hexnan+0x7a>
 800795e:	454c      	cmp	r4, r9
 8007960:	d206      	bcs.n	8007970 <__hexnan+0x64>
 8007962:	2d07      	cmp	r5, #7
 8007964:	dc04      	bgt.n	8007970 <__hexnan+0x64>
 8007966:	462a      	mov	r2, r5
 8007968:	4649      	mov	r1, r9
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff ffa8 	bl	80078c0 <L_shift>
 8007970:	4544      	cmp	r4, r8
 8007972:	d952      	bls.n	8007a1a <__hexnan+0x10e>
 8007974:	2300      	movs	r3, #0
 8007976:	f1a4 0904 	sub.w	r9, r4, #4
 800797a:	f844 3c04 	str.w	r3, [r4, #-4]
 800797e:	461d      	mov	r5, r3
 8007980:	464c      	mov	r4, r9
 8007982:	f8cd b008 	str.w	fp, [sp, #8]
 8007986:	9903      	ldr	r1, [sp, #12]
 8007988:	e7d7      	b.n	800793a <__hexnan+0x2e>
 800798a:	2a29      	cmp	r2, #41	@ 0x29
 800798c:	d157      	bne.n	8007a3e <__hexnan+0x132>
 800798e:	3102      	adds	r1, #2
 8007990:	f8ca 1000 	str.w	r1, [sl]
 8007994:	f1bb 0f00 	cmp.w	fp, #0
 8007998:	d051      	beq.n	8007a3e <__hexnan+0x132>
 800799a:	454c      	cmp	r4, r9
 800799c:	d206      	bcs.n	80079ac <__hexnan+0xa0>
 800799e:	2d07      	cmp	r5, #7
 80079a0:	dc04      	bgt.n	80079ac <__hexnan+0xa0>
 80079a2:	462a      	mov	r2, r5
 80079a4:	4649      	mov	r1, r9
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff ff8a 	bl	80078c0 <L_shift>
 80079ac:	4544      	cmp	r4, r8
 80079ae:	d936      	bls.n	8007a1e <__hexnan+0x112>
 80079b0:	4623      	mov	r3, r4
 80079b2:	f1a8 0204 	sub.w	r2, r8, #4
 80079b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80079ba:	429f      	cmp	r7, r3
 80079bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80079c0:	d2f9      	bcs.n	80079b6 <__hexnan+0xaa>
 80079c2:	1b3b      	subs	r3, r7, r4
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	3304      	adds	r3, #4
 80079ca:	3401      	adds	r4, #1
 80079cc:	3e03      	subs	r6, #3
 80079ce:	42b4      	cmp	r4, r6
 80079d0:	bf88      	it	hi
 80079d2:	2304      	movhi	r3, #4
 80079d4:	2200      	movs	r2, #0
 80079d6:	4443      	add	r3, r8
 80079d8:	f843 2b04 	str.w	r2, [r3], #4
 80079dc:	429f      	cmp	r7, r3
 80079de:	d2fb      	bcs.n	80079d8 <__hexnan+0xcc>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	b91b      	cbnz	r3, 80079ec <__hexnan+0xe0>
 80079e4:	4547      	cmp	r7, r8
 80079e6:	d128      	bne.n	8007a3a <__hexnan+0x12e>
 80079e8:	2301      	movs	r3, #1
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	2005      	movs	r0, #5
 80079ee:	b007      	add	sp, #28
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	3501      	adds	r5, #1
 80079f6:	2d08      	cmp	r5, #8
 80079f8:	f10b 0b01 	add.w	fp, fp, #1
 80079fc:	dd06      	ble.n	8007a0c <__hexnan+0x100>
 80079fe:	4544      	cmp	r4, r8
 8007a00:	d9c1      	bls.n	8007986 <__hexnan+0x7a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2501      	movs	r5, #1
 8007a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a0a:	3c04      	subs	r4, #4
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	f000 000f 	and.w	r0, r0, #15
 8007a12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	e7b5      	b.n	8007986 <__hexnan+0x7a>
 8007a1a:	2508      	movs	r5, #8
 8007a1c:	e7b3      	b.n	8007986 <__hexnan+0x7a>
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0dd      	beq.n	80079e0 <__hexnan+0xd4>
 8007a24:	f04f 32ff 	mov.w	r2, #4294967295
 8007a28:	f1c3 0320 	rsb	r3, r3, #32
 8007a2c:	40da      	lsrs	r2, r3
 8007a2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007a32:	4013      	ands	r3, r2
 8007a34:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a38:	e7d2      	b.n	80079e0 <__hexnan+0xd4>
 8007a3a:	3f04      	subs	r7, #4
 8007a3c:	e7d0      	b.n	80079e0 <__hexnan+0xd4>
 8007a3e:	2004      	movs	r0, #4
 8007a40:	e7d5      	b.n	80079ee <__hexnan+0xe2>
	...

08007a44 <malloc>:
 8007a44:	4b02      	ldr	r3, [pc, #8]	@ (8007a50 <malloc+0xc>)
 8007a46:	4601      	mov	r1, r0
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	f000 b825 	b.w	8007a98 <_malloc_r>
 8007a4e:	bf00      	nop
 8007a50:	20000184 	.word	0x20000184

08007a54 <sbrk_aligned>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0f      	ldr	r6, [pc, #60]	@ (8007a94 <sbrk_aligned+0x40>)
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6831      	ldr	r1, [r6, #0]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	b911      	cbnz	r1, 8007a66 <sbrk_aligned+0x12>
 8007a60:	f000 ff84 	bl	800896c <_sbrk_r>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 ff7f 	bl	800896c <_sbrk_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d103      	bne.n	8007a7a <sbrk_aligned+0x26>
 8007a72:	f04f 34ff 	mov.w	r4, #4294967295
 8007a76:	4620      	mov	r0, r4
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	1cc4      	adds	r4, r0, #3
 8007a7c:	f024 0403 	bic.w	r4, r4, #3
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d0f8      	beq.n	8007a76 <sbrk_aligned+0x22>
 8007a84:	1a21      	subs	r1, r4, r0
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 ff70 	bl	800896c <_sbrk_r>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d1f2      	bne.n	8007a76 <sbrk_aligned+0x22>
 8007a90:	e7ef      	b.n	8007a72 <sbrk_aligned+0x1e>
 8007a92:	bf00      	nop
 8007a94:	20000498 	.word	0x20000498

08007a98 <_malloc_r>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	1ccd      	adds	r5, r1, #3
 8007a9e:	f025 0503 	bic.w	r5, r5, #3
 8007aa2:	3508      	adds	r5, #8
 8007aa4:	2d0c      	cmp	r5, #12
 8007aa6:	bf38      	it	cc
 8007aa8:	250c      	movcc	r5, #12
 8007aaa:	2d00      	cmp	r5, #0
 8007aac:	4606      	mov	r6, r0
 8007aae:	db01      	blt.n	8007ab4 <_malloc_r+0x1c>
 8007ab0:	42a9      	cmp	r1, r5
 8007ab2:	d904      	bls.n	8007abe <_malloc_r+0x26>
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	6033      	str	r3, [r6, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b94 <_malloc_r+0xfc>
 8007ac2:	f000 f87b 	bl	8007bbc <__malloc_lock>
 8007ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aca:	461c      	mov	r4, r3
 8007acc:	bb44      	cbnz	r4, 8007b20 <_malloc_r+0x88>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff ffbf 	bl	8007a54 <sbrk_aligned>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	4604      	mov	r4, r0
 8007ada:	d158      	bne.n	8007b8e <_malloc_r+0xf6>
 8007adc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ae0:	4627      	mov	r7, r4
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	d143      	bne.n	8007b6e <_malloc_r+0xd6>
 8007ae6:	2c00      	cmp	r4, #0
 8007ae8:	d04b      	beq.n	8007b82 <_malloc_r+0xea>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	4639      	mov	r1, r7
 8007aee:	4630      	mov	r0, r6
 8007af0:	eb04 0903 	add.w	r9, r4, r3
 8007af4:	f000 ff3a 	bl	800896c <_sbrk_r>
 8007af8:	4581      	cmp	r9, r0
 8007afa:	d142      	bne.n	8007b82 <_malloc_r+0xea>
 8007afc:	6821      	ldr	r1, [r4, #0]
 8007afe:	4630      	mov	r0, r6
 8007b00:	1a6d      	subs	r5, r5, r1
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7ff ffa6 	bl	8007a54 <sbrk_aligned>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d03a      	beq.n	8007b82 <_malloc_r+0xea>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	442b      	add	r3, r5
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	f8d8 3000 	ldr.w	r3, [r8]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	bb62      	cbnz	r2, 8007b74 <_malloc_r+0xdc>
 8007b1a:	f8c8 7000 	str.w	r7, [r8]
 8007b1e:	e00f      	b.n	8007b40 <_malloc_r+0xa8>
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	1b52      	subs	r2, r2, r5
 8007b24:	d420      	bmi.n	8007b68 <_malloc_r+0xd0>
 8007b26:	2a0b      	cmp	r2, #11
 8007b28:	d917      	bls.n	8007b5a <_malloc_r+0xc2>
 8007b2a:	1961      	adds	r1, r4, r5
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	bf18      	it	ne
 8007b32:	6059      	strne	r1, [r3, #4]
 8007b34:	6863      	ldr	r3, [r4, #4]
 8007b36:	bf08      	it	eq
 8007b38:	f8c8 1000 	streq.w	r1, [r8]
 8007b3c:	5162      	str	r2, [r4, r5]
 8007b3e:	604b      	str	r3, [r1, #4]
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f841 	bl	8007bc8 <__malloc_unlock>
 8007b46:	f104 000b 	add.w	r0, r4, #11
 8007b4a:	1d23      	adds	r3, r4, #4
 8007b4c:	f020 0007 	bic.w	r0, r0, #7
 8007b50:	1ac2      	subs	r2, r0, r3
 8007b52:	bf1c      	itt	ne
 8007b54:	1a1b      	subne	r3, r3, r0
 8007b56:	50a3      	strne	r3, [r4, r2]
 8007b58:	e7af      	b.n	8007aba <_malloc_r+0x22>
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	bf0c      	ite	eq
 8007b60:	f8c8 2000 	streq.w	r2, [r8]
 8007b64:	605a      	strne	r2, [r3, #4]
 8007b66:	e7eb      	b.n	8007b40 <_malloc_r+0xa8>
 8007b68:	4623      	mov	r3, r4
 8007b6a:	6864      	ldr	r4, [r4, #4]
 8007b6c:	e7ae      	b.n	8007acc <_malloc_r+0x34>
 8007b6e:	463c      	mov	r4, r7
 8007b70:	687f      	ldr	r7, [r7, #4]
 8007b72:	e7b6      	b.n	8007ae2 <_malloc_r+0x4a>
 8007b74:	461a      	mov	r2, r3
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d1fb      	bne.n	8007b74 <_malloc_r+0xdc>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6053      	str	r3, [r2, #4]
 8007b80:	e7de      	b.n	8007b40 <_malloc_r+0xa8>
 8007b82:	230c      	movs	r3, #12
 8007b84:	4630      	mov	r0, r6
 8007b86:	6033      	str	r3, [r6, #0]
 8007b88:	f000 f81e 	bl	8007bc8 <__malloc_unlock>
 8007b8c:	e794      	b.n	8007ab8 <_malloc_r+0x20>
 8007b8e:	6005      	str	r5, [r0, #0]
 8007b90:	e7d6      	b.n	8007b40 <_malloc_r+0xa8>
 8007b92:	bf00      	nop
 8007b94:	2000049c 	.word	0x2000049c

08007b98 <__ascii_mbtowc>:
 8007b98:	b082      	sub	sp, #8
 8007b9a:	b901      	cbnz	r1, 8007b9e <__ascii_mbtowc+0x6>
 8007b9c:	a901      	add	r1, sp, #4
 8007b9e:	b142      	cbz	r2, 8007bb2 <__ascii_mbtowc+0x1a>
 8007ba0:	b14b      	cbz	r3, 8007bb6 <__ascii_mbtowc+0x1e>
 8007ba2:	7813      	ldrb	r3, [r2, #0]
 8007ba4:	600b      	str	r3, [r1, #0]
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	1e10      	subs	r0, r2, #0
 8007baa:	bf18      	it	ne
 8007bac:	2001      	movne	r0, #1
 8007bae:	b002      	add	sp, #8
 8007bb0:	4770      	bx	lr
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	e7fb      	b.n	8007bae <__ascii_mbtowc+0x16>
 8007bb6:	f06f 0001 	mvn.w	r0, #1
 8007bba:	e7f8      	b.n	8007bae <__ascii_mbtowc+0x16>

08007bbc <__malloc_lock>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__malloc_lock+0x8>)
 8007bbe:	f7fe bd44 	b.w	800664a <__retarget_lock_acquire_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	20000494 	.word	0x20000494

08007bc8 <__malloc_unlock>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	@ (8007bd0 <__malloc_unlock+0x8>)
 8007bca:	f7fe bd3f 	b.w	800664c <__retarget_lock_release_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20000494 	.word	0x20000494

08007bd4 <_Balloc>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	69c6      	ldr	r6, [r0, #28]
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	b976      	cbnz	r6, 8007bfc <_Balloc+0x28>
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7ff ff30 	bl	8007a44 <malloc>
 8007be4:	4602      	mov	r2, r0
 8007be6:	61e0      	str	r0, [r4, #28]
 8007be8:	b920      	cbnz	r0, 8007bf4 <_Balloc+0x20>
 8007bea:	216b      	movs	r1, #107	@ 0x6b
 8007bec:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <_Balloc+0x78>)
 8007bee:	4818      	ldr	r0, [pc, #96]	@ (8007c50 <_Balloc+0x7c>)
 8007bf0:	f000 fecc 	bl	800898c <__assert_func>
 8007bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf8:	6006      	str	r6, [r0, #0]
 8007bfa:	60c6      	str	r6, [r0, #12]
 8007bfc:	69e6      	ldr	r6, [r4, #28]
 8007bfe:	68f3      	ldr	r3, [r6, #12]
 8007c00:	b183      	cbz	r3, 8007c24 <_Balloc+0x50>
 8007c02:	69e3      	ldr	r3, [r4, #28]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c0a:	b9b8      	cbnz	r0, 8007c3c <_Balloc+0x68>
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c12:	1d72      	adds	r2, r6, #5
 8007c14:	4620      	mov	r0, r4
 8007c16:	0092      	lsls	r2, r2, #2
 8007c18:	f000 fed6 	bl	80089c8 <_calloc_r>
 8007c1c:	b160      	cbz	r0, 8007c38 <_Balloc+0x64>
 8007c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c22:	e00e      	b.n	8007c42 <_Balloc+0x6e>
 8007c24:	2221      	movs	r2, #33	@ 0x21
 8007c26:	2104      	movs	r1, #4
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fecd 	bl	80089c8 <_calloc_r>
 8007c2e:	69e3      	ldr	r3, [r4, #28]
 8007c30:	60f0      	str	r0, [r6, #12]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e4      	bne.n	8007c02 <_Balloc+0x2e>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	6802      	ldr	r2, [r0, #0]
 8007c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c42:	2300      	movs	r3, #0
 8007c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c48:	e7f7      	b.n	8007c3a <_Balloc+0x66>
 8007c4a:	bf00      	nop
 8007c4c:	080091bf 	.word	0x080091bf
 8007c50:	0800929f 	.word	0x0800929f

08007c54 <_Bfree>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	69c6      	ldr	r6, [r0, #28]
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Bfree+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff fef0 	bl	8007a44 <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	61e8      	str	r0, [r5, #28]
 8007c68:	b920      	cbnz	r0, 8007c74 <_Bfree+0x20>
 8007c6a:	218f      	movs	r1, #143	@ 0x8f
 8007c6c:	4b08      	ldr	r3, [pc, #32]	@ (8007c90 <_Bfree+0x3c>)
 8007c6e:	4809      	ldr	r0, [pc, #36]	@ (8007c94 <_Bfree+0x40>)
 8007c70:	f000 fe8c 	bl	800898c <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	b13c      	cbz	r4, 8007c8e <_Bfree+0x3a>
 8007c7e:	69eb      	ldr	r3, [r5, #28]
 8007c80:	6862      	ldr	r2, [r4, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c88:	6021      	str	r1, [r4, #0]
 8007c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	080091bf 	.word	0x080091bf
 8007c94:	0800929f 	.word	0x0800929f

08007c98 <__multadd>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	461e      	mov	r6, r3
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	690d      	ldr	r5, [r1, #16]
 8007ca6:	f101 0c14 	add.w	ip, r1, #20
 8007caa:	f8dc 3000 	ldr.w	r3, [ip]
 8007cae:	3001      	adds	r0, #1
 8007cb0:	b299      	uxth	r1, r3
 8007cb2:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb6:	0c1e      	lsrs	r6, r3, #16
 8007cb8:	0c0b      	lsrs	r3, r1, #16
 8007cba:	fb02 3306 	mla	r3, r2, r6, r3
 8007cbe:	b289      	uxth	r1, r1
 8007cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc4:	4285      	cmp	r5, r0
 8007cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cca:	f84c 1b04 	str.w	r1, [ip], #4
 8007cce:	dcec      	bgt.n	8007caa <__multadd+0x12>
 8007cd0:	b30e      	cbz	r6, 8007d16 <__multadd+0x7e>
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	42ab      	cmp	r3, r5
 8007cd6:	dc19      	bgt.n	8007d0c <__multadd+0x74>
 8007cd8:	6861      	ldr	r1, [r4, #4]
 8007cda:	4638      	mov	r0, r7
 8007cdc:	3101      	adds	r1, #1
 8007cde:	f7ff ff79 	bl	8007bd4 <_Balloc>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	b928      	cbnz	r0, 8007cf2 <__multadd+0x5a>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	21ba      	movs	r1, #186	@ 0xba
 8007cea:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <__multadd+0x84>)
 8007cec:	480c      	ldr	r0, [pc, #48]	@ (8007d20 <__multadd+0x88>)
 8007cee:	f000 fe4d 	bl	800898c <__assert_func>
 8007cf2:	6922      	ldr	r2, [r4, #16]
 8007cf4:	f104 010c 	add.w	r1, r4, #12
 8007cf8:	3202      	adds	r2, #2
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	300c      	adds	r0, #12
 8007cfe:	f7fe fcb4 	bl	800666a <memcpy>
 8007d02:	4621      	mov	r1, r4
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ffa5 	bl	8007c54 <_Bfree>
 8007d0a:	4644      	mov	r4, r8
 8007d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d10:	3501      	adds	r5, #1
 8007d12:	615e      	str	r6, [r3, #20]
 8007d14:	6125      	str	r5, [r4, #16]
 8007d16:	4620      	mov	r0, r4
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	0800922e 	.word	0x0800922e
 8007d20:	0800929f 	.word	0x0800929f

08007d24 <__s2b>:
 8007d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d28:	4615      	mov	r5, r2
 8007d2a:	2209      	movs	r2, #9
 8007d2c:	461f      	mov	r7, r3
 8007d2e:	3308      	adds	r3, #8
 8007d30:	460c      	mov	r4, r1
 8007d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d36:	4606      	mov	r6, r0
 8007d38:	2201      	movs	r2, #1
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	db09      	blt.n	8007d54 <__s2b+0x30>
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff ff47 	bl	8007bd4 <_Balloc>
 8007d46:	b940      	cbnz	r0, 8007d5a <__s2b+0x36>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	21d3      	movs	r1, #211	@ 0xd3
 8007d4c:	4b18      	ldr	r3, [pc, #96]	@ (8007db0 <__s2b+0x8c>)
 8007d4e:	4819      	ldr	r0, [pc, #100]	@ (8007db4 <__s2b+0x90>)
 8007d50:	f000 fe1c 	bl	800898c <__assert_func>
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	3101      	adds	r1, #1
 8007d58:	e7f0      	b.n	8007d3c <__s2b+0x18>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	2d09      	cmp	r5, #9
 8007d5e:	6143      	str	r3, [r0, #20]
 8007d60:	f04f 0301 	mov.w	r3, #1
 8007d64:	6103      	str	r3, [r0, #16]
 8007d66:	dd16      	ble.n	8007d96 <__s2b+0x72>
 8007d68:	f104 0909 	add.w	r9, r4, #9
 8007d6c:	46c8      	mov	r8, r9
 8007d6e:	442c      	add	r4, r5
 8007d70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d74:	4601      	mov	r1, r0
 8007d76:	220a      	movs	r2, #10
 8007d78:	4630      	mov	r0, r6
 8007d7a:	3b30      	subs	r3, #48	@ 0x30
 8007d7c:	f7ff ff8c 	bl	8007c98 <__multadd>
 8007d80:	45a0      	cmp	r8, r4
 8007d82:	d1f5      	bne.n	8007d70 <__s2b+0x4c>
 8007d84:	f1a5 0408 	sub.w	r4, r5, #8
 8007d88:	444c      	add	r4, r9
 8007d8a:	1b2d      	subs	r5, r5, r4
 8007d8c:	1963      	adds	r3, r4, r5
 8007d8e:	42bb      	cmp	r3, r7
 8007d90:	db04      	blt.n	8007d9c <__s2b+0x78>
 8007d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d96:	2509      	movs	r5, #9
 8007d98:	340a      	adds	r4, #10
 8007d9a:	e7f6      	b.n	8007d8a <__s2b+0x66>
 8007d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007da0:	4601      	mov	r1, r0
 8007da2:	220a      	movs	r2, #10
 8007da4:	4630      	mov	r0, r6
 8007da6:	3b30      	subs	r3, #48	@ 0x30
 8007da8:	f7ff ff76 	bl	8007c98 <__multadd>
 8007dac:	e7ee      	b.n	8007d8c <__s2b+0x68>
 8007dae:	bf00      	nop
 8007db0:	0800922e 	.word	0x0800922e
 8007db4:	0800929f 	.word	0x0800929f

08007db8 <__hi0bits>:
 8007db8:	4603      	mov	r3, r0
 8007dba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dbe:	bf3a      	itte	cc
 8007dc0:	0403      	lslcc	r3, r0, #16
 8007dc2:	2010      	movcc	r0, #16
 8007dc4:	2000      	movcs	r0, #0
 8007dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dca:	bf3c      	itt	cc
 8007dcc:	021b      	lslcc	r3, r3, #8
 8007dce:	3008      	addcc	r0, #8
 8007dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd4:	bf3c      	itt	cc
 8007dd6:	011b      	lslcc	r3, r3, #4
 8007dd8:	3004      	addcc	r0, #4
 8007dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dde:	bf3c      	itt	cc
 8007de0:	009b      	lslcc	r3, r3, #2
 8007de2:	3002      	addcc	r0, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	db05      	blt.n	8007df4 <__hi0bits+0x3c>
 8007de8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007dec:	f100 0001 	add.w	r0, r0, #1
 8007df0:	bf08      	it	eq
 8007df2:	2020      	moveq	r0, #32
 8007df4:	4770      	bx	lr

08007df6 <__lo0bits>:
 8007df6:	6803      	ldr	r3, [r0, #0]
 8007df8:	4602      	mov	r2, r0
 8007dfa:	f013 0007 	ands.w	r0, r3, #7
 8007dfe:	d00b      	beq.n	8007e18 <__lo0bits+0x22>
 8007e00:	07d9      	lsls	r1, r3, #31
 8007e02:	d421      	bmi.n	8007e48 <__lo0bits+0x52>
 8007e04:	0798      	lsls	r0, r3, #30
 8007e06:	bf49      	itett	mi
 8007e08:	085b      	lsrmi	r3, r3, #1
 8007e0a:	089b      	lsrpl	r3, r3, #2
 8007e0c:	2001      	movmi	r0, #1
 8007e0e:	6013      	strmi	r3, [r2, #0]
 8007e10:	bf5c      	itt	pl
 8007e12:	2002      	movpl	r0, #2
 8007e14:	6013      	strpl	r3, [r2, #0]
 8007e16:	4770      	bx	lr
 8007e18:	b299      	uxth	r1, r3
 8007e1a:	b909      	cbnz	r1, 8007e20 <__lo0bits+0x2a>
 8007e1c:	2010      	movs	r0, #16
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	b2d9      	uxtb	r1, r3
 8007e22:	b909      	cbnz	r1, 8007e28 <__lo0bits+0x32>
 8007e24:	3008      	adds	r0, #8
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	0719      	lsls	r1, r3, #28
 8007e2a:	bf04      	itt	eq
 8007e2c:	091b      	lsreq	r3, r3, #4
 8007e2e:	3004      	addeq	r0, #4
 8007e30:	0799      	lsls	r1, r3, #30
 8007e32:	bf04      	itt	eq
 8007e34:	089b      	lsreq	r3, r3, #2
 8007e36:	3002      	addeq	r0, #2
 8007e38:	07d9      	lsls	r1, r3, #31
 8007e3a:	d403      	bmi.n	8007e44 <__lo0bits+0x4e>
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	f100 0001 	add.w	r0, r0, #1
 8007e42:	d003      	beq.n	8007e4c <__lo0bits+0x56>
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	4770      	bx	lr
 8007e48:	2000      	movs	r0, #0
 8007e4a:	4770      	bx	lr
 8007e4c:	2020      	movs	r0, #32
 8007e4e:	4770      	bx	lr

08007e50 <__i2b>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	460c      	mov	r4, r1
 8007e54:	2101      	movs	r1, #1
 8007e56:	f7ff febd 	bl	8007bd4 <_Balloc>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	b928      	cbnz	r0, 8007e6a <__i2b+0x1a>
 8007e5e:	f240 1145 	movw	r1, #325	@ 0x145
 8007e62:	4b04      	ldr	r3, [pc, #16]	@ (8007e74 <__i2b+0x24>)
 8007e64:	4804      	ldr	r0, [pc, #16]	@ (8007e78 <__i2b+0x28>)
 8007e66:	f000 fd91 	bl	800898c <__assert_func>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	6144      	str	r4, [r0, #20]
 8007e6e:	6103      	str	r3, [r0, #16]
 8007e70:	bd10      	pop	{r4, pc}
 8007e72:	bf00      	nop
 8007e74:	0800922e 	.word	0x0800922e
 8007e78:	0800929f 	.word	0x0800929f

08007e7c <__multiply>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	4614      	mov	r4, r2
 8007e82:	690a      	ldr	r2, [r1, #16]
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	460f      	mov	r7, r1
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	bfa2      	ittt	ge
 8007e8c:	4623      	movge	r3, r4
 8007e8e:	460c      	movge	r4, r1
 8007e90:	461f      	movge	r7, r3
 8007e92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	6861      	ldr	r1, [r4, #4]
 8007e9e:	eb0a 0609 	add.w	r6, sl, r9
 8007ea2:	42b3      	cmp	r3, r6
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	bfb8      	it	lt
 8007ea8:	3101      	addlt	r1, #1
 8007eaa:	f7ff fe93 	bl	8007bd4 <_Balloc>
 8007eae:	b930      	cbnz	r0, 8007ebe <__multiply+0x42>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eb6:	4b43      	ldr	r3, [pc, #268]	@ (8007fc4 <__multiply+0x148>)
 8007eb8:	4843      	ldr	r0, [pc, #268]	@ (8007fc8 <__multiply+0x14c>)
 8007eba:	f000 fd67 	bl	800898c <__assert_func>
 8007ebe:	f100 0514 	add.w	r5, r0, #20
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eca:	4543      	cmp	r3, r8
 8007ecc:	d321      	bcc.n	8007f12 <__multiply+0x96>
 8007ece:	f107 0114 	add.w	r1, r7, #20
 8007ed2:	f104 0214 	add.w	r2, r4, #20
 8007ed6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007eda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ede:	9302      	str	r3, [sp, #8]
 8007ee0:	1b13      	subs	r3, r2, r4
 8007ee2:	3b15      	subs	r3, #21
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	3304      	adds	r3, #4
 8007eea:	f104 0715 	add.w	r7, r4, #21
 8007eee:	42ba      	cmp	r2, r7
 8007ef0:	bf38      	it	cc
 8007ef2:	2304      	movcc	r3, #4
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	9103      	str	r1, [sp, #12]
 8007efa:	428b      	cmp	r3, r1
 8007efc:	d80c      	bhi.n	8007f18 <__multiply+0x9c>
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	dd03      	ble.n	8007f0a <__multiply+0x8e>
 8007f02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05a      	beq.n	8007fc0 <__multiply+0x144>
 8007f0a:	6106      	str	r6, [r0, #16]
 8007f0c:	b005      	add	sp, #20
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	f843 2b04 	str.w	r2, [r3], #4
 8007f16:	e7d8      	b.n	8007eca <__multiply+0x4e>
 8007f18:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	d023      	beq.n	8007f6a <__multiply+0xee>
 8007f22:	46a9      	mov	r9, r5
 8007f24:	f04f 0c00 	mov.w	ip, #0
 8007f28:	f104 0e14 	add.w	lr, r4, #20
 8007f2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f30:	f8d9 3000 	ldr.w	r3, [r9]
 8007f34:	fa1f fb87 	uxth.w	fp, r7
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f3e:	4463      	add	r3, ip
 8007f40:	f8d9 c000 	ldr.w	ip, [r9]
 8007f44:	0c3f      	lsrs	r7, r7, #16
 8007f46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f4a:	fb0a c707 	mla	r7, sl, r7, ip
 8007f4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f58:	4572      	cmp	r2, lr
 8007f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f5e:	f849 3b04 	str.w	r3, [r9], #4
 8007f62:	d8e3      	bhi.n	8007f2c <__multiply+0xb0>
 8007f64:	9b01      	ldr	r3, [sp, #4]
 8007f66:	f845 c003 	str.w	ip, [r5, r3]
 8007f6a:	9b03      	ldr	r3, [sp, #12]
 8007f6c:	3104      	adds	r1, #4
 8007f6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f72:	f1b9 0f00 	cmp.w	r9, #0
 8007f76:	d021      	beq.n	8007fbc <__multiply+0x140>
 8007f78:	46ae      	mov	lr, r5
 8007f7a:	f04f 0a00 	mov.w	sl, #0
 8007f7e:	682b      	ldr	r3, [r5, #0]
 8007f80:	f104 0c14 	add.w	ip, r4, #20
 8007f84:	f8bc b000 	ldrh.w	fp, [ip]
 8007f88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	fb09 770b 	mla	r7, r9, fp, r7
 8007f92:	4457      	add	r7, sl
 8007f94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f98:	f84e 3b04 	str.w	r3, [lr], #4
 8007f9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fa4:	f8be 3000 	ldrh.w	r3, [lr]
 8007fa8:	4562      	cmp	r2, ip
 8007faa:	fb09 330a 	mla	r3, r9, sl, r3
 8007fae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fb6:	d8e5      	bhi.n	8007f84 <__multiply+0x108>
 8007fb8:	9f01      	ldr	r7, [sp, #4]
 8007fba:	51eb      	str	r3, [r5, r7]
 8007fbc:	3504      	adds	r5, #4
 8007fbe:	e79a      	b.n	8007ef6 <__multiply+0x7a>
 8007fc0:	3e01      	subs	r6, #1
 8007fc2:	e79c      	b.n	8007efe <__multiply+0x82>
 8007fc4:	0800922e 	.word	0x0800922e
 8007fc8:	0800929f 	.word	0x0800929f

08007fcc <__pow5mult>:
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	4615      	mov	r5, r2
 8007fd2:	f012 0203 	ands.w	r2, r2, #3
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	460e      	mov	r6, r1
 8007fda:	d007      	beq.n	8007fec <__pow5mult+0x20>
 8007fdc:	4c25      	ldr	r4, [pc, #148]	@ (8008074 <__pow5mult+0xa8>)
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fe6:	f7ff fe57 	bl	8007c98 <__multadd>
 8007fea:	4606      	mov	r6, r0
 8007fec:	10ad      	asrs	r5, r5, #2
 8007fee:	d03d      	beq.n	800806c <__pow5mult+0xa0>
 8007ff0:	69fc      	ldr	r4, [r7, #28]
 8007ff2:	b97c      	cbnz	r4, 8008014 <__pow5mult+0x48>
 8007ff4:	2010      	movs	r0, #16
 8007ff6:	f7ff fd25 	bl	8007a44 <malloc>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	61f8      	str	r0, [r7, #28]
 8007ffe:	b928      	cbnz	r0, 800800c <__pow5mult+0x40>
 8008000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008004:	4b1c      	ldr	r3, [pc, #112]	@ (8008078 <__pow5mult+0xac>)
 8008006:	481d      	ldr	r0, [pc, #116]	@ (800807c <__pow5mult+0xb0>)
 8008008:	f000 fcc0 	bl	800898c <__assert_func>
 800800c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008010:	6004      	str	r4, [r0, #0]
 8008012:	60c4      	str	r4, [r0, #12]
 8008014:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800801c:	b94c      	cbnz	r4, 8008032 <__pow5mult+0x66>
 800801e:	f240 2171 	movw	r1, #625	@ 0x271
 8008022:	4638      	mov	r0, r7
 8008024:	f7ff ff14 	bl	8007e50 <__i2b>
 8008028:	2300      	movs	r3, #0
 800802a:	4604      	mov	r4, r0
 800802c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	f04f 0900 	mov.w	r9, #0
 8008036:	07eb      	lsls	r3, r5, #31
 8008038:	d50a      	bpl.n	8008050 <__pow5mult+0x84>
 800803a:	4631      	mov	r1, r6
 800803c:	4622      	mov	r2, r4
 800803e:	4638      	mov	r0, r7
 8008040:	f7ff ff1c 	bl	8007e7c <__multiply>
 8008044:	4680      	mov	r8, r0
 8008046:	4631      	mov	r1, r6
 8008048:	4638      	mov	r0, r7
 800804a:	f7ff fe03 	bl	8007c54 <_Bfree>
 800804e:	4646      	mov	r6, r8
 8008050:	106d      	asrs	r5, r5, #1
 8008052:	d00b      	beq.n	800806c <__pow5mult+0xa0>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	b938      	cbnz	r0, 8008068 <__pow5mult+0x9c>
 8008058:	4622      	mov	r2, r4
 800805a:	4621      	mov	r1, r4
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff ff0d 	bl	8007e7c <__multiply>
 8008062:	6020      	str	r0, [r4, #0]
 8008064:	f8c0 9000 	str.w	r9, [r0]
 8008068:	4604      	mov	r4, r0
 800806a:	e7e4      	b.n	8008036 <__pow5mult+0x6a>
 800806c:	4630      	mov	r0, r6
 800806e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008072:	bf00      	nop
 8008074:	080092f8 	.word	0x080092f8
 8008078:	080091bf 	.word	0x080091bf
 800807c:	0800929f 	.word	0x0800929f

08008080 <__lshift>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	4607      	mov	r7, r0
 8008088:	4691      	mov	r9, r2
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	6849      	ldr	r1, [r1, #4]
 800808e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008098:	f108 0601 	add.w	r6, r8, #1
 800809c:	42b3      	cmp	r3, r6
 800809e:	db0b      	blt.n	80080b8 <__lshift+0x38>
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff fd97 	bl	8007bd4 <_Balloc>
 80080a6:	4605      	mov	r5, r0
 80080a8:	b948      	cbnz	r0, 80080be <__lshift+0x3e>
 80080aa:	4602      	mov	r2, r0
 80080ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080b0:	4b27      	ldr	r3, [pc, #156]	@ (8008150 <__lshift+0xd0>)
 80080b2:	4828      	ldr	r0, [pc, #160]	@ (8008154 <__lshift+0xd4>)
 80080b4:	f000 fc6a 	bl	800898c <__assert_func>
 80080b8:	3101      	adds	r1, #1
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	e7ee      	b.n	800809c <__lshift+0x1c>
 80080be:	2300      	movs	r3, #0
 80080c0:	f100 0114 	add.w	r1, r0, #20
 80080c4:	f100 0210 	add.w	r2, r0, #16
 80080c8:	4618      	mov	r0, r3
 80080ca:	4553      	cmp	r3, sl
 80080cc:	db33      	blt.n	8008136 <__lshift+0xb6>
 80080ce:	6920      	ldr	r0, [r4, #16]
 80080d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080d4:	f104 0314 	add.w	r3, r4, #20
 80080d8:	f019 091f 	ands.w	r9, r9, #31
 80080dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080e4:	d02b      	beq.n	800813e <__lshift+0xbe>
 80080e6:	468a      	mov	sl, r1
 80080e8:	2200      	movs	r2, #0
 80080ea:	f1c9 0e20 	rsb	lr, r9, #32
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	fa00 f009 	lsl.w	r0, r0, r9
 80080f4:	4310      	orrs	r0, r2
 80080f6:	f84a 0b04 	str.w	r0, [sl], #4
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	459c      	cmp	ip, r3
 8008100:	fa22 f20e 	lsr.w	r2, r2, lr
 8008104:	d8f3      	bhi.n	80080ee <__lshift+0x6e>
 8008106:	ebac 0304 	sub.w	r3, ip, r4
 800810a:	3b15      	subs	r3, #21
 800810c:	f023 0303 	bic.w	r3, r3, #3
 8008110:	3304      	adds	r3, #4
 8008112:	f104 0015 	add.w	r0, r4, #21
 8008116:	4584      	cmp	ip, r0
 8008118:	bf38      	it	cc
 800811a:	2304      	movcc	r3, #4
 800811c:	50ca      	str	r2, [r1, r3]
 800811e:	b10a      	cbz	r2, 8008124 <__lshift+0xa4>
 8008120:	f108 0602 	add.w	r6, r8, #2
 8008124:	3e01      	subs	r6, #1
 8008126:	4638      	mov	r0, r7
 8008128:	4621      	mov	r1, r4
 800812a:	612e      	str	r6, [r5, #16]
 800812c:	f7ff fd92 	bl	8007c54 <_Bfree>
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008136:	f842 0f04 	str.w	r0, [r2, #4]!
 800813a:	3301      	adds	r3, #1
 800813c:	e7c5      	b.n	80080ca <__lshift+0x4a>
 800813e:	3904      	subs	r1, #4
 8008140:	f853 2b04 	ldr.w	r2, [r3], #4
 8008144:	459c      	cmp	ip, r3
 8008146:	f841 2f04 	str.w	r2, [r1, #4]!
 800814a:	d8f9      	bhi.n	8008140 <__lshift+0xc0>
 800814c:	e7ea      	b.n	8008124 <__lshift+0xa4>
 800814e:	bf00      	nop
 8008150:	0800922e 	.word	0x0800922e
 8008154:	0800929f 	.word	0x0800929f

08008158 <__mcmp>:
 8008158:	4603      	mov	r3, r0
 800815a:	690a      	ldr	r2, [r1, #16]
 800815c:	6900      	ldr	r0, [r0, #16]
 800815e:	b530      	push	{r4, r5, lr}
 8008160:	1a80      	subs	r0, r0, r2
 8008162:	d10e      	bne.n	8008182 <__mcmp+0x2a>
 8008164:	3314      	adds	r3, #20
 8008166:	3114      	adds	r1, #20
 8008168:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800816c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008178:	4295      	cmp	r5, r2
 800817a:	d003      	beq.n	8008184 <__mcmp+0x2c>
 800817c:	d205      	bcs.n	800818a <__mcmp+0x32>
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	bd30      	pop	{r4, r5, pc}
 8008184:	42a3      	cmp	r3, r4
 8008186:	d3f3      	bcc.n	8008170 <__mcmp+0x18>
 8008188:	e7fb      	b.n	8008182 <__mcmp+0x2a>
 800818a:	2001      	movs	r0, #1
 800818c:	e7f9      	b.n	8008182 <__mcmp+0x2a>
	...

08008190 <__mdiff>:
 8008190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	4689      	mov	r9, r1
 8008196:	4606      	mov	r6, r0
 8008198:	4611      	mov	r1, r2
 800819a:	4648      	mov	r0, r9
 800819c:	4614      	mov	r4, r2
 800819e:	f7ff ffdb 	bl	8008158 <__mcmp>
 80081a2:	1e05      	subs	r5, r0, #0
 80081a4:	d112      	bne.n	80081cc <__mdiff+0x3c>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff fd13 	bl	8007bd4 <_Balloc>
 80081ae:	4602      	mov	r2, r0
 80081b0:	b928      	cbnz	r0, 80081be <__mdiff+0x2e>
 80081b2:	f240 2137 	movw	r1, #567	@ 0x237
 80081b6:	4b3e      	ldr	r3, [pc, #248]	@ (80082b0 <__mdiff+0x120>)
 80081b8:	483e      	ldr	r0, [pc, #248]	@ (80082b4 <__mdiff+0x124>)
 80081ba:	f000 fbe7 	bl	800898c <__assert_func>
 80081be:	2301      	movs	r3, #1
 80081c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081c4:	4610      	mov	r0, r2
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	bfbc      	itt	lt
 80081ce:	464b      	movlt	r3, r9
 80081d0:	46a1      	movlt	r9, r4
 80081d2:	4630      	mov	r0, r6
 80081d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081d8:	bfba      	itte	lt
 80081da:	461c      	movlt	r4, r3
 80081dc:	2501      	movlt	r5, #1
 80081de:	2500      	movge	r5, #0
 80081e0:	f7ff fcf8 	bl	8007bd4 <_Balloc>
 80081e4:	4602      	mov	r2, r0
 80081e6:	b918      	cbnz	r0, 80081f0 <__mdiff+0x60>
 80081e8:	f240 2145 	movw	r1, #581	@ 0x245
 80081ec:	4b30      	ldr	r3, [pc, #192]	@ (80082b0 <__mdiff+0x120>)
 80081ee:	e7e3      	b.n	80081b8 <__mdiff+0x28>
 80081f0:	f100 0b14 	add.w	fp, r0, #20
 80081f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081f8:	f109 0310 	add.w	r3, r9, #16
 80081fc:	60c5      	str	r5, [r0, #12]
 80081fe:	f04f 0c00 	mov.w	ip, #0
 8008202:	f109 0514 	add.w	r5, r9, #20
 8008206:	46d9      	mov	r9, fp
 8008208:	6926      	ldr	r6, [r4, #16]
 800820a:	f104 0e14 	add.w	lr, r4, #20
 800820e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008212:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800821e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008222:	b281      	uxth	r1, r0
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	fa1f f38a 	uxth.w	r3, sl
 800822a:	1a5b      	subs	r3, r3, r1
 800822c:	0c00      	lsrs	r0, r0, #16
 800822e:	4463      	add	r3, ip
 8008230:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008234:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008238:	b29b      	uxth	r3, r3
 800823a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800823e:	4576      	cmp	r6, lr
 8008240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008244:	f849 3b04 	str.w	r3, [r9], #4
 8008248:	d8e6      	bhi.n	8008218 <__mdiff+0x88>
 800824a:	1b33      	subs	r3, r6, r4
 800824c:	3b15      	subs	r3, #21
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	3415      	adds	r4, #21
 8008254:	3304      	adds	r3, #4
 8008256:	42a6      	cmp	r6, r4
 8008258:	bf38      	it	cc
 800825a:	2304      	movcc	r3, #4
 800825c:	441d      	add	r5, r3
 800825e:	445b      	add	r3, fp
 8008260:	461e      	mov	r6, r3
 8008262:	462c      	mov	r4, r5
 8008264:	4544      	cmp	r4, r8
 8008266:	d30e      	bcc.n	8008286 <__mdiff+0xf6>
 8008268:	f108 0103 	add.w	r1, r8, #3
 800826c:	1b49      	subs	r1, r1, r5
 800826e:	f021 0103 	bic.w	r1, r1, #3
 8008272:	3d03      	subs	r5, #3
 8008274:	45a8      	cmp	r8, r5
 8008276:	bf38      	it	cc
 8008278:	2100      	movcc	r1, #0
 800827a:	440b      	add	r3, r1
 800827c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008280:	b199      	cbz	r1, 80082aa <__mdiff+0x11a>
 8008282:	6117      	str	r7, [r2, #16]
 8008284:	e79e      	b.n	80081c4 <__mdiff+0x34>
 8008286:	46e6      	mov	lr, ip
 8008288:	f854 1b04 	ldr.w	r1, [r4], #4
 800828c:	fa1f fc81 	uxth.w	ip, r1
 8008290:	44f4      	add	ip, lr
 8008292:	0c08      	lsrs	r0, r1, #16
 8008294:	4471      	add	r1, lr
 8008296:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800829a:	b289      	uxth	r1, r1
 800829c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082a4:	f846 1b04 	str.w	r1, [r6], #4
 80082a8:	e7dc      	b.n	8008264 <__mdiff+0xd4>
 80082aa:	3f01      	subs	r7, #1
 80082ac:	e7e6      	b.n	800827c <__mdiff+0xec>
 80082ae:	bf00      	nop
 80082b0:	0800922e 	.word	0x0800922e
 80082b4:	0800929f 	.word	0x0800929f

080082b8 <__ulp>:
 80082b8:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <__ulp+0x3c>)
 80082ba:	400b      	ands	r3, r1
 80082bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc08      	bgt.n	80082d6 <__ulp+0x1e>
 80082c4:	425b      	negs	r3, r3
 80082c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082ce:	da04      	bge.n	80082da <__ulp+0x22>
 80082d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082d4:	4113      	asrs	r3, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	e008      	b.n	80082ec <__ulp+0x34>
 80082da:	f1a2 0314 	sub.w	r3, r2, #20
 80082de:	2b1e      	cmp	r3, #30
 80082e0:	bfd6      	itet	le
 80082e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082e6:	2201      	movgt	r2, #1
 80082e8:	40da      	lsrle	r2, r3
 80082ea:	2300      	movs	r3, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	7ff00000 	.word	0x7ff00000

080082f8 <__b2d>:
 80082f8:	6902      	ldr	r2, [r0, #16]
 80082fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fc:	f100 0614 	add.w	r6, r0, #20
 8008300:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008304:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008308:	4f1e      	ldr	r7, [pc, #120]	@ (8008384 <__b2d+0x8c>)
 800830a:	4620      	mov	r0, r4
 800830c:	f7ff fd54 	bl	8007db8 <__hi0bits>
 8008310:	4603      	mov	r3, r0
 8008312:	f1c0 0020 	rsb	r0, r0, #32
 8008316:	2b0a      	cmp	r3, #10
 8008318:	f1a2 0504 	sub.w	r5, r2, #4
 800831c:	6008      	str	r0, [r1, #0]
 800831e:	dc12      	bgt.n	8008346 <__b2d+0x4e>
 8008320:	42ae      	cmp	r6, r5
 8008322:	bf2c      	ite	cs
 8008324:	2200      	movcs	r2, #0
 8008326:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800832a:	f1c3 0c0b 	rsb	ip, r3, #11
 800832e:	3315      	adds	r3, #21
 8008330:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008334:	fa04 f303 	lsl.w	r3, r4, r3
 8008338:	fa22 f20c 	lsr.w	r2, r2, ip
 800833c:	ea4e 0107 	orr.w	r1, lr, r7
 8008340:	431a      	orrs	r2, r3
 8008342:	4610      	mov	r0, r2
 8008344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008346:	42ae      	cmp	r6, r5
 8008348:	bf36      	itet	cc
 800834a:	f1a2 0508 	subcc.w	r5, r2, #8
 800834e:	2200      	movcs	r2, #0
 8008350:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008354:	3b0b      	subs	r3, #11
 8008356:	d012      	beq.n	800837e <__b2d+0x86>
 8008358:	f1c3 0720 	rsb	r7, r3, #32
 800835c:	fa22 f107 	lsr.w	r1, r2, r7
 8008360:	409c      	lsls	r4, r3
 8008362:	430c      	orrs	r4, r1
 8008364:	42b5      	cmp	r5, r6
 8008366:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800836a:	bf94      	ite	ls
 800836c:	2400      	movls	r4, #0
 800836e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008372:	409a      	lsls	r2, r3
 8008374:	40fc      	lsrs	r4, r7
 8008376:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800837a:	4322      	orrs	r2, r4
 800837c:	e7e1      	b.n	8008342 <__b2d+0x4a>
 800837e:	ea44 0107 	orr.w	r1, r4, r7
 8008382:	e7de      	b.n	8008342 <__b2d+0x4a>
 8008384:	3ff00000 	.word	0x3ff00000

08008388 <__d2b>:
 8008388:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800838c:	2101      	movs	r1, #1
 800838e:	4690      	mov	r8, r2
 8008390:	4699      	mov	r9, r3
 8008392:	9e08      	ldr	r6, [sp, #32]
 8008394:	f7ff fc1e 	bl	8007bd4 <_Balloc>
 8008398:	4604      	mov	r4, r0
 800839a:	b930      	cbnz	r0, 80083aa <__d2b+0x22>
 800839c:	4602      	mov	r2, r0
 800839e:	f240 310f 	movw	r1, #783	@ 0x30f
 80083a2:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <__d2b+0xa8>)
 80083a4:	4823      	ldr	r0, [pc, #140]	@ (8008434 <__d2b+0xac>)
 80083a6:	f000 faf1 	bl	800898c <__assert_func>
 80083aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083b2:	b10d      	cbz	r5, 80083b8 <__d2b+0x30>
 80083b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	f1b8 0300 	subs.w	r3, r8, #0
 80083be:	d024      	beq.n	800840a <__d2b+0x82>
 80083c0:	4668      	mov	r0, sp
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	f7ff fd17 	bl	8007df6 <__lo0bits>
 80083c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083cc:	b1d8      	cbz	r0, 8008406 <__d2b+0x7e>
 80083ce:	f1c0 0320 	rsb	r3, r0, #32
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	430b      	orrs	r3, r1
 80083d8:	40c2      	lsrs	r2, r0
 80083da:	6163      	str	r3, [r4, #20]
 80083dc:	9201      	str	r2, [sp, #4]
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bf0c      	ite	eq
 80083e4:	2201      	moveq	r2, #1
 80083e6:	2202      	movne	r2, #2
 80083e8:	61a3      	str	r3, [r4, #24]
 80083ea:	6122      	str	r2, [r4, #16]
 80083ec:	b1ad      	cbz	r5, 800841a <__d2b+0x92>
 80083ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083f2:	4405      	add	r5, r0
 80083f4:	6035      	str	r5, [r6, #0]
 80083f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fc:	6018      	str	r0, [r3, #0]
 80083fe:	4620      	mov	r0, r4
 8008400:	b002      	add	sp, #8
 8008402:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008406:	6161      	str	r1, [r4, #20]
 8008408:	e7e9      	b.n	80083de <__d2b+0x56>
 800840a:	a801      	add	r0, sp, #4
 800840c:	f7ff fcf3 	bl	8007df6 <__lo0bits>
 8008410:	9b01      	ldr	r3, [sp, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	6163      	str	r3, [r4, #20]
 8008416:	3020      	adds	r0, #32
 8008418:	e7e7      	b.n	80083ea <__d2b+0x62>
 800841a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800841e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	6918      	ldr	r0, [r3, #16]
 8008426:	f7ff fcc7 	bl	8007db8 <__hi0bits>
 800842a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800842e:	e7e4      	b.n	80083fa <__d2b+0x72>
 8008430:	0800922e 	.word	0x0800922e
 8008434:	0800929f 	.word	0x0800929f

08008438 <__ratio>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b085      	sub	sp, #20
 800843e:	e9cd 1000 	strd	r1, r0, [sp]
 8008442:	a902      	add	r1, sp, #8
 8008444:	f7ff ff58 	bl	80082f8 <__b2d>
 8008448:	468b      	mov	fp, r1
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	9800      	ldr	r0, [sp, #0]
 8008450:	a903      	add	r1, sp, #12
 8008452:	f7ff ff51 	bl	80082f8 <__b2d>
 8008456:	460d      	mov	r5, r1
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	4689      	mov	r9, r1
 800845c:	6919      	ldr	r1, [r3, #16]
 800845e:	9b00      	ldr	r3, [sp, #0]
 8008460:	4604      	mov	r4, r0
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	4630      	mov	r0, r6
 8008466:	1ac9      	subs	r1, r1, r3
 8008468:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800846c:	1a9b      	subs	r3, r3, r2
 800846e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfcd      	iteet	gt
 8008476:	463a      	movgt	r2, r7
 8008478:	462a      	movle	r2, r5
 800847a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800847e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008482:	bfd8      	it	le
 8008484:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008488:	464b      	mov	r3, r9
 800848a:	4622      	mov	r2, r4
 800848c:	4659      	mov	r1, fp
 800848e:	f7f8 f94d 	bl	800072c <__aeabi_ddiv>
 8008492:	b005      	add	sp, #20
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008498 <__copybits>:
 8008498:	3901      	subs	r1, #1
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	1149      	asrs	r1, r1, #5
 800849e:	6914      	ldr	r4, [r2, #16]
 80084a0:	3101      	adds	r1, #1
 80084a2:	f102 0314 	add.w	r3, r2, #20
 80084a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084ae:	1f05      	subs	r5, r0, #4
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d30c      	bcc.n	80084ce <__copybits+0x36>
 80084b4:	1aa3      	subs	r3, r4, r2
 80084b6:	3b11      	subs	r3, #17
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3211      	adds	r2, #17
 80084be:	42a2      	cmp	r2, r4
 80084c0:	bf88      	it	hi
 80084c2:	2300      	movhi	r3, #0
 80084c4:	4418      	add	r0, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	4288      	cmp	r0, r1
 80084ca:	d305      	bcc.n	80084d8 <__copybits+0x40>
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80084d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80084d6:	e7eb      	b.n	80084b0 <__copybits+0x18>
 80084d8:	f840 3b04 	str.w	r3, [r0], #4
 80084dc:	e7f4      	b.n	80084c8 <__copybits+0x30>

080084de <__any_on>:
 80084de:	f100 0214 	add.w	r2, r0, #20
 80084e2:	6900      	ldr	r0, [r0, #16]
 80084e4:	114b      	asrs	r3, r1, #5
 80084e6:	4298      	cmp	r0, r3
 80084e8:	b510      	push	{r4, lr}
 80084ea:	db11      	blt.n	8008510 <__any_on+0x32>
 80084ec:	dd0a      	ble.n	8008504 <__any_on+0x26>
 80084ee:	f011 011f 	ands.w	r1, r1, #31
 80084f2:	d007      	beq.n	8008504 <__any_on+0x26>
 80084f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084f8:	fa24 f001 	lsr.w	r0, r4, r1
 80084fc:	fa00 f101 	lsl.w	r1, r0, r1
 8008500:	428c      	cmp	r4, r1
 8008502:	d10b      	bne.n	800851c <__any_on+0x3e>
 8008504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008508:	4293      	cmp	r3, r2
 800850a:	d803      	bhi.n	8008514 <__any_on+0x36>
 800850c:	2000      	movs	r0, #0
 800850e:	bd10      	pop	{r4, pc}
 8008510:	4603      	mov	r3, r0
 8008512:	e7f7      	b.n	8008504 <__any_on+0x26>
 8008514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008518:	2900      	cmp	r1, #0
 800851a:	d0f5      	beq.n	8008508 <__any_on+0x2a>
 800851c:	2001      	movs	r0, #1
 800851e:	e7f6      	b.n	800850e <__any_on+0x30>

08008520 <__ascii_wctomb>:
 8008520:	4603      	mov	r3, r0
 8008522:	4608      	mov	r0, r1
 8008524:	b141      	cbz	r1, 8008538 <__ascii_wctomb+0x18>
 8008526:	2aff      	cmp	r2, #255	@ 0xff
 8008528:	d904      	bls.n	8008534 <__ascii_wctomb+0x14>
 800852a:	228a      	movs	r2, #138	@ 0x8a
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	4770      	bx	lr
 8008534:	2001      	movs	r0, #1
 8008536:	700a      	strb	r2, [r1, #0]
 8008538:	4770      	bx	lr

0800853a <__ssputs_r>:
 800853a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853e:	461f      	mov	r7, r3
 8008540:	688e      	ldr	r6, [r1, #8]
 8008542:	4682      	mov	sl, r0
 8008544:	42be      	cmp	r6, r7
 8008546:	460c      	mov	r4, r1
 8008548:	4690      	mov	r8, r2
 800854a:	680b      	ldr	r3, [r1, #0]
 800854c:	d82d      	bhi.n	80085aa <__ssputs_r+0x70>
 800854e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008552:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008556:	d026      	beq.n	80085a6 <__ssputs_r+0x6c>
 8008558:	6965      	ldr	r5, [r4, #20]
 800855a:	6909      	ldr	r1, [r1, #16]
 800855c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008560:	eba3 0901 	sub.w	r9, r3, r1
 8008564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008568:	1c7b      	adds	r3, r7, #1
 800856a:	444b      	add	r3, r9
 800856c:	106d      	asrs	r5, r5, #1
 800856e:	429d      	cmp	r5, r3
 8008570:	bf38      	it	cc
 8008572:	461d      	movcc	r5, r3
 8008574:	0553      	lsls	r3, r2, #21
 8008576:	d527      	bpl.n	80085c8 <__ssputs_r+0x8e>
 8008578:	4629      	mov	r1, r5
 800857a:	f7ff fa8d 	bl	8007a98 <_malloc_r>
 800857e:	4606      	mov	r6, r0
 8008580:	b360      	cbz	r0, 80085dc <__ssputs_r+0xa2>
 8008582:	464a      	mov	r2, r9
 8008584:	6921      	ldr	r1, [r4, #16]
 8008586:	f7fe f870 	bl	800666a <memcpy>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	6126      	str	r6, [r4, #16]
 8008598:	444e      	add	r6, r9
 800859a:	6026      	str	r6, [r4, #0]
 800859c:	463e      	mov	r6, r7
 800859e:	6165      	str	r5, [r4, #20]
 80085a0:	eba5 0509 	sub.w	r5, r5, r9
 80085a4:	60a5      	str	r5, [r4, #8]
 80085a6:	42be      	cmp	r6, r7
 80085a8:	d900      	bls.n	80085ac <__ssputs_r+0x72>
 80085aa:	463e      	mov	r6, r7
 80085ac:	4632      	mov	r2, r6
 80085ae:	4641      	mov	r1, r8
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	f000 f9c1 	bl	8008938 <memmove>
 80085b6:	2000      	movs	r0, #0
 80085b8:	68a3      	ldr	r3, [r4, #8]
 80085ba:	1b9b      	subs	r3, r3, r6
 80085bc:	60a3      	str	r3, [r4, #8]
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	4433      	add	r3, r6
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	462a      	mov	r2, r5
 80085ca:	f000 fa11 	bl	80089f0 <_realloc_r>
 80085ce:	4606      	mov	r6, r0
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d1e0      	bne.n	8008596 <__ssputs_r+0x5c>
 80085d4:	4650      	mov	r0, sl
 80085d6:	6921      	ldr	r1, [r4, #16]
 80085d8:	f7fe feb2 	bl	8007340 <_free_r>
 80085dc:	230c      	movs	r3, #12
 80085de:	f8ca 3000 	str.w	r3, [sl]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	e7e9      	b.n	80085c4 <__ssputs_r+0x8a>

080085f0 <_svfiprintf_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	4698      	mov	r8, r3
 80085f6:	898b      	ldrh	r3, [r1, #12]
 80085f8:	4607      	mov	r7, r0
 80085fa:	061b      	lsls	r3, r3, #24
 80085fc:	460d      	mov	r5, r1
 80085fe:	4614      	mov	r4, r2
 8008600:	b09d      	sub	sp, #116	@ 0x74
 8008602:	d510      	bpl.n	8008626 <_svfiprintf_r+0x36>
 8008604:	690b      	ldr	r3, [r1, #16]
 8008606:	b973      	cbnz	r3, 8008626 <_svfiprintf_r+0x36>
 8008608:	2140      	movs	r1, #64	@ 0x40
 800860a:	f7ff fa45 	bl	8007a98 <_malloc_r>
 800860e:	6028      	str	r0, [r5, #0]
 8008610:	6128      	str	r0, [r5, #16]
 8008612:	b930      	cbnz	r0, 8008622 <_svfiprintf_r+0x32>
 8008614:	230c      	movs	r3, #12
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	b01d      	add	sp, #116	@ 0x74
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	2340      	movs	r3, #64	@ 0x40
 8008624:	616b      	str	r3, [r5, #20]
 8008626:	2300      	movs	r3, #0
 8008628:	9309      	str	r3, [sp, #36]	@ 0x24
 800862a:	2320      	movs	r3, #32
 800862c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008630:	2330      	movs	r3, #48	@ 0x30
 8008632:	f04f 0901 	mov.w	r9, #1
 8008636:	f8cd 800c 	str.w	r8, [sp, #12]
 800863a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80087d4 <_svfiprintf_r+0x1e4>
 800863e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008642:	4623      	mov	r3, r4
 8008644:	469a      	mov	sl, r3
 8008646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864a:	b10a      	cbz	r2, 8008650 <_svfiprintf_r+0x60>
 800864c:	2a25      	cmp	r2, #37	@ 0x25
 800864e:	d1f9      	bne.n	8008644 <_svfiprintf_r+0x54>
 8008650:	ebba 0b04 	subs.w	fp, sl, r4
 8008654:	d00b      	beq.n	800866e <_svfiprintf_r+0x7e>
 8008656:	465b      	mov	r3, fp
 8008658:	4622      	mov	r2, r4
 800865a:	4629      	mov	r1, r5
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff ff6c 	bl	800853a <__ssputs_r>
 8008662:	3001      	adds	r0, #1
 8008664:	f000 80a7 	beq.w	80087b6 <_svfiprintf_r+0x1c6>
 8008668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800866a:	445a      	add	r2, fp
 800866c:	9209      	str	r2, [sp, #36]	@ 0x24
 800866e:	f89a 3000 	ldrb.w	r3, [sl]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 809f 	beq.w	80087b6 <_svfiprintf_r+0x1c6>
 8008678:	2300      	movs	r3, #0
 800867a:	f04f 32ff 	mov.w	r2, #4294967295
 800867e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008682:	f10a 0a01 	add.w	sl, sl, #1
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	9307      	str	r3, [sp, #28]
 800868a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800868e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008690:	4654      	mov	r4, sl
 8008692:	2205      	movs	r2, #5
 8008694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008698:	484e      	ldr	r0, [pc, #312]	@ (80087d4 <_svfiprintf_r+0x1e4>)
 800869a:	f7fd ffd8 	bl	800664e <memchr>
 800869e:	9a04      	ldr	r2, [sp, #16]
 80086a0:	b9d8      	cbnz	r0, 80086da <_svfiprintf_r+0xea>
 80086a2:	06d0      	lsls	r0, r2, #27
 80086a4:	bf44      	itt	mi
 80086a6:	2320      	movmi	r3, #32
 80086a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ac:	0711      	lsls	r1, r2, #28
 80086ae:	bf44      	itt	mi
 80086b0:	232b      	movmi	r3, #43	@ 0x2b
 80086b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80086bc:	d015      	beq.n	80086ea <_svfiprintf_r+0xfa>
 80086be:	4654      	mov	r4, sl
 80086c0:	2000      	movs	r0, #0
 80086c2:	f04f 0c0a 	mov.w	ip, #10
 80086c6:	9a07      	ldr	r2, [sp, #28]
 80086c8:	4621      	mov	r1, r4
 80086ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ce:	3b30      	subs	r3, #48	@ 0x30
 80086d0:	2b09      	cmp	r3, #9
 80086d2:	d94b      	bls.n	800876c <_svfiprintf_r+0x17c>
 80086d4:	b1b0      	cbz	r0, 8008704 <_svfiprintf_r+0x114>
 80086d6:	9207      	str	r2, [sp, #28]
 80086d8:	e014      	b.n	8008704 <_svfiprintf_r+0x114>
 80086da:	eba0 0308 	sub.w	r3, r0, r8
 80086de:	fa09 f303 	lsl.w	r3, r9, r3
 80086e2:	4313      	orrs	r3, r2
 80086e4:	46a2      	mov	sl, r4
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	e7d2      	b.n	8008690 <_svfiprintf_r+0xa0>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	1d19      	adds	r1, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	9103      	str	r1, [sp, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfbb      	ittet	lt
 80086f6:	425b      	neglt	r3, r3
 80086f8:	f042 0202 	orrlt.w	r2, r2, #2
 80086fc:	9307      	strge	r3, [sp, #28]
 80086fe:	9307      	strlt	r3, [sp, #28]
 8008700:	bfb8      	it	lt
 8008702:	9204      	strlt	r2, [sp, #16]
 8008704:	7823      	ldrb	r3, [r4, #0]
 8008706:	2b2e      	cmp	r3, #46	@ 0x2e
 8008708:	d10a      	bne.n	8008720 <_svfiprintf_r+0x130>
 800870a:	7863      	ldrb	r3, [r4, #1]
 800870c:	2b2a      	cmp	r3, #42	@ 0x2a
 800870e:	d132      	bne.n	8008776 <_svfiprintf_r+0x186>
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	3402      	adds	r4, #2
 8008714:	1d1a      	adds	r2, r3, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	9203      	str	r2, [sp, #12]
 800871a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80087d8 <_svfiprintf_r+0x1e8>
 8008724:	2203      	movs	r2, #3
 8008726:	4650      	mov	r0, sl
 8008728:	7821      	ldrb	r1, [r4, #0]
 800872a:	f7fd ff90 	bl	800664e <memchr>
 800872e:	b138      	cbz	r0, 8008740 <_svfiprintf_r+0x150>
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	9b04      	ldr	r3, [sp, #16]
 8008734:	eba0 000a 	sub.w	r0, r0, sl
 8008738:	4082      	lsls	r2, r0
 800873a:	4313      	orrs	r3, r2
 800873c:	3401      	adds	r4, #1
 800873e:	9304      	str	r3, [sp, #16]
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	2206      	movs	r2, #6
 8008746:	4825      	ldr	r0, [pc, #148]	@ (80087dc <_svfiprintf_r+0x1ec>)
 8008748:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800874c:	f7fd ff7f 	bl	800664e <memchr>
 8008750:	2800      	cmp	r0, #0
 8008752:	d036      	beq.n	80087c2 <_svfiprintf_r+0x1d2>
 8008754:	4b22      	ldr	r3, [pc, #136]	@ (80087e0 <_svfiprintf_r+0x1f0>)
 8008756:	bb1b      	cbnz	r3, 80087a0 <_svfiprintf_r+0x1b0>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	3307      	adds	r3, #7
 800875c:	f023 0307 	bic.w	r3, r3, #7
 8008760:	3308      	adds	r3, #8
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008766:	4433      	add	r3, r6
 8008768:	9309      	str	r3, [sp, #36]	@ 0x24
 800876a:	e76a      	b.n	8008642 <_svfiprintf_r+0x52>
 800876c:	460c      	mov	r4, r1
 800876e:	2001      	movs	r0, #1
 8008770:	fb0c 3202 	mla	r2, ip, r2, r3
 8008774:	e7a8      	b.n	80086c8 <_svfiprintf_r+0xd8>
 8008776:	2300      	movs	r3, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4619      	mov	r1, r3
 800877e:	3401      	adds	r4, #1
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	4620      	mov	r0, r4
 8008784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008788:	3a30      	subs	r2, #48	@ 0x30
 800878a:	2a09      	cmp	r2, #9
 800878c:	d903      	bls.n	8008796 <_svfiprintf_r+0x1a6>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0c6      	beq.n	8008720 <_svfiprintf_r+0x130>
 8008792:	9105      	str	r1, [sp, #20]
 8008794:	e7c4      	b.n	8008720 <_svfiprintf_r+0x130>
 8008796:	4604      	mov	r4, r0
 8008798:	2301      	movs	r3, #1
 800879a:	fb0c 2101 	mla	r1, ip, r1, r2
 800879e:	e7f0      	b.n	8008782 <_svfiprintf_r+0x192>
 80087a0:	ab03      	add	r3, sp, #12
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	462a      	mov	r2, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <_svfiprintf_r+0x1f4>)
 80087aa:	a904      	add	r1, sp, #16
 80087ac:	f7fc ffbe 	bl	800572c <_printf_float>
 80087b0:	1c42      	adds	r2, r0, #1
 80087b2:	4606      	mov	r6, r0
 80087b4:	d1d6      	bne.n	8008764 <_svfiprintf_r+0x174>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	065b      	lsls	r3, r3, #25
 80087ba:	f53f af2d 	bmi.w	8008618 <_svfiprintf_r+0x28>
 80087be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c0:	e72c      	b.n	800861c <_svfiprintf_r+0x2c>
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	462a      	mov	r2, r5
 80087c8:	4638      	mov	r0, r7
 80087ca:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <_svfiprintf_r+0x1f4>)
 80087cc:	a904      	add	r1, sp, #16
 80087ce:	f7fd fa4b 	bl	8005c68 <_printf_i>
 80087d2:	e7ed      	b.n	80087b0 <_svfiprintf_r+0x1c0>
 80087d4:	080093f8 	.word	0x080093f8
 80087d8:	080093fe 	.word	0x080093fe
 80087dc:	08009402 	.word	0x08009402
 80087e0:	0800572d 	.word	0x0800572d
 80087e4:	0800853b 	.word	0x0800853b

080087e8 <__sflush_r>:
 80087e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	0716      	lsls	r6, r2, #28
 80087f0:	4605      	mov	r5, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	d454      	bmi.n	80088a0 <__sflush_r+0xb8>
 80087f6:	684b      	ldr	r3, [r1, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dc02      	bgt.n	8008802 <__sflush_r+0x1a>
 80087fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd48      	ble.n	8008894 <__sflush_r+0xac>
 8008802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008804:	2e00      	cmp	r6, #0
 8008806:	d045      	beq.n	8008894 <__sflush_r+0xac>
 8008808:	2300      	movs	r3, #0
 800880a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800880e:	682f      	ldr	r7, [r5, #0]
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	d030      	beq.n	8008878 <__sflush_r+0x90>
 8008816:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	0759      	lsls	r1, r3, #29
 800881c:	d505      	bpl.n	800882a <__sflush_r+0x42>
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	1ad2      	subs	r2, r2, r3
 8008822:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008824:	b10b      	cbz	r3, 800882a <__sflush_r+0x42>
 8008826:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	2300      	movs	r3, #0
 800882c:	4628      	mov	r0, r5
 800882e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008830:	6a21      	ldr	r1, [r4, #32]
 8008832:	47b0      	blx	r6
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	d106      	bne.n	8008848 <__sflush_r+0x60>
 800883a:	6829      	ldr	r1, [r5, #0]
 800883c:	291d      	cmp	r1, #29
 800883e:	d82b      	bhi.n	8008898 <__sflush_r+0xb0>
 8008840:	4a28      	ldr	r2, [pc, #160]	@ (80088e4 <__sflush_r+0xfc>)
 8008842:	410a      	asrs	r2, r1
 8008844:	07d6      	lsls	r6, r2, #31
 8008846:	d427      	bmi.n	8008898 <__sflush_r+0xb0>
 8008848:	2200      	movs	r2, #0
 800884a:	6062      	str	r2, [r4, #4]
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	04d9      	lsls	r1, r3, #19
 8008850:	6022      	str	r2, [r4, #0]
 8008852:	d504      	bpl.n	800885e <__sflush_r+0x76>
 8008854:	1c42      	adds	r2, r0, #1
 8008856:	d101      	bne.n	800885c <__sflush_r+0x74>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b903      	cbnz	r3, 800885e <__sflush_r+0x76>
 800885c:	6560      	str	r0, [r4, #84]	@ 0x54
 800885e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008860:	602f      	str	r7, [r5, #0]
 8008862:	b1b9      	cbz	r1, 8008894 <__sflush_r+0xac>
 8008864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__sflush_r+0x8a>
 800886c:	4628      	mov	r0, r5
 800886e:	f7fe fd67 	bl	8007340 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	@ 0x34
 8008876:	e00d      	b.n	8008894 <__sflush_r+0xac>
 8008878:	2301      	movs	r3, #1
 800887a:	4628      	mov	r0, r5
 800887c:	47b0      	blx	r6
 800887e:	4602      	mov	r2, r0
 8008880:	1c50      	adds	r0, r2, #1
 8008882:	d1c9      	bne.n	8008818 <__sflush_r+0x30>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0c6      	beq.n	8008818 <__sflush_r+0x30>
 800888a:	2b1d      	cmp	r3, #29
 800888c:	d001      	beq.n	8008892 <__sflush_r+0xaa>
 800888e:	2b16      	cmp	r3, #22
 8008890:	d11d      	bne.n	80088ce <__sflush_r+0xe6>
 8008892:	602f      	str	r7, [r5, #0]
 8008894:	2000      	movs	r0, #0
 8008896:	e021      	b.n	80088dc <__sflush_r+0xf4>
 8008898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800889c:	b21b      	sxth	r3, r3
 800889e:	e01a      	b.n	80088d6 <__sflush_r+0xee>
 80088a0:	690f      	ldr	r7, [r1, #16]
 80088a2:	2f00      	cmp	r7, #0
 80088a4:	d0f6      	beq.n	8008894 <__sflush_r+0xac>
 80088a6:	0793      	lsls	r3, r2, #30
 80088a8:	bf18      	it	ne
 80088aa:	2300      	movne	r3, #0
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	bf08      	it	eq
 80088b0:	694b      	ldreq	r3, [r1, #20]
 80088b2:	1bf6      	subs	r6, r6, r7
 80088b4:	600f      	str	r7, [r1, #0]
 80088b6:	608b      	str	r3, [r1, #8]
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	ddeb      	ble.n	8008894 <__sflush_r+0xac>
 80088bc:	4633      	mov	r3, r6
 80088be:	463a      	mov	r2, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	6a21      	ldr	r1, [r4, #32]
 80088c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80088c8:	47e0      	blx	ip
 80088ca:	2800      	cmp	r0, #0
 80088cc:	dc07      	bgt.n	80088de <__sflush_r+0xf6>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088de:	4407      	add	r7, r0
 80088e0:	1a36      	subs	r6, r6, r0
 80088e2:	e7e9      	b.n	80088b8 <__sflush_r+0xd0>
 80088e4:	dfbffffe 	.word	0xdfbffffe

080088e8 <_fflush_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	690b      	ldr	r3, [r1, #16]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b913      	cbnz	r3, 80088f8 <_fflush_r+0x10>
 80088f2:	2500      	movs	r5, #0
 80088f4:	4628      	mov	r0, r5
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	b118      	cbz	r0, 8008902 <_fflush_r+0x1a>
 80088fa:	6a03      	ldr	r3, [r0, #32]
 80088fc:	b90b      	cbnz	r3, 8008902 <_fflush_r+0x1a>
 80088fe:	f7fd fd6f 	bl	80063e0 <__sinit>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f3      	beq.n	80088f2 <_fflush_r+0xa>
 800890a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d404      	bmi.n	800891a <_fflush_r+0x32>
 8008910:	0599      	lsls	r1, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x32>
 8008914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008916:	f7fd fe98 	bl	800664a <__retarget_lock_acquire_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7ff ff63 	bl	80087e8 <__sflush_r>
 8008922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008924:	4605      	mov	r5, r0
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d4e4      	bmi.n	80088f4 <_fflush_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d4e1      	bmi.n	80088f4 <_fflush_r+0xc>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f7fd fe8b 	bl	800664c <__retarget_lock_release_recursive>
 8008936:	e7dd      	b.n	80088f4 <_fflush_r+0xc>

08008938 <memmove>:
 8008938:	4288      	cmp	r0, r1
 800893a:	b510      	push	{r4, lr}
 800893c:	eb01 0402 	add.w	r4, r1, r2
 8008940:	d902      	bls.n	8008948 <memmove+0x10>
 8008942:	4284      	cmp	r4, r0
 8008944:	4623      	mov	r3, r4
 8008946:	d807      	bhi.n	8008958 <memmove+0x20>
 8008948:	1e43      	subs	r3, r0, #1
 800894a:	42a1      	cmp	r1, r4
 800894c:	d008      	beq.n	8008960 <memmove+0x28>
 800894e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008956:	e7f8      	b.n	800894a <memmove+0x12>
 8008958:	4601      	mov	r1, r0
 800895a:	4402      	add	r2, r0
 800895c:	428a      	cmp	r2, r1
 800895e:	d100      	bne.n	8008962 <memmove+0x2a>
 8008960:	bd10      	pop	{r4, pc}
 8008962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800896a:	e7f7      	b.n	800895c <memmove+0x24>

0800896c <_sbrk_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	2300      	movs	r3, #0
 8008970:	4d05      	ldr	r5, [pc, #20]	@ (8008988 <_sbrk_r+0x1c>)
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7f8 fea4 	bl	80016c4 <_sbrk>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_sbrk_r+0x1a>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_sbrk_r+0x1a>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000490 	.word	0x20000490

0800898c <__assert_func>:
 800898c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800898e:	4614      	mov	r4, r2
 8008990:	461a      	mov	r2, r3
 8008992:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <__assert_func+0x2c>)
 8008994:	4605      	mov	r5, r0
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68d8      	ldr	r0, [r3, #12]
 800899a:	b954      	cbnz	r4, 80089b2 <__assert_func+0x26>
 800899c:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <__assert_func+0x30>)
 800899e:	461c      	mov	r4, r3
 80089a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089a4:	9100      	str	r1, [sp, #0]
 80089a6:	462b      	mov	r3, r5
 80089a8:	4905      	ldr	r1, [pc, #20]	@ (80089c0 <__assert_func+0x34>)
 80089aa:	f000 f84f 	bl	8008a4c <fiprintf>
 80089ae:	f000 f85f 	bl	8008a70 <abort>
 80089b2:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <__assert_func+0x38>)
 80089b4:	e7f4      	b.n	80089a0 <__assert_func+0x14>
 80089b6:	bf00      	nop
 80089b8:	20000184 	.word	0x20000184
 80089bc:	08009444 	.word	0x08009444
 80089c0:	08009416 	.word	0x08009416
 80089c4:	08009409 	.word	0x08009409

080089c8 <_calloc_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	fba1 5402 	umull	r5, r4, r1, r2
 80089ce:	b93c      	cbnz	r4, 80089e0 <_calloc_r+0x18>
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7ff f861 	bl	8007a98 <_malloc_r>
 80089d6:	4606      	mov	r6, r0
 80089d8:	b928      	cbnz	r0, 80089e6 <_calloc_r+0x1e>
 80089da:	2600      	movs	r6, #0
 80089dc:	4630      	mov	r0, r6
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	220c      	movs	r2, #12
 80089e2:	6002      	str	r2, [r0, #0]
 80089e4:	e7f9      	b.n	80089da <_calloc_r+0x12>
 80089e6:	462a      	mov	r2, r5
 80089e8:	4621      	mov	r1, r4
 80089ea:	f7fd fd92 	bl	8006512 <memset>
 80089ee:	e7f5      	b.n	80089dc <_calloc_r+0x14>

080089f0 <_realloc_r>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4680      	mov	r8, r0
 80089f6:	4615      	mov	r5, r2
 80089f8:	460c      	mov	r4, r1
 80089fa:	b921      	cbnz	r1, 8008a06 <_realloc_r+0x16>
 80089fc:	4611      	mov	r1, r2
 80089fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a02:	f7ff b849 	b.w	8007a98 <_malloc_r>
 8008a06:	b92a      	cbnz	r2, 8008a14 <_realloc_r+0x24>
 8008a08:	f7fe fc9a 	bl	8007340 <_free_r>
 8008a0c:	2400      	movs	r4, #0
 8008a0e:	4620      	mov	r0, r4
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	f000 f833 	bl	8008a7e <_malloc_usable_size_r>
 8008a18:	4285      	cmp	r5, r0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	d802      	bhi.n	8008a24 <_realloc_r+0x34>
 8008a1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a22:	d8f4      	bhi.n	8008a0e <_realloc_r+0x1e>
 8008a24:	4629      	mov	r1, r5
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7ff f836 	bl	8007a98 <_malloc_r>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0ec      	beq.n	8008a0c <_realloc_r+0x1c>
 8008a32:	42b5      	cmp	r5, r6
 8008a34:	462a      	mov	r2, r5
 8008a36:	4621      	mov	r1, r4
 8008a38:	bf28      	it	cs
 8008a3a:	4632      	movcs	r2, r6
 8008a3c:	f7fd fe15 	bl	800666a <memcpy>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7fe fc7c 	bl	8007340 <_free_r>
 8008a48:	463c      	mov	r4, r7
 8008a4a:	e7e0      	b.n	8008a0e <_realloc_r+0x1e>

08008a4c <fiprintf>:
 8008a4c:	b40e      	push	{r1, r2, r3}
 8008a4e:	b503      	push	{r0, r1, lr}
 8008a50:	4601      	mov	r1, r0
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	4805      	ldr	r0, [pc, #20]	@ (8008a6c <fiprintf+0x20>)
 8008a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	f000 f83d 	bl	8008adc <_vfiprintf_r>
 8008a62:	b002      	add	sp, #8
 8008a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a68:	b003      	add	sp, #12
 8008a6a:	4770      	bx	lr
 8008a6c:	20000184 	.word	0x20000184

08008a70 <abort>:
 8008a70:	2006      	movs	r0, #6
 8008a72:	b508      	push	{r3, lr}
 8008a74:	f000 fa06 	bl	8008e84 <raise>
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f7f8 fdae 	bl	80015da <_exit>

08008a7e <_malloc_usable_size_r>:
 8008a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a82:	1f18      	subs	r0, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bfbc      	itt	lt
 8008a88:	580b      	ldrlt	r3, [r1, r0]
 8008a8a:	18c0      	addlt	r0, r0, r3
 8008a8c:	4770      	bx	lr

08008a8e <__sfputc_r>:
 8008a8e:	6893      	ldr	r3, [r2, #8]
 8008a90:	b410      	push	{r4}
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	6093      	str	r3, [r2, #8]
 8008a98:	da07      	bge.n	8008aaa <__sfputc_r+0x1c>
 8008a9a:	6994      	ldr	r4, [r2, #24]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	db01      	blt.n	8008aa4 <__sfputc_r+0x16>
 8008aa0:	290a      	cmp	r1, #10
 8008aa2:	d102      	bne.n	8008aaa <__sfputc_r+0x1c>
 8008aa4:	bc10      	pop	{r4}
 8008aa6:	f000 b931 	b.w	8008d0c <__swbuf_r>
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	1c58      	adds	r0, r3, #1
 8008aae:	6010      	str	r0, [r2, #0]
 8008ab0:	7019      	strb	r1, [r3, #0]
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	bc10      	pop	{r4}
 8008ab6:	4770      	bx	lr

08008ab8 <__sfputs_r>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	4614      	mov	r4, r2
 8008ac0:	18d5      	adds	r5, r2, r3
 8008ac2:	42ac      	cmp	r4, r5
 8008ac4:	d101      	bne.n	8008aca <__sfputs_r+0x12>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e007      	b.n	8008ada <__sfputs_r+0x22>
 8008aca:	463a      	mov	r2, r7
 8008acc:	4630      	mov	r0, r6
 8008ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad2:	f7ff ffdc 	bl	8008a8e <__sfputc_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d1f3      	bne.n	8008ac2 <__sfputs_r+0xa>
 8008ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008adc <_vfiprintf_r>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4614      	mov	r4, r2
 8008ae4:	4698      	mov	r8, r3
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	b09d      	sub	sp, #116	@ 0x74
 8008aea:	b118      	cbz	r0, 8008af4 <_vfiprintf_r+0x18>
 8008aec:	6a03      	ldr	r3, [r0, #32]
 8008aee:	b90b      	cbnz	r3, 8008af4 <_vfiprintf_r+0x18>
 8008af0:	f7fd fc76 	bl	80063e0 <__sinit>
 8008af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008af6:	07d9      	lsls	r1, r3, #31
 8008af8:	d405      	bmi.n	8008b06 <_vfiprintf_r+0x2a>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	059a      	lsls	r2, r3, #22
 8008afe:	d402      	bmi.n	8008b06 <_vfiprintf_r+0x2a>
 8008b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b02:	f7fd fda2 	bl	800664a <__retarget_lock_acquire_recursive>
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	d501      	bpl.n	8008b10 <_vfiprintf_r+0x34>
 8008b0c:	692b      	ldr	r3, [r5, #16]
 8008b0e:	b99b      	cbnz	r3, 8008b38 <_vfiprintf_r+0x5c>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4630      	mov	r0, r6
 8008b14:	f000 f938 	bl	8008d88 <__swsetup_r>
 8008b18:	b170      	cbz	r0, 8008b38 <_vfiprintf_r+0x5c>
 8008b1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1c:	07dc      	lsls	r4, r3, #31
 8008b1e:	d504      	bpl.n	8008b2a <_vfiprintf_r+0x4e>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	b01d      	add	sp, #116	@ 0x74
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	0598      	lsls	r0, r3, #22
 8008b2e:	d4f7      	bmi.n	8008b20 <_vfiprintf_r+0x44>
 8008b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b32:	f7fd fd8b 	bl	800664c <__retarget_lock_release_recursive>
 8008b36:	e7f3      	b.n	8008b20 <_vfiprintf_r+0x44>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b42:	2330      	movs	r3, #48	@ 0x30
 8008b44:	f04f 0901 	mov.w	r9, #1
 8008b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008cf8 <_vfiprintf_r+0x21c>
 8008b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b54:	4623      	mov	r3, r4
 8008b56:	469a      	mov	sl, r3
 8008b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5c:	b10a      	cbz	r2, 8008b62 <_vfiprintf_r+0x86>
 8008b5e:	2a25      	cmp	r2, #37	@ 0x25
 8008b60:	d1f9      	bne.n	8008b56 <_vfiprintf_r+0x7a>
 8008b62:	ebba 0b04 	subs.w	fp, sl, r4
 8008b66:	d00b      	beq.n	8008b80 <_vfiprintf_r+0xa4>
 8008b68:	465b      	mov	r3, fp
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f7ff ffa2 	bl	8008ab8 <__sfputs_r>
 8008b74:	3001      	adds	r0, #1
 8008b76:	f000 80a7 	beq.w	8008cc8 <_vfiprintf_r+0x1ec>
 8008b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b7c:	445a      	add	r2, fp
 8008b7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b80:	f89a 3000 	ldrb.w	r3, [sl]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 809f 	beq.w	8008cc8 <_vfiprintf_r+0x1ec>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b94:	f10a 0a01 	add.w	sl, sl, #1
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ba0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ba2:	4654      	mov	r4, sl
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008baa:	4853      	ldr	r0, [pc, #332]	@ (8008cf8 <_vfiprintf_r+0x21c>)
 8008bac:	f7fd fd4f 	bl	800664e <memchr>
 8008bb0:	9a04      	ldr	r2, [sp, #16]
 8008bb2:	b9d8      	cbnz	r0, 8008bec <_vfiprintf_r+0x110>
 8008bb4:	06d1      	lsls	r1, r2, #27
 8008bb6:	bf44      	itt	mi
 8008bb8:	2320      	movmi	r3, #32
 8008bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bbe:	0713      	lsls	r3, r2, #28
 8008bc0:	bf44      	itt	mi
 8008bc2:	232b      	movmi	r3, #43	@ 0x2b
 8008bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bce:	d015      	beq.n	8008bfc <_vfiprintf_r+0x120>
 8008bd0:	4654      	mov	r4, sl
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	f04f 0c0a 	mov.w	ip, #10
 8008bd8:	9a07      	ldr	r2, [sp, #28]
 8008bda:	4621      	mov	r1, r4
 8008bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008be0:	3b30      	subs	r3, #48	@ 0x30
 8008be2:	2b09      	cmp	r3, #9
 8008be4:	d94b      	bls.n	8008c7e <_vfiprintf_r+0x1a2>
 8008be6:	b1b0      	cbz	r0, 8008c16 <_vfiprintf_r+0x13a>
 8008be8:	9207      	str	r2, [sp, #28]
 8008bea:	e014      	b.n	8008c16 <_vfiprintf_r+0x13a>
 8008bec:	eba0 0308 	sub.w	r3, r0, r8
 8008bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	46a2      	mov	sl, r4
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	e7d2      	b.n	8008ba2 <_vfiprintf_r+0xc6>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	1d19      	adds	r1, r3, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	9103      	str	r1, [sp, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	bfbb      	ittet	lt
 8008c08:	425b      	neglt	r3, r3
 8008c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c0e:	9307      	strge	r3, [sp, #28]
 8008c10:	9307      	strlt	r3, [sp, #28]
 8008c12:	bfb8      	it	lt
 8008c14:	9204      	strlt	r2, [sp, #16]
 8008c16:	7823      	ldrb	r3, [r4, #0]
 8008c18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c1a:	d10a      	bne.n	8008c32 <_vfiprintf_r+0x156>
 8008c1c:	7863      	ldrb	r3, [r4, #1]
 8008c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c20:	d132      	bne.n	8008c88 <_vfiprintf_r+0x1ac>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	3402      	adds	r4, #2
 8008c26:	1d1a      	adds	r2, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9203      	str	r2, [sp, #12]
 8008c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008cfc <_vfiprintf_r+0x220>
 8008c36:	2203      	movs	r2, #3
 8008c38:	4650      	mov	r0, sl
 8008c3a:	7821      	ldrb	r1, [r4, #0]
 8008c3c:	f7fd fd07 	bl	800664e <memchr>
 8008c40:	b138      	cbz	r0, 8008c52 <_vfiprintf_r+0x176>
 8008c42:	2240      	movs	r2, #64	@ 0x40
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	eba0 000a 	sub.w	r0, r0, sl
 8008c4a:	4082      	lsls	r2, r0
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	3401      	adds	r4, #1
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c56:	2206      	movs	r2, #6
 8008c58:	4829      	ldr	r0, [pc, #164]	@ (8008d00 <_vfiprintf_r+0x224>)
 8008c5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c5e:	f7fd fcf6 	bl	800664e <memchr>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d03f      	beq.n	8008ce6 <_vfiprintf_r+0x20a>
 8008c66:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <_vfiprintf_r+0x228>)
 8008c68:	bb1b      	cbnz	r3, 8008cb2 <_vfiprintf_r+0x1d6>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	3307      	adds	r3, #7
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	3308      	adds	r3, #8
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	443b      	add	r3, r7
 8008c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c7c:	e76a      	b.n	8008b54 <_vfiprintf_r+0x78>
 8008c7e:	460c      	mov	r4, r1
 8008c80:	2001      	movs	r0, #1
 8008c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c86:	e7a8      	b.n	8008bda <_vfiprintf_r+0xfe>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f04f 0c0a 	mov.w	ip, #10
 8008c8e:	4619      	mov	r1, r3
 8008c90:	3401      	adds	r4, #1
 8008c92:	9305      	str	r3, [sp, #20]
 8008c94:	4620      	mov	r0, r4
 8008c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9a:	3a30      	subs	r2, #48	@ 0x30
 8008c9c:	2a09      	cmp	r2, #9
 8008c9e:	d903      	bls.n	8008ca8 <_vfiprintf_r+0x1cc>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0c6      	beq.n	8008c32 <_vfiprintf_r+0x156>
 8008ca4:	9105      	str	r1, [sp, #20]
 8008ca6:	e7c4      	b.n	8008c32 <_vfiprintf_r+0x156>
 8008ca8:	4604      	mov	r4, r0
 8008caa:	2301      	movs	r3, #1
 8008cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cb0:	e7f0      	b.n	8008c94 <_vfiprintf_r+0x1b8>
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4b13      	ldr	r3, [pc, #76]	@ (8008d08 <_vfiprintf_r+0x22c>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	f7fc fd35 	bl	800572c <_printf_float>
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	1c78      	adds	r0, r7, #1
 8008cc6:	d1d6      	bne.n	8008c76 <_vfiprintf_r+0x19a>
 8008cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d405      	bmi.n	8008cda <_vfiprintf_r+0x1fe>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_vfiprintf_r+0x1fe>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cd6:	f7fd fcb9 	bl	800664c <__retarget_lock_release_recursive>
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	065b      	lsls	r3, r3, #25
 8008cde:	f53f af1f 	bmi.w	8008b20 <_vfiprintf_r+0x44>
 8008ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ce4:	e71e      	b.n	8008b24 <_vfiprintf_r+0x48>
 8008ce6:	ab03      	add	r3, sp, #12
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	462a      	mov	r2, r5
 8008cec:	4630      	mov	r0, r6
 8008cee:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <_vfiprintf_r+0x22c>)
 8008cf0:	a904      	add	r1, sp, #16
 8008cf2:	f7fc ffb9 	bl	8005c68 <_printf_i>
 8008cf6:	e7e4      	b.n	8008cc2 <_vfiprintf_r+0x1e6>
 8008cf8:	080093f8 	.word	0x080093f8
 8008cfc:	080093fe 	.word	0x080093fe
 8008d00:	08009402 	.word	0x08009402
 8008d04:	0800572d 	.word	0x0800572d
 8008d08:	08008ab9 	.word	0x08008ab9

08008d0c <__swbuf_r>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	460e      	mov	r6, r1
 8008d10:	4614      	mov	r4, r2
 8008d12:	4605      	mov	r5, r0
 8008d14:	b118      	cbz	r0, 8008d1e <__swbuf_r+0x12>
 8008d16:	6a03      	ldr	r3, [r0, #32]
 8008d18:	b90b      	cbnz	r3, 8008d1e <__swbuf_r+0x12>
 8008d1a:	f7fd fb61 	bl	80063e0 <__sinit>
 8008d1e:	69a3      	ldr	r3, [r4, #24]
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	071a      	lsls	r2, r3, #28
 8008d26:	d501      	bpl.n	8008d2c <__swbuf_r+0x20>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	b943      	cbnz	r3, 8008d3e <__swbuf_r+0x32>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f82a 	bl	8008d88 <__swsetup_r>
 8008d34:	b118      	cbz	r0, 8008d3e <__swbuf_r+0x32>
 8008d36:	f04f 37ff 	mov.w	r7, #4294967295
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	6922      	ldr	r2, [r4, #16]
 8008d42:	b2f6      	uxtb	r6, r6
 8008d44:	1a98      	subs	r0, r3, r2
 8008d46:	6963      	ldr	r3, [r4, #20]
 8008d48:	4637      	mov	r7, r6
 8008d4a:	4283      	cmp	r3, r0
 8008d4c:	dc05      	bgt.n	8008d5a <__swbuf_r+0x4e>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7ff fdc9 	bl	80088e8 <_fflush_r>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1ed      	bne.n	8008d36 <__swbuf_r+0x2a>
 8008d5a:	68a3      	ldr	r3, [r4, #8]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	1c5a      	adds	r2, r3, #1
 8008d64:	6022      	str	r2, [r4, #0]
 8008d66:	701e      	strb	r6, [r3, #0]
 8008d68:	6962      	ldr	r2, [r4, #20]
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d004      	beq.n	8008d7a <__swbuf_r+0x6e>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	07db      	lsls	r3, r3, #31
 8008d74:	d5e1      	bpl.n	8008d3a <__swbuf_r+0x2e>
 8008d76:	2e0a      	cmp	r6, #10
 8008d78:	d1df      	bne.n	8008d3a <__swbuf_r+0x2e>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7ff fdb3 	bl	80088e8 <_fflush_r>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0d9      	beq.n	8008d3a <__swbuf_r+0x2e>
 8008d86:	e7d6      	b.n	8008d36 <__swbuf_r+0x2a>

08008d88 <__swsetup_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <__swsetup_r+0xa8>)
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	460c      	mov	r4, r1
 8008d92:	b118      	cbz	r0, 8008d9c <__swsetup_r+0x14>
 8008d94:	6a03      	ldr	r3, [r0, #32]
 8008d96:	b90b      	cbnz	r3, 8008d9c <__swsetup_r+0x14>
 8008d98:	f7fd fb22 	bl	80063e0 <__sinit>
 8008d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da0:	0719      	lsls	r1, r3, #28
 8008da2:	d422      	bmi.n	8008dea <__swsetup_r+0x62>
 8008da4:	06da      	lsls	r2, r3, #27
 8008da6:	d407      	bmi.n	8008db8 <__swsetup_r+0x30>
 8008da8:	2209      	movs	r2, #9
 8008daa:	602a      	str	r2, [r5, #0]
 8008dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	81a3      	strh	r3, [r4, #12]
 8008db6:	e033      	b.n	8008e20 <__swsetup_r+0x98>
 8008db8:	0758      	lsls	r0, r3, #29
 8008dba:	d512      	bpl.n	8008de2 <__swsetup_r+0x5a>
 8008dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dbe:	b141      	cbz	r1, 8008dd2 <__swsetup_r+0x4a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__swsetup_r+0x46>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f7fe fab9 	bl	8007340 <_free_r>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6063      	str	r3, [r4, #4]
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f043 0308 	orr.w	r3, r3, #8
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	b94b      	cbnz	r3, 8008e02 <__swsetup_r+0x7a>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df8:	d003      	beq.n	8008e02 <__swsetup_r+0x7a>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 f882 	bl	8008f06 <__smakebuf_r>
 8008e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e06:	f013 0201 	ands.w	r2, r3, #1
 8008e0a:	d00a      	beq.n	8008e22 <__swsetup_r+0x9a>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	60a2      	str	r2, [r4, #8]
 8008e10:	6962      	ldr	r2, [r4, #20]
 8008e12:	4252      	negs	r2, r2
 8008e14:	61a2      	str	r2, [r4, #24]
 8008e16:	6922      	ldr	r2, [r4, #16]
 8008e18:	b942      	cbnz	r2, 8008e2c <__swsetup_r+0xa4>
 8008e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e1e:	d1c5      	bne.n	8008dac <__swsetup_r+0x24>
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	0799      	lsls	r1, r3, #30
 8008e24:	bf58      	it	pl
 8008e26:	6962      	ldrpl	r2, [r4, #20]
 8008e28:	60a2      	str	r2, [r4, #8]
 8008e2a:	e7f4      	b.n	8008e16 <__swsetup_r+0x8e>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e7f7      	b.n	8008e20 <__swsetup_r+0x98>
 8008e30:	20000184 	.word	0x20000184

08008e34 <_raise_r>:
 8008e34:	291f      	cmp	r1, #31
 8008e36:	b538      	push	{r3, r4, r5, lr}
 8008e38:	4605      	mov	r5, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	d904      	bls.n	8008e48 <_raise_r+0x14>
 8008e3e:	2316      	movs	r3, #22
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e4a:	b112      	cbz	r2, 8008e52 <_raise_r+0x1e>
 8008e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e50:	b94b      	cbnz	r3, 8008e66 <_raise_r+0x32>
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f830 	bl	8008eb8 <_getpid_r>
 8008e58:	4622      	mov	r2, r4
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e62:	f000 b817 	b.w	8008e94 <_kill_r>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d00a      	beq.n	8008e80 <_raise_r+0x4c>
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	d103      	bne.n	8008e76 <_raise_r+0x42>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7e7      	b.n	8008e46 <_raise_r+0x12>
 8008e76:	2100      	movs	r1, #0
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e7e:	4798      	blx	r3
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7e0      	b.n	8008e46 <_raise_r+0x12>

08008e84 <raise>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <raise+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f7ff bfd3 	b.w	8008e34 <_raise_r>
 8008e8e:	bf00      	nop
 8008e90:	20000184 	.word	0x20000184

08008e94 <_kill_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	2300      	movs	r3, #0
 8008e98:	4d06      	ldr	r5, [pc, #24]	@ (8008eb4 <_kill_r+0x20>)
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f8 fb8a 	bl	80015ba <_kill>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_kill_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_kill_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000490 	.word	0x20000490

08008eb8 <_getpid_r>:
 8008eb8:	f7f8 bb78 	b.w	80015ac <_getpid>

08008ebc <__swhatbuf_r>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	461e      	mov	r6, r3
 8008eca:	b096      	sub	sp, #88	@ 0x58
 8008ecc:	da0c      	bge.n	8008ee8 <__swhatbuf_r+0x2c>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ed6:	bf14      	ite	ne
 8008ed8:	2340      	movne	r3, #64	@ 0x40
 8008eda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ede:	2000      	movs	r0, #0
 8008ee0:	6031      	str	r1, [r6, #0]
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	b016      	add	sp, #88	@ 0x58
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	466a      	mov	r2, sp
 8008eea:	f000 f849 	bl	8008f80 <_fstat_r>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	dbed      	blt.n	8008ece <__swhatbuf_r+0x12>
 8008ef2:	9901      	ldr	r1, [sp, #4]
 8008ef4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ef8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008efc:	4259      	negs	r1, r3
 8008efe:	4159      	adcs	r1, r3
 8008f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f04:	e7eb      	b.n	8008ede <__swhatbuf_r+0x22>

08008f06 <__smakebuf_r>:
 8008f06:	898b      	ldrh	r3, [r1, #12]
 8008f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0a:	079d      	lsls	r5, r3, #30
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d507      	bpl.n	8008f22 <__smakebuf_r+0x1c>
 8008f12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	6163      	str	r3, [r4, #20]
 8008f1e:	b003      	add	sp, #12
 8008f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f22:	466a      	mov	r2, sp
 8008f24:	ab01      	add	r3, sp, #4
 8008f26:	f7ff ffc9 	bl	8008ebc <__swhatbuf_r>
 8008f2a:	9f00      	ldr	r7, [sp, #0]
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7fe fdb1 	bl	8007a98 <_malloc_r>
 8008f36:	b948      	cbnz	r0, 8008f4c <__smakebuf_r+0x46>
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d4ee      	bmi.n	8008f1e <__smakebuf_r+0x18>
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e7e2      	b.n	8008f12 <__smakebuf_r+0xc>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	6020      	str	r0, [r4, #0]
 8008f5c:	b15b      	cbz	r3, 8008f76 <__smakebuf_r+0x70>
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f64:	f000 f81e 	bl	8008fa4 <_isatty_r>
 8008f68:	b128      	cbz	r0, 8008f76 <__smakebuf_r+0x70>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	431d      	orrs	r5, r3
 8008f7a:	81a5      	strh	r5, [r4, #12]
 8008f7c:	e7cf      	b.n	8008f1e <__smakebuf_r+0x18>
	...

08008f80 <_fstat_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	2300      	movs	r3, #0
 8008f84:	4d06      	ldr	r5, [pc, #24]	@ (8008fa0 <_fstat_r+0x20>)
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	f7f8 fb73 	bl	8001678 <_fstat>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d102      	bne.n	8008f9c <_fstat_r+0x1c>
 8008f96:	682b      	ldr	r3, [r5, #0]
 8008f98:	b103      	cbz	r3, 8008f9c <_fstat_r+0x1c>
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000490 	.word	0x20000490

08008fa4 <_isatty_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4d05      	ldr	r5, [pc, #20]	@ (8008fc0 <_isatty_r+0x1c>)
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7f8 fb71 	bl	8001696 <_isatty>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_isatty_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_isatty_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000490 	.word	0x20000490

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
